services:
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db-security.sql:/docker-entrypoint-initdb.d/init-db-security.sql
    ports:
      - "5432:5432"
    networks:
      - n8n
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=n8n
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - GENERIC_TIMEZONE=${TIMEZONE:-America/Chicago}
      - OLLAMA_BASE_URL=http://ollama:11434
      - NOCODB_URL=http://nocodb:8088
      - LISTMONK_URL=http://listmonk:9000
      - STIRLING_PDF_URL=http://stirling-pdf:8080
      - MEILISEARCH_URL=http://meilisearch:7700
      - GHOST_URL=http://ghost:2368
      - QDRANT_URL=http://qdrant:6333
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./shared-content:/home/node/shared-content
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NC_DB: "pg://nocodb:nocodb@postgres:5432/nocodb"
      NC_AUTH_JWT_SECRET: "${JWT_SECRET}"
      NC_DISABLE_TELE: "true"
      NC_PUBLIC_URL: "${NOCODB_PUBLIC_URL:-http://localhost:8088}"
      NC_PORT: "8088"
    ports:
      - "8088:8088"
    volumes:
      - nocodb_data:/usr/app/data
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8088"]
      interval: 30s
      timeout: 10s
      retries: 3

  listmonk:
    image: listmonk/listmonk:latest
    container_name: listmonk
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      LISTMONK_app__address: "0.0.0.0:9000"
      LISTMONK_db__host: "postgres"
      LISTMONK_db__port: "5432"
      LISTMONK_db__user: "listmonk"
      LISTMONK_db__password: "listmonk"
      LISTMONK_db__database: "listmonk"
      LISTMONK_db__ssl_mode: "disable"
      LISTMONK_app__admin_username: "${LISTMONK_ADMIN_USER:-admin}"
      LISTMONK_app__admin_password: "${LISTMONK_ADMIN_PASSWORD}"
    ports:
      - "9000:9000"
    volumes:
      - listmonk_data:/listmonk/uploads
    networks:
      - n8n
    command: ["./listmonk", "--install", "--yes", "--idempotent"]
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:9000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  stirling-pdf:
    image: stirlingtools/stirling-pdf:latest
    container_name: stirling-pdf
    restart: unless-stopped
    environment:
      - DOCKER_ENABLE_SECURITY=false
      - INSTALL_BOOK_AND_ADVANCED_HTML_OPS=true
      - LANGS=en_US
    ports:
      - "8082:8080"
    volumes:
      - stirling_data:/usr/share/tessdata
      - ./shared-content:/usr/share/stirling-pdf/shared-content
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: meilisearch
    restart: unless-stopped
    environment:
      - MEILI_MASTER_KEY=${MEILISEARCH_MASTER_KEY}
      - MEILI_ENV=production
      - MEILI_HTTP_ADDR=0.0.0.0:7700
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:7700/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ghost:
    image: ghost:5-alpine
    container_name: ghost
    restart: unless-stopped
    depends_on:
      - ghost-mysql
    environment:
      - NODE_ENV=production
      - url=${GHOST_URL:-http://localhost:2368}
      - database__client=mysql
      - database__connection__host=ghost-mysql
      - database__connection__user=ghost
      - database__connection__password=ghost
      - database__connection__database=ghost
      - mail__transport=SMTP
      - mail__options__service=Resend
      - mail__options__auth__user=resend
      - mail__options__auth__pass=${RESEND_API_KEY}
      - mail__from=${GHOST_MAIL_FROM:-noreply@tenantflow.com}
    ports:
      - "2368:2368"
    volumes:
      - ghost_content:/var/lib/ghost/content
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:2368"]
      interval: 30s
      timeout: 10s
      retries: 3

  ghost-mysql:
    image: mysql:8.0
    container_name: ghost-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=ghost
      - MYSQL_USER=ghost
      - MYSQL_PASSWORD=ghost
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  penpot-frontend:
    image: penpotapp/frontend:latest
    container_name: penpot-frontend
    restart: unless-stopped
    ports:
      - "9001:80"
    environment:
      - PENPOT_FLAGS=enable-registration enable-login-with-password
    depends_on:
      - penpot-backend
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  penpot-backend:
    image: penpotapp/backend:latest
    container_name: penpot-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      - penpot-redis
    environment:
      - PENPOT_FLAGS=enable-registration enable-login-with-password enable-smtp
      - PENPOT_PUBLIC_URI=${PENPOT_PUBLIC_URL:-http://localhost:9001}
      - PENPOT_DATABASE_URI=postgresql://penpot:penpot@postgres:5432/penpot
      - PENPOT_REDIS_URI=redis://penpot-redis:6379/0
      - PENPOT_ASSETS_STORAGE_BACKEND=assets-fs
      - PENPOT_STORAGE_ASSETS_FS_DIRECTORY=/opt/data/assets
      - PENPOT_SMTP_DEFAULT_FROM=${PENPOT_SMTP_FROM:-noreply@tenantflow.com}
      - PENPOT_SMTP_DEFAULT_REPLY_TO=${PENPOT_SMTP_REPLY_TO:-noreply@tenantflow.com}
      - PENPOT_SMTP_HOST=smtp.resend.com
      - PENPOT_SMTP_PORT=587
      - PENPOT_SMTP_USERNAME=resend
      - PENPOT_SMTP_PASSWORD=${RESEND_API_KEY}
      - PENPOT_SMTP_TLS=true
    volumes:
      - penpot_assets:/opt/data/assets
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6060/readyz"]
      interval: 30s
      timeout: 10s
      retries: 3

  penpot-redis:
    image: redis:7-alpine
    container_name: penpot-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:6333"]
      interval: 30s
      timeout: 10s
      retries: 3

  temporal:
    image: temporalio/auto-setup:latest
    container_name: temporal
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "7233:7233"
      - "8233:8233"
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgres
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "tctl", "--address", "localhost:7233", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  temporal-web:
    image: temporalio/web:latest
    container_name: temporal-web
    restart: unless-stopped
    depends_on:
      - temporal
    ports:
      - "8233:8080"
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  excalidraw:
    image: excalidraw/excalidraw:latest
    container_name: excalidraw
    restart: unless-stopped
    ports:
      - "3000:80"
    networks:
      - n8n
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  n8n_data:
    driver: local
  ollama_data:
    driver: local
  nocodb_data:
    driver: local
  listmonk_data:
    driver: local
  stirling_data:
    driver: local
  meilisearch_data:
    driver: local
  ghost_content:
    driver: local
  penpot_assets:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  n8n:
    driver: bridge
    name: n8n_network