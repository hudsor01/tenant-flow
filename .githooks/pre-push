#!/bin/bash
# Enhanced Pre-push Hook for TenantFlow
# Final quality checks and SEO optimization before remote push

echo "🚀 TenantFlow Pre-push Hook - Final Quality & SEO Verification"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
SEO_SCRIPT="$PROJECT_ROOT/scripts/generate-seo-optimized.js"
HOOK_START_TIME=$(date +%s)

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log_step() {
    local message="$1"
    local type="${2:-info}"
    
    case $type in
        "success") echo -e "${GREEN}✅ $message${NC}" ;;
        "warning") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "error") echo -e "${RED}❌ $message${NC}" ;;
        "info") echo -e "${BLUE}📝 $message${NC}" ;;
        *) echo "   $message" ;;
    esac
}

# 1. PRIORITY: Final SEO Generation Check
log_step "Running final SEO generation for Google Search Console..."
cd "$PROJECT_ROOT"

if [ -f "$SEO_SCRIPT" ]; then
    if node "$SEO_SCRIPT"; then
        log_step "SEO files generated successfully" "success"
        
        # Check if SEO files were updated and need committing
        if ! git diff --quiet HEAD -- apps/frontend/public/sitemap*.xml apps/frontend/public/robots.txt apps/frontend/public/structured-data.json 2>/dev/null; then
            log_step "SEO files have been updated and need to be committed:" "warning"
            git diff --name-only HEAD -- apps/frontend/public/sitemap*.xml apps/frontend/public/robots.txt apps/frontend/public/structured-data.json 2>/dev/null
            log_step "Please commit these SEO files before pushing" "warning"
        else
            log_step "SEO files are up to date" "success"
        fi
    else
        log_step "SEO generation failed - proceeding with caution" "warning"
    fi
else
    log_step "SEO generation script not found at $SEO_SCRIPT" "warning"
fi

# 2. Quick Syntax Check (instead of full build)
log_step "Running quick syntax verification..."
if command -v npm >/dev/null 2>&1; then
    # Just run typecheck for quick verification
    if npm run typecheck >/dev/null 2>&1; then
        log_step "Syntax verification passed" "success"
    else
        log_step "TypeScript errors detected - please fix before pushing" "error"
        exit 1
    fi
fi

# 3. Dependency Vulnerability Check
log_step "Running dependency vulnerability scan..."
if command -v npm >/dev/null 2>&1; then
    if npm audit --audit-level=high >/dev/null 2>&1; then
        log_step "No high-severity vulnerabilities found" "success"
    else
        log_step "High-severity vulnerabilities detected - run 'npm audit' for details" "warning"
    fi
fi

# 4. Lint Verification
log_step "Running lint verification..."
if command -v npm >/dev/null 2>&1; then
    # Lint check only (TypeScript already checked above)
    if npm run lint >/dev/null 2>&1; then
        log_step "Lint verification passed" "success"
    else
        log_step "Lint warnings detected - consider fixing" "warning"
        # Don't block push for lint warnings
    fi
fi

# 5. Turbo Configuration Check
log_step "Verifying Turbo configuration..."
if [ -f "turbo.json" ]; then
    log_step "Turbo configuration found" "success"
else
    log_step "Turbo configuration missing" "warning"
fi

# 6. Workspace Dependency Validation
log_step "Validating workspace dependencies..."
if [ -f "package.json" ]; then
    # Check for workspace dependency issues
    if npm ls --depth=0 >/dev/null 2>&1; then
        log_step "Workspace dependencies validated" "success"
    else
        log_step "Workspace dependency issues detected" "warning"
    fi
fi

# 7. Database Safety Final Check
log_step "Final database safety verification..."
recent_files=$(git diff --name-only HEAD~1..HEAD 2>/dev/null || git diff --name-only HEAD 2>/dev/null)
db_files=$(echo "$recent_files" | grep -E '\.(sql|prisma)$' || true)

if [ -n "$db_files" ]; then
    log_step "Database changes detected in recent commits" "warning"
    for file in $db_files; do
        if [ -f "$file" ] && grep -i "drop\|delete\|truncate" "$file" 2>/dev/null; then
            log_step "⚠️ CAUTION: Destructive database operation in $file" "warning"
        fi
    done
fi

# 8. SEO Files Validation
log_step "Validating SEO files for Google Search Console..."
seo_files=(
    "apps/frontend/public/sitemap.xml"
    "apps/frontend/public/sitemap-index.xml"
    "apps/frontend/public/robots.txt"
    "apps/frontend/public/structured-data.json"
)

all_seo_valid=true
for file in "${seo_files[@]}"; do
    if [ -f "$file" ]; then
        file_size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
        if [ "$file_size" -gt 0 ]; then
            log_step "✓ $(basename "$file") - ${file_size} bytes" "success"
        else
            log_step "✗ $(basename "$file") - Empty file" "error"
            all_seo_valid=false
        fi
    else
        log_step "✗ $(basename "$file") - Missing" "warning"
    fi
done

if [ "$all_seo_valid" = false ]; then
    log_step "SEO files validation failed - consider regenerating" "warning"
fi

# Performance Summary
end_time=$(date +%s)
duration=$((end_time - HOOK_START_TIME))

log_step "Pre-push checks completed in ${duration}s" "success"
log_step "🎉 All checks passed! Ready for remote push..." "success"
log_step "🌐 SEO files optimized for Google Search Console" "info"

exit 0
