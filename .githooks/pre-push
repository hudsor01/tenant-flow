#!/bin/bash
# Enhanced Pre-push Hook for TenantFlow
# Final quality checks and SEO optimization before remote push

echo "🚀 TenantFlow Pre-push Hook - Final Quality & SEO Verification"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
SEO_SCRIPT="$PROJECT_ROOT/scripts/generate-seo-optimized.js"
HOOK_START_TIME=$(date +%s)

# Color codes for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log_step() {
    local message="$1"
    local type="${2:-info}"
    
    case $type in
        "success") echo -e "${GREEN}✅ $message${NC}" ;;
        "warning") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "error") echo -e "${RED}❌ $message${NC}" ;;
        "info") echo -e "${BLUE}📝 $message${NC}" ;;
        *) echo "   $message" ;;
    esac
}

# 1. SEO Files Verification (no generation during push)
log_step "Verifying SEO files are up to date..."
cd "$PROJECT_ROOT"

seo_files=(
    "apps/frontend/public/sitemap.xml"
    "apps/frontend/public/robots.txt"
)

seo_missing=false
for file in "${seo_files[@]}"; do
    if [ ! -f "$file" ]; then
        log_step "Missing SEO file: $file" "warning"
        seo_missing=true
    fi
done

if [ "$seo_missing" = true ]; then
    log_step "Some SEO files are missing. Run 'node $SEO_SCRIPT' to generate them." "warning"
    log_step "Continuing with push anyway..." "info"
fi

# 2. Ensure monorepo packages are built
log_step "Checking monorepo package builds..."
packages_need_build=false

# Check if package dist folders exist
for pkg in "types" "shared"; do
    if [ ! -d "packages/$pkg/dist" ]; then
        log_step "Package @tenantflow/$pkg needs building" "warning"
        packages_need_build=true
    fi
done

if [ "$packages_need_build" = true ]; then
    log_step "Building monorepo packages..."
    if npm run build >/dev/null 2>&1; then
        log_step "Packages built successfully" "success"
    else
        log_step "Build failed - trying to continue anyway" "warning"
    fi
fi

# 3. Basic validation (not full typecheck)
log_step "Running basic validation..."
if command -v npm >/dev/null 2>&1; then
    # Just check for critical errors in changed files
    changed_files=$(git diff --name-only origin/main...HEAD 2>/dev/null | grep -E '\.(ts|tsx|js|jsx)$' || true)
    
    if [ -n "$changed_files" ]; then
        critical_errors=false
        for file in $changed_files; do
            if [ -f "$file" ] && ! node -c "$file" >/dev/null 2>&1; then
                log_step "Syntax error in $file" "error"
                critical_errors=true
            fi
        done
        
        if [ "$critical_errors" = true ]; then
            log_step "❌ PUSH BLOCKED: Critical syntax errors found!" "error"
            exit 1
        else
            log_step "Basic validation passed" "success"
        fi
    else
        log_step "No JavaScript/TypeScript changes to validate" "info"
    fi
fi

# 4. Security Check (critical only)
log_step "Checking for critical security issues..."
if command -v npm >/dev/null 2>&1; then
    # Only check for critical vulnerabilities
    critical_vulns=$(npm audit --json 2>/dev/null | grep -c '"severity":"critical"' || echo 0)
    if [ "$critical_vulns" -gt 0 ]; then
        log_step "❌ PUSH BLOCKED: $critical_vulns critical vulnerabilities found!" "error"
        log_step "Run 'npm audit' to see details" "error"
        exit 1
    else
        log_step "No critical vulnerabilities found" "success"
    fi
fi

# 5. Final Quick Checks
log_step "Running final checks..."

# Check if pushing to main/master
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [[ "$current_branch" == "main" ]] || [[ "$current_branch" == "master" ]]; then
    log_step "Pushing to $current_branch branch" "info"
    
    # Ensure no merge conflicts markers
    if git diff --name-only origin/$current_branch...HEAD 2>/dev/null | xargs grep -l "^<<<<<<< " 2>/dev/null; then
        log_step "❌ PUSH BLOCKED: Merge conflict markers detected!" "error"
        exit 1
    fi
fi

# Check commit message quality (just a warning)
recent_commits=$(git log --oneline -5 --no-merges 2>/dev/null || true)
if echo "$recent_commits" | grep -E "^[a-f0-9]+ (wip|WIP|todo|TODO|fix|Fix)$" >/dev/null 2>&1; then
    log_step "Consider using more descriptive commit messages" "warning"
fi

# 6. Database Safety Check
db_files=$(git diff --name-only origin/main...HEAD 2>/dev/null | grep -E '\.(sql|prisma)$' || true)

if [ -n "$db_files" ]; then
    log_step "Database changes detected" "info"
    destructive_found=false
    
    for file in $db_files; do
        if [ -f "$file" ]; then
            # Check for destructive operations in new migrations only
            if [[ "$file" =~ migrations/.*\.sql$ ]] && grep -iE "drop\s+(table|column|database)|truncate|delete\s+from" "$file" 2>/dev/null; then
                log_step "⚠️ Destructive operation in $file" "warning"
                destructive_found=true
            fi
        fi
    done
    
    if [ "$destructive_found" = true ]; then
        log_step "Destructive database operations detected - ensure proper backup" "warning"
        read -p "Are you sure you want to push destructive migrations? (y/N) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_step "Push cancelled by user" "info"
            exit 1
        fi
    fi
fi

# Performance Summary
end_time=$(date +%s)
duration=$((end_time - HOOK_START_TIME))

log_step "Pre-push checks completed in ${duration}s" "success"
log_step "🎉 All checks passed! Ready for remote push..." "success"
log_step "🌐 SEO files optimized for Google Search Console" "info"

exit 0
