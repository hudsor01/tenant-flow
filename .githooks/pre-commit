#!/bin/bash

# Comprehensive pre-commit security hook
# Checks for secrets, credentials, and runs RLS security checks

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}üîí Running Security Checks...${NC}"

# Track if any security issues are found
SECURITY_ISSUES_FOUND=false

# 1. SECRETS AND CREDENTIALS DETECTION
echo -e "${BLUE}üîç Scanning for secrets and credentials...${NC}"

# Get list of files being committed (excluding deleted files)
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -n "$STAGED_FILES" ]; then
  # Patterns that indicate secrets/credentials
  SECRET_PATTERNS=(
    # API Keys
    "api[_-]?key\s*[=:]\s*['\"][a-z0-9_-]{20,}['\"]"
    "apikey\s*[=:]\s*['\"][a-z0-9_-]{20,}['\"]"
    # Stripe keys
    "sk_live_[a-zA-Z0-9]{99}"
    "pk_live_[a-zA-Z0-9]{99}"
    "rk_live_[a-zA-Z0-9]{24}"
    # Database URLs with credentials
    "postgresql://[^:]+:[^@]+@"
    "mysql://[^:]+:[^@]+@"
    # JWT secrets (actual values, not placeholders)
    "jwt[_-]?secret\s*[=:]\s*['\"][a-zA-Z0-9+/=]{32,}['\"]"
    # Generic secrets (high entropy)
    "secret\s*[=:]\s*['\"][a-zA-Z0-9+/=]{32,}['\"]"
    "password\s*[=:]\s*['\"][^'\"]{8,}['\"]"
    # Supabase keys
    "eyJ[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*\.[a-zA-Z0-9_-]*"
    # Private keys
    "-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----"
    # OAuth tokens
    "access[_-]?token\s*[=:]\s*['\"][a-zA-Z0-9_-]{20,}['\"]"
  )

  # Files to exclude from secret scanning
  EXCLUDE_PATTERNS=(
    "\.env\.example$"
    "\.env\.template$"
    "README\.md$"
    "\.md$"
    "package-lock\.json$"
    "yarn\.lock$"
    "\.gitignore$"
    "\.git/"
    "node_modules/"
    "\.min\.js$"
    "\.map$"
    "vercel\.json$"
    "apps/backend/src/app\.controller\.ts$"
    "apps/backend/src/main\.ts$"
  )

  # Check each staged file
  for file in $STAGED_FILES; do
    # Skip if file matches exclude patterns
    SHOULD_SKIP=false
    for exclude in "${EXCLUDE_PATTERNS[@]}"; do
      if echo "$file" | grep -qE "$exclude"; then
        SHOULD_SKIP=true
        break
      fi
    done
    
    if [ "$SHOULD_SKIP" = true ]; then
      continue
    fi

    # Only check text files that exist
    if [ -f "$file" ] && file "$file" | grep -qE "(text|JSON|XML|script)"; then
      # Check each secret pattern
      for pattern in "${SECRET_PATTERNS[@]}"; do
        if grep -iE "$pattern" "$file" >/dev/null 2>&1; then
          echo -e "${RED}‚ùå Potential secret found in $file${NC}"
          echo -e "${YELLOW}   Pattern: $pattern${NC}"
          
          # Show the problematic line (masked)
          PROBLEM_LINE=$(grep -inE "$pattern" "$file" | head -1)
          LINE_NUM=$(echo "$PROBLEM_LINE" | cut -d: -f1)
          LINE_CONTENT=$(echo "$PROBLEM_LINE" | cut -d: -f2- | sed 's/[a-zA-Z0-9+/=]\{8\}[a-zA-Z0-9+/=]*/***REDACTED***/g')
          echo -e "${YELLOW}   Line $LINE_NUM: $LINE_CONTENT${NC}"
          
          SECURITY_ISSUES_FOUND=true
        fi
      done
    fi
  done

  # Check for common environment variable leaks in non-.env files
  for file in $STAGED_FILES; do
    if [ -f "$file" ] && ! echo "$file" | grep -qE "\.env|\.env\.|docker-compose\.yml" && file "$file" | grep -qE "(text|JSON|script)"; then
      # Look for actual values assigned to sensitive env vars (not ${VAR} references)
      if grep -iE "(DATABASE_URL|JWT_SECRET|STRIPE_SECRET|SUPABASE_SERVICE_ROLE_KEY|API_KEY)\s*[=:]\s*['\"][^$][^'\"]{10,}['\"]" "$file" >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Environment variable with actual value found in $file${NC}"
        echo -e "${YELLOW}   Environment variables should not contain actual values in committed code${NC}"
        SECURITY_ISSUES_FOUND=true
      fi
    fi
  done

  if [ "$SECURITY_ISSUES_FOUND" = false ]; then
    echo -e "${GREEN}‚úÖ No secrets or credentials detected${NC}"
  else
    echo -e "${RED}‚ùå Security issues found! Please remove secrets before committing.${NC}"
    echo -e "${YELLOW}üí° Tips:${NC}"
    echo -e "${YELLOW}   - Use environment variables instead of hardcoded secrets${NC}"
    echo -e "${YELLOW}   - Add sensitive files to .gitignore${NC}"
    echo -e "${YELLOW}   - Use .env.example with placeholder values${NC}"
    exit 1
  fi
else
  echo -e "${YELLOW}‚ö†Ô∏è  No files to scan${NC}"
fi

# 2. RLS SECURITY CHECKS
echo -e "${BLUE}üîí Checking RLS-related files...${NC}"

# Check if RLS-related files are being modified
RLS_FILES_CHANGED=false

# List of patterns that trigger RLS checks
RLS_PATTERNS=(
  "apps/backend/supabase/migrations/"
  "apps/backend/src/database/rls/"
  "apps/backend/prisma/schema.prisma"
  "scripts/*rls*"
)

# Check if any RLS-related files are in the commit
for pattern in "${RLS_PATTERNS[@]}"; do
  if git diff --cached --name-only | grep -q "$pattern"; then
    RLS_FILES_CHANGED=true
    break
  fi
done

if [ "$RLS_FILES_CHANGED" = true ]; then
  echo -e "${YELLOW}RLS-related files detected in commit. Running security checks...${NC}"
  
  # Run RLS completeness check if script exists
  if command -v npm >/dev/null 2>&1 && npm run --silent 2>/dev/null | grep -q "rls:completeness"; then
    echo "üîç Checking RLS completeness..."
    if ! npm run rls:completeness > /dev/null 2>&1; then
      echo -e "${RED}‚ùå RLS completeness check failed!${NC}"
      echo "Run 'npm run rls:completeness' to see details."
      exit 1
    fi
  fi
  
  # Run basic RLS tests if database is available and script exists
  if [ -n "$DATABASE_URL" ] && command -v npm >/dev/null 2>&1 && npm run --silent 2>/dev/null | grep -q "rls:test"; then
    echo "üß™ Running basic RLS tests..."
    if ! npm run rls:test > /dev/null 2>&1; then
      echo -e "${RED}‚ùå RLS tests failed!${NC}"
      echo "Run 'npm run rls:test' to see details."
      exit 1
    fi
  else
    echo -e "${YELLOW}‚ö†Ô∏è  Skipping RLS tests (no DATABASE_URL or rls:test script)${NC}"
  fi
  
  echo -e "${GREEN}‚úÖ RLS security checks passed!${NC}"
else
  echo "‚ÑπÔ∏è  No RLS-related files in commit."
fi

# 3. BASIC FILE SECURITY CHECKS
echo -e "${BLUE}üõ°Ô∏è  Running basic file security checks...${NC}"

# Check for potentially dangerous file extensions
DANGEROUS_EXTENSIONS=("\.key$" "\.pem$" "\.p12$" "\.pfx$")
for file in $STAGED_FILES; do
  for ext in "${DANGEROUS_EXTENSIONS[@]}"; do
    if echo "$file" | grep -qE "$ext"; then
      echo -e "${RED}‚ùå Potentially sensitive file detected: $file${NC}"
      echo -e "${YELLOW}   Private key files should not be committed${NC}"
      exit 1
    fi
  done
done

echo -e "${GREEN}‚úÖ File security checks passed!${NC}"

echo -e "${GREEN}üöÄ All security checks completed successfully!${NC}"