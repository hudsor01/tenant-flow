#!/usr/bin/env node
/**
 * Extract TRPC Types Script
 * 
 * This script extracts the AppRouter type definition from the backend
 * and generates a proper type file in the shared package.
 * This avoids circular dependencies while maintaining full type safety.
 */

import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs'
import { resolve, dirname } from 'path'

const BACKEND_ROUTER_PATH = resolve(__dirname, '../apps/backend/dist/trpc/app-router.d.ts')
const BACKEND_TYPES_PATH = resolve(__dirname, '../apps/backend/dist/trpc/app-router.types.d.ts')
const SHARED_TYPES_PATH = resolve(__dirname, '../packages/shared/src/backend-types.ts')

// Read the actual router type definition and extract the type structure
function extractRouterType(): string | null {
  try {
    if (!existsSync(BACKEND_ROUTER_PATH)) {
      return null
    }
    
    const content = readFileSync(BACKEND_ROUTER_PATH, 'utf8')
    
    // Extract the router structure from the type definition
    // This is a simplified extraction - in production you might use ts-morph
    const routerMatch = content.match(/export declare const createAppRouter[^}]+}\): (.+)$/m)
    if (!routerMatch) {
      return null
    }
    
    // For now, we'll use a reference to the backend's built types
    return 'EXTRACTED'
  } catch (error) {
    console.error('Error reading backend router:', error)
    return null
  }
}

async function main() {
  try {
    // Check if backend has been built
    const hasBackendBuild = existsSync(BACKEND_TYPES_PATH) && existsSync(BACKEND_ROUTER_PATH)
    
    if (hasBackendBuild) {
      console.log('✅ Backend types found, generating proper type exports...')
      
      // Ensure directory exists
      const dir = dirname(SHARED_TYPES_PATH)
      if (!existsSync(dir)) {
        mkdirSync(dir, { recursive: true })
      }
      
      // Generate the type file with a direct type definition
      const typeDefinition = `// Backend Types Bridge - AUTO-GENERATED
// This file is generated by scripts/extract-trpc-types.ts
// DO NOT EDIT MANUALLY
// Generated on: ${new Date().toISOString()}

import type { inferRouterInputs, inferRouterOutputs } from '@trpc/server'
import type { createAppRouter } from '../../apps/backend/src/trpc/app-router'

// Define the AppRouter type using the factory function type
export type AppRouter = ReturnType<typeof createAppRouter>

// Type helpers for inferring input/output types
export type RouterInputs = inferRouterInputs<AppRouter>
export type RouterOutputs = inferRouterOutputs<AppRouter>

// Re-export utilities
export { inferRouterInputs, inferRouterOutputs } from '@trpc/server'
`
      
      writeFileSync(SHARED_TYPES_PATH, typeDefinition)
      console.log('✅ Successfully generated backend-types.ts with full type safety')
    } else {
      console.log('⚠️  Backend not built yet, generating fallback types...')
      console.log('   Run "npm run build:backend" to generate proper types')
      
      // Generate fallback that will work for now
      const fallbackDefinition = `// Backend Types Bridge - FALLBACK MODE
// This file is generated by scripts/extract-trpc-types.ts
// The backend hasn't been built yet, so we're using minimal types
// Run 'npm run build:backend' and then 'npm run extract:trpc-types' to get proper types
// Generated on: ${new Date().toISOString()}

import type { inferRouterInputs, inferRouterOutputs } from '@trpc/server'

// Temporary type definition that provides basic structure
// This will be replaced with proper types after backend build
export interface AppRouter {
  auth: any
  properties: any
  tenants: any
  maintenance: any
  units: any
  leases: any
  subscriptions: any
}

// Placeholder types until backend is built
export type RouterInputs = Record<string, any>
export type RouterOutputs = Record<string, any>

// Re-export utilities
export { inferRouterInputs, inferRouterOutputs } from '@trpc/server'
`
      
      writeFileSync(SHARED_TYPES_PATH, fallbackDefinition)
      console.log('✅ Generated backend-types.ts with fallback types')
    }
  } catch (error) {
    console.error('❌ Error extracting TRPC types:', error)
    process.exit(1)
  }
}

main()