# syntax=docker/dockerfile:1.6

# --- Stage 1: Dependencies Cache ---
FROM node:22-slim AS deps

WORKDIR /app

# Copy ONLY package files first (better layer caching)
COPY package*.json ./
COPY apps/backend/package*.json ./apps/backend/
COPY packages/shared/package*.json ./packages/shared/
COPY packages/database/package*.json ./packages/database/
COPY packages/typescript-config/package*.json ./packages/typescript-config/

# Install dependencies (this layer caches if package.json doesn't change!)
RUN --mount=type=cache,target=/root/.npm \
    npm ci --include=dev --maxsockets=10

# --- Stage 2: Prisma Generation ---
FROM deps AS prisma

WORKDIR /app

# Copy prisma schema
COPY packages/database/prisma ./packages/database/prisma

# Generate Prisma client (caches if schema doesn't change)
WORKDIR /app/packages/database
RUN npx prisma generate --schema=./prisma/schema.prisma

# --- Stage 3: Build ---
FROM prisma AS builder

WORKDIR /app

# Copy source code
COPY . .

# Build (uses cached dependencies and prisma)
RUN --mount=type=cache,target=/app/.turbo \
    cd packages/shared && npm run build && \
    cd ../database && npm run build && \
    cd ../../apps/backend && \
    NODE_ENV=production NODE_OPTIONS='--max-old-space-size=4096' npx nest build

# --- Stage 4: Production ---
FROM node:22-slim AS production

WORKDIR /app

# Install runtime deps with cache mount
RUN --mount=type=cache,target=/root/.npm \
    apt-get update && \
    apt-get install -y --no-install-recommends ca-certificates tini && \
    rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package*.json ./
COPY apps/backend/package*.json ./apps/backend/
COPY packages/shared/package*.json ./packages/shared/
COPY packages/database/package*.json ./packages/database/
COPY packages/typescript-config/package*.json ./packages/typescript-config/

# Install production deps with cache
RUN --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev --maxsockets=5

# Copy built app and prisma
COPY --from=builder /app/apps/backend/dist ./apps/backend/dist
COPY --from=builder /app/packages/shared/dist ./packages/shared/dist
COPY --from=builder /app/packages/database/dist ./packages/database/dist
COPY --from=builder /app/packages/database/prisma ./packages/database/prisma
COPY --from=builder /app/packages/database/src/generated ./packages/database/src/generated

WORKDIR /app/apps/backend

ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=768"

EXPOSE ${PORT:-3001}

HEALTHCHECK --interval=30s --timeout=10s --start-period=90s --retries=5 \
    CMD node -e "require('http').get('http://localhost:' + (process.env.PORT || 3001) + '/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1)).on('error', () => process.exit(1))"

ENTRYPOINT ["tini", "--"]
CMD ["node", "dist/main.js"]