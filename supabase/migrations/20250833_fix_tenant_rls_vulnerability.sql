-- CRITICAL SECURITY FIX: Fix Tenant table RLS vulnerability
-- 
-- ISSUE: The current policy allows ANY authenticated user to access ALL tenant records
-- due to the "OR true" clause: ((userId = auth.uid()) OR true)
-- This creates a complete bypass of security controls!
--
-- SEVERITY: CRITICAL - Data breach risk for all tenant personal information
-- 
-- FIX: Replace with proper owner-only access policies

-- Drop the vulnerable policy
DROP POLICY IF EXISTS "Users can access their tenant records" ON public."tenant";

-- Drop existing policies to avoid conflicts, then recreate
DROP POLICY IF EXISTS "tenant_select_owner" ON public."tenant";
DROP POLICY IF EXISTS "tenant_modify_owner" ON public."tenant";
DROP POLICY IF EXISTS "tenant_insert_self" ON public."tenant";
DROP POLICY IF EXISTS "tenant_delete_owner" ON public."tenant";

-- Create secure policies for Tenant table
CREATE POLICY "tenant_select_owner" ON public."tenant"
  FOR SELECT USING ("userId" = auth.uid()::text);

CREATE POLICY "tenant_modify_owner" ON public."tenant"
  FOR UPDATE USING ("userId" = auth.uid()::text)
  WITH CHECK ("userId" = auth.uid()::text);

CREATE POLICY "tenant_insert_self" ON public."tenant"
  FOR INSERT WITH CHECK ("userId" = auth.uid()::text);

CREATE POLICY "tenant_delete_owner" ON public."tenant"
  FOR DELETE USING ("userId" = auth.uid()::text);

-- Add comments for clarity and future reference
COMMENT ON POLICY "tenant_select_owner" ON public."tenant" IS 
  'SECURITY: Tenants can only view their own records - prevents cross-tenant data access';

COMMENT ON POLICY "tenant_modify_owner" ON public."tenant" IS 
  'SECURITY: Tenants can only modify their own records - prevents unauthorized updates';

COMMENT ON POLICY "tenant_insert_self" ON public."tenant" IS 
  'SECURITY: Users can only create tenant records for themselves - prevents impersonation';

COMMENT ON POLICY "tenant_delete_owner" ON public."tenant" IS 
  'SECURITY: Tenants can only delete their own records - prevents data destruction attacks';

-- Verify the fix worked by testing the policy
-- After applying this migration, run:
-- SELECT * FROM "tenant" WHERE "userId" != auth.uid()::text;
-- This should return 0 rows for non-admin users