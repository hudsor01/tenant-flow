/**
 * Server Actions for Billing and Stripe Integration
 * Direct API integration without abstraction
 */

'use server'

import { apiMutate } from '@/lib/utils/api-utils'
import { redirect } from 'next/navigation'

export interface BillingFormState {
	success: boolean
	error?: string
	clientSecret?: string
	sessionUrl?: string
}

export async function createCheckoutSession(
	priceId: string
): Promise<BillingFormState> {
	try {
		const response = await apiClient.post<{
			sessionId: string
			sessionUrl: string
		}>('/stripe/create-checkout-session', {
			priceId,
			successUrl: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard?session_id={CHECKOUT_SESSION_ID}`,
			cancelUrl: `${process.env.NEXT_PUBLIC_APP_URL}/pricing`
		})

		if (response.sessionUrl) {
			redirect(response.sessionUrl)
		}

		return {
			success: true,
			sessionUrl: response.sessionUrl
		}
	} catch (error) {
		return {
			success: false,
			error:
				error instanceof Error
					? error.message
					: 'Failed to create checkout session'
		}
	}
}

export async function createPaymentIntent(
	amount: number,
	currency = 'usd'
): Promise<BillingFormState> {
	try {
		const response = await apiClient.post<{
			clientSecret: string
		}>('/stripe/create-payment-intent', {
			amount,
			currency
		})

		return {
			success: true,
			clientSecret: response.clientSecret
		}
	} catch (error) {
		return {
			success: false,
			error:
				error instanceof Error
					? error.message
					: 'Failed to create payment intent'
		}
	}
}

export async function createPortalSession(): Promise<BillingFormState> {
	try {
		const response = await apiClient.post<{
			url: string
		}>('/stripe/create-portal-session', {
			returnUrl: `${process.env.NEXT_PUBLIC_APP_URL}/dashboard`
		})

		if (response.url) {
			redirect(response.url)
		}

		return {
			success: true,
			sessionUrl: response.url
		}
	} catch (error) {
		return {
			success: false,
			error:
				error instanceof Error
					? error.message
					: 'Failed to create portal session'
		}
	}
}

export type { BillingFormState as CheckoutFormState }
