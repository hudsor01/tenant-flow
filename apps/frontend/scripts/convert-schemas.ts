#!/usr/bin/env node

/**
 * Convert Backend JSON Schemas to Frontend Zod Schemas
 * 
 * This script reads JSON Schema definitions from the backend
 * and converts them to Zod schemas for frontend validation
 */

import { jsonSchemaToZod } from 'json-schema-to-zod'
import fs from 'fs'
import path from 'path'

// Paths
const BACKEND_SCHEMAS_DIR = path.resolve(__dirname, '../../backend/src/schemas')
const OUTPUT_DIR = path.resolve(__dirname, '../src/lib/validation/generated')
const OUTPUT_FILE = path.join(OUTPUT_DIR, 'backend-schemas.ts')

// Schema files to process
const SCHEMA_FILES = [
	'contact.schemas.ts',
	'auth.schemas.ts', 
	'stripe.schemas.ts',
	'property.schemas.ts'
]

async function convertSchemas() {
	console.log('🔄 Converting backend JSON schemas to Zod...')
	
	// Ensure output directory exists
	if (!fs.existsSync(OUTPUT_DIR)) {
		fs.mkdirSync(OUTPUT_DIR, { recursive: true })
	}

	let zodSchemas: string[] = []
	let imports: string[] = ['import { z } from "zod"']
	
	for (const schemaFile of SCHEMA_FILES) {
		const schemaPath = path.join(BACKEND_SCHEMAS_DIR, schemaFile)
		
		if (!fs.existsSync(schemaPath)) {
			console.log(`⚠️  Schema file not found: ${schemaFile}`)
			continue
		}
		
		console.log(`📝 Processing ${schemaFile}...`)
		
		try {
			// Import the schema file (this is a simple approach)
			// In a real implementation, you might want to parse the TS file
			// and extract the JSON schema objects
			const schemaContent = fs.readFileSync(schemaPath, 'utf-8')
			
			// Extract schema objects using regex (basic approach)
			const schemaMatches = schemaContent.match(/export const (\w+Schema): JSONSchema = ({[\s\S]*?^})/gm)
			
			if (schemaMatches) {
				for (const match of schemaMatches) {
					const nameMatch = match.match(/export const (\w+Schema)/)
					const schemaMatch = match.match(/= ({[\s\S]*})/)
					
					if (nameMatch && schemaMatch) {
						const schemaName = nameMatch[1]
						const jsonSchemaStr = schemaMatch[1]
						
						try {
							// Parse the JSON schema
							const jsonSchema = eval(`(${jsonSchemaStr})`)
							
							// Convert to Zod
							const zodSchemaCode = jsonSchemaToZod(jsonSchema)
							
							// Clean up the schema name for Zod
							const zodSchemaName = schemaName.replace('Schema', 'ZodSchema')
							
							zodSchemas.push(`export const ${zodSchemaName} = ${zodSchemaCode}`)
							
							console.log(`  ✅ Converted ${schemaName} → ${zodSchemaName}`)
							
						} catch (error) {
							console.error(`  ❌ Failed to convert ${schemaName}:`, error)
						}
					}
				}
			}
		} catch (error) {
			console.error(`❌ Error processing ${schemaFile}:`, error)
		}
	}
	
	// Generate the output file
	const outputContent = `/**
 * Generated Zod Schemas from Backend JSON Schemas
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * Generated by: scripts/convert-schemas.ts
 * Generated at: ${new Date().toISOString()}
 */

${imports.join('\n')}

${zodSchemas.join('\n\n')}

// Type exports
${zodSchemas.map(schema => {
	const match = schema.match(/export const (\w+) =/)
	if (match) {
		const schemaName = match[1]
		const typeName = schemaName.replace('ZodSchema', 'Type')
		return `export type ${typeName} = z.infer<typeof ${schemaName}>`
	}
	return ''
}).filter(Boolean).join('\n')}
`

	// Write the output file
	fs.writeFileSync(OUTPUT_FILE, outputContent, 'utf-8')
	
	console.log(`✅ Generated Zod schemas: ${OUTPUT_FILE}`)
	console.log(`📊 Converted ${zodSchemas.length} schemas`)
}

// Run the conversion
if (require.main === module) {
	convertSchemas().catch(console.error)
}

export { convertSchemas }