{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    },
    {
      "source": "/home",
      "destination": "/",
      "statusCode": 308,
      "regex": "^(?!/_next)/home(?:/)?$"
    },
    {
      "source": "/signin",
      "destination": "/auth/login",
      "statusCode": 308,
      "regex": "^(?!/_next)/signin(?:/)?$"
    },
    {
      "source": "/login",
      "destination": "/auth/login",
      "statusCode": 308,
      "regex": "^(?!/_next)/login(?:/)?$"
    },
    {
      "source": "/signup",
      "destination": "/auth/signup",
      "statusCode": 307,
      "regex": "^(?!/_next)/signup(?:/)?$"
    },
    {
      "source": "/register",
      "destination": "/auth/signup",
      "statusCode": 307,
      "regex": "^(?!/_next)/register(?:/)?$"
    }
  ],
  "headers": [
    {
      "source": "/static/:path*",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        },
        {
          "key": "CDN-Cache-Control",
          "value": "public, max-age=31536000, immutable"
        },
        {
          "key": "Vercel-CDN-Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^/static(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/_next/static/:path*",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=31536000, immutable"
        },
        {
          "key": "CDN-Cache-Control",
          "value": "public, max-age=31536000, immutable"
        },
        {
          "key": "Vercel-CDN-Cache-Control",
          "value": "public, max-age=31536000, immutable"
        }
      ],
      "regex": "^/_next/static(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/api/health",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=60, s-maxage=120"
        }
      ],
      "regex": "^/api/health(?:/)?$"
    },
    {
      "source": "/api/analytics/:path*",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "no-cache, no-store, must-revalidate"
        }
      ],
      "regex": "^/api/analytics(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/(dashboard|properties|tenants|maintenance)/:path*",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, s-maxage=300, stale-while-revalidate=600"
        },
        {
          "key": "CDN-Cache-Control",
          "value": "public, s-maxage=600, stale-while-revalidate=1200"
        }
      ],
      "regex": "^(?:/(dashboard|properties|tenants|maintenance))(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
    },
    {
      "source": "/(|pricing|privacy-policy|terms-of-service)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=3600, s-maxage=7200"
        },
        {
          "key": "CDN-Cache-Control",
          "value": "public, max-age=7200, s-maxage=14400"
        }
      ],
      "regex": "^(?:/(|pricing|privacy-policy|terms-of-service))(?:/)?$"
    },
    {
      "source": "/(icon-|favicon|manifest)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=86400, immutable"
        }
      ],
      "regex": "^(?:/(icon-|favicon|manifest))(?:/)?$"
    }
  ],
  "rewrites": {
    "beforeFiles": [
      {
        "source": "/properties/:id/edit",
        "destination": "/(.)properties/:id/edit",
        "has": [
          {
            "type": "header",
            "key": "Next-Url",
            "value": "(?:\\/(.*))?[\\/#\\?]?"
          }
        ],
        "regex": "^/properties(?:/([^/]+?))/edit(?:/)?$"
      }
    ],
    "afterFiles": [
      {
        "source": "/ingest/static/:path*",
        "destination": "https://us-assets.i.posthog.com/static/:path*",
        "regex": "^/ingest/static(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
      },
      {
        "source": "/ingest/:path*",
        "destination": "https://us.i.posthog.com/:path*",
        "regex": "^/ingest(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$"
      },
      {
        "source": "/ingest/decide",
        "destination": "https://us.i.posthog.com/decide",
        "regex": "^/ingest/decide(?:/)?$"
      }
    ],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/(.)properties/[id]/edit",
      "regex": "^/\\(\\.\\)properties/([^/]+?)/edit(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/\\(\\.\\)properties/(?<nxtPid>[^/]+?)/edit(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/auth/callback",
      "regex": "^/auth/callback(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/callback(?:/)?$"
    },
    {
      "page": "/auth/forgot-password",
      "regex": "^/auth/forgot\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/forgot\\-password(?:/)?$"
    },
    {
      "page": "/auth/login",
      "regex": "^/auth/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/login(?:/)?$"
    },
    {
      "page": "/auth/signup",
      "regex": "^/auth/signup(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/signup(?:/)?$"
    },
    {
      "page": "/auth/update-password",
      "regex": "^/auth/update\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/update\\-password(?:/)?$"
    },
    {
      "page": "/billing/cancel",
      "regex": "^/billing/cancel(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/billing/cancel(?:/)?$"
    },
    {
      "page": "/billing/success",
      "regex": "^/billing/success(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/billing/success(?:/)?$"
    },
    {
      "page": "/blog",
      "regex": "^/blog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/demo",
      "regex": "^/demo(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/demo(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/features",
      "regex": "^/features(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/features(?:/)?$"
    },
    {
      "page": "/opengraph-image",
      "regex": "^/opengraph\\-image(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/opengraph\\-image(?:/)?$"
    },
    {
      "page": "/pricing/opengraph-image",
      "regex": "^/pricing/opengraph\\-image(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/pricing/opengraph\\-image(?:/)?$"
    },
    {
      "page": "/privacy",
      "regex": "^/privacy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy(?:/)?$"
    },
    {
      "page": "/privacy-policy",
      "regex": "^/privacy\\-policy(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/privacy\\-policy(?:/)?$"
    },
    {
      "page": "/robots.txt",
      "regex": "^/robots\\.txt(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/robots\\.txt(?:/)?$"
    },
    {
      "page": "/sitemap.xml",
      "regex": "^/sitemap\\.xml(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sitemap\\.xml(?:/)?$"
    },
    {
      "page": "/terms",
      "regex": "^/terms(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms(?:/)?$"
    },
    {
      "page": "/terms-of-service",
      "regex": "^/terms\\-of\\-service(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/terms\\-of\\-service(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}