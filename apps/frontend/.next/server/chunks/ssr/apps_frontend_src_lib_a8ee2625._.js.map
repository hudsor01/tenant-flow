{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/lib/constants/priority-levels.ts"],"sourcesContent":["/**\n * Shared priority/severity level constants\n * Used across notifications, security logging, and maintenance systems\n */\n\nexport const PRIORITY_LEVELS = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  CRITICAL: 'CRITICAL',\n  EMERGENCY: 'EMERGENCY'\n} as const\n\nexport type PriorityLevel = typeof PRIORITY_LEVELS[keyof typeof PRIORITY_LEVELS]\n\n// Type-safe mapping for different use cases\nexport const PRIORITY_LABELS: Record<PriorityLevel, string> = {\n  EMERGENCY: 'EMERGENCY',\n  CRITICAL: 'Critical',\n  HIGH: 'High Priority',\n  MEDIUM: 'Medium Priority',\n  LOW: 'Low Priority'\n}\n\nexport const PRIORITY_COLORS: Record<PriorityLevel, string> = {\n  EMERGENCY: 'bg-red-100 text-red-800',\n  CRITICAL: 'bg-red-100 text-red-800',\n  HIGH: 'bg-orange-100 text-orange-800',\n  MEDIUM: 'bg-yellow-100 text-yellow-800',\n  LOW: 'bg-green-100 text-green-800'\n}\n\n// Legacy aliases for backward compatibility\nexport const SecurityEventSeverity = PRIORITY_LEVELS\nexport const Priority = PRIORITY_LEVELS"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;AAEM,MAAM,kBAAkB;IAC7B,KAAK;IACL,QAAQ;IACR,MAAM;IACN,UAAU;IACV,WAAW;AACb;AAKO,MAAM,kBAAiD;IAC5D,WAAW;IACX,UAAU;IACV,MAAM;IACN,QAAQ;IACR,KAAK;AACP;AAEO,MAAM,kBAAiD;IAC5D,WAAW;IACX,UAAU;IACV,MAAM;IACN,QAAQ;IACR,KAAK;AACP;AAGO,MAAM,wBAAwB;AAC9B,MAAM,WAAW","debugId":null}},
    {"offset": {"line": 42, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/lib/security/security-logger.ts"],"sourcesContent":["/**\n * Enterprise Security Event Logging and Monitoring System\n * Comprehensive security event tracking with threat detection\n * GDPR compliant with data retention and anonymization\n */\n\nexport enum SecurityEventType {\n  // Authentication Events\n  LOGIN_SUCCESS = 'LOGIN_SUCCESS',\n  LOGIN_FAILURE = 'LOGIN_FAILURE',\n  LOGOUT = 'LOGOUT',\n  SESSION_CREATED = 'SESSION_CREATED',\n  SESSION_DESTROYED = 'SESSION_DESTROYED',\n  SESSION_EXPIRED = 'SESSION_EXPIRED',\n  SESSION_REFRESHED = 'SESSION_REFRESHED',\n  SESSION_TERMINATED = 'SESSION_TERMINATED',\n  SESSION_HIJACK_ATTEMPT = 'SESSION_HIJACK_ATTEMPT',\n  \n  // Authorization Events\n  UNAUTHORIZED_ACCESS_ATTEMPT = 'UNAUTHORIZED_ACCESS_ATTEMPT',\n  RBAC_ACCESS_DENIED = 'RBAC_ACCESS_DENIED',\n  PRIVILEGE_ESCALATION_ATTEMPT = 'PRIVILEGE_ESCALATION_ATTEMPT',\n  AUTHENTICATED_ACCESS = 'AUTHENTICATED_ACCESS',\n  \n  // Token and Security Events\n  INVALID_JWT_TOKEN = 'INVALID_JWT_TOKEN',\n  TOKEN_NEAR_EXPIRATION = 'TOKEN_NEAR_EXPIRATION',\n  CSRF_TOKEN_MISMATCH = 'CSRF_TOKEN_MISMATCH',\n  CSRF_TOKEN_MISSING = 'CSRF_TOKEN_MISSING',\n  \n  // Attack Detection\n  SUSPICIOUS_REQUEST_PATTERN = 'SUSPICIOUS_REQUEST_PATTERN',\n  XSS_ATTEMPT = 'XSS_ATTEMPT',\n  SQL_INJECTION_ATTEMPT = 'SQL_INJECTION_ATTEMPT',\n  PATH_TRAVERSAL_ATTEMPT = 'PATH_TRAVERSAL_ATTEMPT',\n  COMMAND_INJECTION_ATTEMPT = 'COMMAND_INJECTION_ATTEMPT',\n  BRUTE_FORCE_ATTEMPT = 'BRUTE_FORCE_ATTEMPT',\n  \n  // Rate Limiting\n  RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n  SUSPICIOUS_RATE_PATTERN = 'SUSPICIOUS_RATE_PATTERN',\n  \n  // File and Upload Security\n  MALICIOUS_FILE_UPLOAD = 'MALICIOUS_FILE_UPLOAD',\n  FILE_TYPE_VIOLATION = 'FILE_TYPE_VIOLATION',\n  FILE_SIZE_VIOLATION = 'FILE_SIZE_VIOLATION',\n  \n  // System Events\n  MIDDLEWARE_ERROR = 'MIDDLEWARE_ERROR',\n  SECURITY_CONFIG_CHANGE = 'SECURITY_CONFIG_CHANGE',\n  BOT_ACCESS = 'BOT_ACCESS',\n  SUSPICIOUS_ACTIVITY = 'SUSPICIOUS_ACTIVITY',\n  \n  // Data Protection\n  PII_ACCESS = 'PII_ACCESS',\n  DATA_EXPORT = 'DATA_EXPORT',\n  GDPR_REQUEST = 'GDPR_REQUEST',\n}\n\nimport { PRIORITY_LEVELS, type PriorityLevel } from '@/lib/constants/priority-levels'\n\nexport const SecurityEventSeverity = PRIORITY_LEVELS\nexport type SecurityEventSeverity = PriorityLevel\n\ninterface SecurityEvent {\n  type: SecurityEventType;\n  severity?: SecurityEventSeverity;\n  timestamp: string;\n  ip?: string;\n  userAgent?: string;\n  userId?: string;\n  organizationId?: string;\n  sessionId?: string;\n  path?: string;\n  method?: string;\n  userRole?: string;\n  reason?: string;\n  additionalData?: Record<string, unknown>;\n  referer?: string;\n  suspiciousContent?: string;\n  expectedFingerprint?: string;\n  actualFingerprint?: string;\n  error?: string;\n}\n\nexport class SecurityLogger {\n  private static instance: SecurityLogger;\n  private events: SecurityEvent[] = [];\n  private maxEvents = 10000;\n  \n  static getInstance(): SecurityLogger {\n    if (!SecurityLogger.instance) {\n      SecurityLogger.instance = new SecurityLogger();\n    }\n    return SecurityLogger.instance;\n  }\n\n  async logSecurityEvent(event: Omit<SecurityEvent, 'severity'>): Promise<void> {\n    const enhancedEvent: SecurityEvent = {\n      ...event,\n      severity: this.calculateSeverity({ ...event, severity: undefined } as SecurityEvent),\n      timestamp: event.timestamp || new Date().toISOString(),\n    };\n    \n    this.events.push(enhancedEvent);\n    \n    if (this.events.length > this.maxEvents) {\n      this.events = this.events.slice(-this.maxEvents / 2);\n    }\n    \n    const logLevel = this.getLogLevel(enhancedEvent.severity!);\n    const logData = {\n      timestamp: enhancedEvent.timestamp,\n      type: enhancedEvent.type,\n      severity: enhancedEvent.severity,\n      ip: enhancedEvent.ip,\n      userId: enhancedEvent.userId,\n      path: enhancedEvent.path,\n      reason: enhancedEvent.reason,\n    };\n    \n    console[logLevel]('[SECURITY]', JSON.stringify(logData, null, 2));\n  }\n  \n  private calculateSeverity(event: SecurityEvent): SecurityEventSeverity {\n    const criticalEvents = [\n      SecurityEventType.SESSION_HIJACK_ATTEMPT,\n      SecurityEventType.SQL_INJECTION_ATTEMPT,\n      SecurityEventType.COMMAND_INJECTION_ATTEMPT,\n    ];\n    \n    const highEvents = [\n      SecurityEventType.BRUTE_FORCE_ATTEMPT,\n      SecurityEventType.XSS_ATTEMPT,\n      SecurityEventType.PATH_TRAVERSAL_ATTEMPT,\n    ];\n    \n    if (criticalEvents.includes(event.type)) {\n      return SecurityEventSeverity.CRITICAL;\n    }\n    if (highEvents.includes(event.type)) {\n      return SecurityEventSeverity.HIGH;\n    }\n    \n    return SecurityEventSeverity.MEDIUM;\n  }\n  \n  private getLogLevel(severity: SecurityEventSeverity): 'log' | 'warn' | 'error' {\n    switch (severity) {\n      case SecurityEventSeverity.CRITICAL:\n      case SecurityEventSeverity.HIGH:\n        return 'error';\n      case SecurityEventSeverity.MEDIUM:\n        return 'warn';\n      default:\n        return 'log';\n    }\n  }\n  \n  getRecentEvents(limit = 50): SecurityEvent[] {\n    return this.events\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, limit);\n  }\n}\n\n// Export singleton instance\nexport const securityLogger = SecurityLogger.getInstance();"],"names":[],"mappings":"AAAA;;;;CAIC;;;;;;AAuDD;AArDO,IAAA,AAAK,2CAAA;IACV,wBAAwB;;;;;;;;;;IAWxB,uBAAuB;;;;;IAMvB,4BAA4B;;;;;IAM5B,mBAAmB;;;;;;;IAQnB,gBAAgB;;;IAIhB,2BAA2B;;;;IAK3B,gBAAgB;;;;;IAMhB,kBAAkB;;;;WA/CR;;;AAuDL,MAAM,wBAAwB,iKAAA,CAAA,kBAAe;AAwB7C,MAAM;IACX,OAAe,SAAyB;IAChC,SAA0B,EAAE,CAAC;IAC7B,YAAY,MAAM;IAE1B,OAAO,cAA8B;QACnC,IAAI,CAAC,eAAe,QAAQ,EAAE;YAC5B,eAAe,QAAQ,GAAG,IAAI;QAChC;QACA,OAAO,eAAe,QAAQ;IAChC;IAEA,MAAM,iBAAiB,KAAsC,EAAiB;QAC5E,MAAM,gBAA+B;YACnC,GAAG,KAAK;YACR,UAAU,IAAI,CAAC,iBAAiB,CAAC;gBAAE,GAAG,KAAK;gBAAE,UAAU;YAAU;YACjE,WAAW,MAAM,SAAS,IAAI,IAAI,OAAO,WAAW;QACtD;QAEA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAEjB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;YACvC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,GAAG;QACpD;QAEA,MAAM,WAAW,IAAI,CAAC,WAAW,CAAC,cAAc,QAAQ;QACxD,MAAM,UAAU;YACd,WAAW,cAAc,SAAS;YAClC,MAAM,cAAc,IAAI;YACxB,UAAU,cAAc,QAAQ;YAChC,IAAI,cAAc,EAAE;YACpB,QAAQ,cAAc,MAAM;YAC5B,MAAM,cAAc,IAAI;YACxB,QAAQ,cAAc,MAAM;QAC9B;QAEA,OAAO,CAAC,SAAS,CAAC,cAAc,KAAK,SAAS,CAAC,SAAS,MAAM;IAChE;IAEQ,kBAAkB,KAAoB,EAAyB;QACrE,MAAM,iBAAiB;;;;SAItB;QAED,MAAM,aAAa;;;;SAIlB;QAED,IAAI,eAAe,QAAQ,CAAC,MAAM,IAAI,GAAG;YACvC,OAAO,sBAAsB,QAAQ;QACvC;QACA,IAAI,WAAW,QAAQ,CAAC,MAAM,IAAI,GAAG;YACnC,OAAO,sBAAsB,IAAI;QACnC;QAEA,OAAO,sBAAsB,MAAM;IACrC;IAEQ,YAAY,QAA+B,EAA4B;QAC7E,OAAQ;YACN,KAAK,sBAAsB,QAAQ;YACnC,KAAK,sBAAsB,IAAI;gBAC7B,OAAO;YACT,KAAK,sBAAsB,MAAM;gBAC/B,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,gBAAgB,QAAQ,EAAE,EAAmB;QAC3C,OAAO,IAAI,CAAC,MAAM,CACf,IAAI,CAAC,CAAC,GAAG,IAAM,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,IAAI,KAAK,EAAE,SAAS,EAAE,OAAO,IAC9E,KAAK,CAAC,GAAG;IACd;AACF;AAGO,MAAM,iBAAiB,eAAe,WAAW","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/lib/security/file-upload-security.ts"],"sourcesContent":["/**\n * Enterprise File Upload Security System\n * Comprehensive protection against malicious file uploads\n * Multi-layer validation with virus scanning and content analysis\n */\n\nimport { securityLogger, SecurityEventType } from './security-logger';\n\ninterface FileValidationConfig {\n  maxFileSize: number; // bytes\n  allowedMimeTypes: string[];\n  allowedExtensions: string[];\n  allowedMagicNumbers: Record<string, number[][]>; // File signature validation\n  scanForMalware: boolean;\n  validateContent: boolean;\n  quarantineOnSuspicion: boolean;\n}\n\ninterface FileValidationResult {\n  valid: boolean;\n  errors: string[];\n  warnings: string[];\n  fileInfo: {\n    name: string;\n    size: number;\n    type: string;\n    extension: string;\n    magicNumber?: string;\n    hash?: string;\n  };\n  securityFlags: {\n    containsScript: boolean;\n    containsMacros: boolean;\n    potentialMalware: boolean;\n    suspiciousName: boolean;\n    oversized: boolean;\n  };\n}\n\n// File type configurations for different contexts\nconst FILE_CONFIGS: Record<string, FileValidationConfig> = {\n  // Property documents (contracts, leases, etc.)\n  documents: {\n    maxFileSize: 50 * 1024 * 1024, // 50MB\n    allowedMimeTypes: [\n      'application/pdf',\n      'application/msword',\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n      'text/plain',\n      'text/csv',\n    ],\n    allowedExtensions: ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.txt', '.csv'],\n    allowedMagicNumbers: {\n      'pdf': [[0x25, 0x50, 0x44, 0x46]], // %PDF\n      'docx': [[0x50, 0x4B, 0x03, 0x04]], // ZIP format\n      'doc': [[0xD0, 0xCF, 0x11, 0xE0]], // MS Office\n      'txt': [[]], // Text files can have various or no magic numbers\n    },\n    scanForMalware: true,\n    validateContent: true,\n    quarantineOnSuspicion: true,\n  },\n  \n  // Property images\n  images: {\n    maxFileSize: 20 * 1024 * 1024, // 20MB\n    allowedMimeTypes: [\n      'image/jpeg',\n      'image/png',\n      'image/webp',\n      'image/gif',\n      'image/svg+xml',\n    ],\n    allowedExtensions: ['.jpg', '.jpeg', '.png', '.webp', '.gif', '.svg'],\n    allowedMagicNumbers: {\n      'jpeg': [[0xFF, 0xD8, 0xFF]],\n      'png': [[0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]],\n      'webp': [[0x52, 0x49, 0x46, 0x46]], // RIFF\n      'gif': [[0x47, 0x49, 0x46, 0x38]], // GIF8\n      'svg': [], // XML-based, validated differently\n    },\n    scanForMalware: true,\n    validateContent: true,\n    quarantineOnSuspicion: true,\n  },\n  \n  // User profile pictures (stricter)\n  avatar: {\n    maxFileSize: 5 * 1024 * 1024, // 5MB\n    allowedMimeTypes: ['image/jpeg', 'image/png', 'image/webp'],\n    allowedExtensions: ['.jpg', '.jpeg', '.png', '.webp'],\n    allowedMagicNumbers: {\n      'jpeg': [[0xFF, 0xD8, 0xFF]],\n      'png': [[0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]],\n      'webp': [[0x52, 0x49, 0x46, 0x46]],\n    },\n    scanForMalware: true,\n    validateContent: true,\n    quarantineOnSuspicion: true,\n  },\n  \n  // Maintenance request attachments\n  maintenance: {\n    maxFileSize: 25 * 1024 * 1024, // 25MB\n    allowedMimeTypes: [\n      'image/jpeg',\n      'image/png',\n      'image/webp',\n      'application/pdf',\n      'video/mp4',\n      'video/quicktime',\n      'video/x-msvideo',\n    ],\n    allowedExtensions: ['.jpg', '.jpeg', '.png', '.webp', '.pdf', '.mp4', '.mov', '.avi'],\n    allowedMagicNumbers: {\n      'jpeg': [[0xFF, 0xD8, 0xFF]],\n      'png': [[0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]],\n      'webp': [[0x52, 0x49, 0x46, 0x46]],\n      'pdf': [[0x25, 0x50, 0x44, 0x46]],\n      'mp4': [[0x00, 0x00, 0x00, 0x18, 0x66, 0x74, 0x79, 0x70]],\n    },\n    scanForMalware: true,\n    validateContent: true,\n    quarantineOnSuspicion: true,\n  },\n};\n\n// Dangerous file patterns to always block\nconst DANGEROUS_PATTERNS = [\n  // Executable files\n  /\\.(exe|bat|cmd|scr|pif|com|jar|msi|deb|rpm|dmg|app)$/i,\n  \n  // Scripts\n  /\\.(js|vbs|vbe|jse|ws|wsf|wsc|wsh|ps1|php|py|rb|pl|sh)$/i,\n  \n  // Archives that might contain malware\n  /\\.(rar|7z|tar\\.gz|tar\\.bz2)$/i,\n  \n  // Double extensions (common malware trick)\n  /\\.\\w+\\.(exe|bat|cmd|scr|pif|com)$/i,\n  \n  // Hidden extensions\n  /\\.\\w+\\s+\\.(exe|bat|cmd|scr|pif|com)$/i,\n];\n\n// Suspicious filename patterns\nconst SUSPICIOUS_NAME_PATTERNS = [\n  /^(con|prn|aux|nul|com[1-9]|lpt[1-9])(\\.|$)/i, // Windows reserved names\n  /[<>:\"|?*\\\\\\/]/g, // Invalid filename characters\n  /^\\./, // Hidden files\n  /\\s{2,}/, // Multiple spaces\n  /[\\x00-\\x1f\\x7f-\\x9f]/, // Control characters\n];\n\n// Using the singleton securityLogger imported above\n\n/**\n * Main file validation function\n */\nexport async function validateFile(\n  file: File,\n  context: keyof typeof FILE_CONFIGS = 'documents',\n  userId?: string\n): Promise<FileValidationResult> {\n  const config = FILE_CONFIGS[context];\n  const result: FileValidationResult = {\n    valid: true,\n    errors: [],\n    warnings: [],\n    fileInfo: {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      extension: getFileExtension(file.name),\n    },\n    securityFlags: {\n      containsScript: false,\n      containsMacros: false,\n      potentialMalware: false,\n      suspiciousName: false,\n      oversized: false,\n    },\n  };\n\n  try {\n    // 1. Basic file info validation\n    await validateBasicInfo(file, config, result);\n    \n    // 2. File signature (magic number) validation\n    await validateFileSignature(file, config, result);\n    \n    // 3. Content analysis\n    if (config.validateContent) {\n      await validateFileContent(file, config, result);\n    }\n    \n    // 4. Malware scanning (simplified - in production use proper antivirus)\n    if (config.scanForMalware) {\n      await scanForMalware(file, config, result);\n    }\n    \n    // 5. Security flags analysis\n    analyzeSecurityFlags(result);\n    \n    // 6. Generate file hash for integrity verification\n    result.fileInfo.hash = await generateFileHash(file);\n    \n    // Log security events\n    await logFileUploadEvent(file, result, context.toString(), userId);\n    \n  } catch (error) {\n    result.valid = false;\n    result.errors.push(`File validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    \n    await securityLogger.logSecurityEvent({\n      type: SecurityEventType.FILE_TYPE_VIOLATION,\n      timestamp: new Date().toISOString(),\n      userId,\n      reason: `File validation failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      additionalData: {\n        fileName: file.name,\n        fileSize: file.size,\n        fileType: file.type,\n        context,\n      },\n    });\n  }\n\n  return result;\n}\n\n/**\n * Validate basic file information\n */\nasync function validateBasicInfo(\n  file: File,\n  config: FileValidationConfig,\n  result: FileValidationResult\n): Promise<void> {\n  // File size validation\n  if (file.size > config.maxFileSize) {\n    result.valid = false;\n    result.errors.push(`File size exceeds maximum allowed size of ${formatFileSize(config.maxFileSize)}`);\n    result.securityFlags.oversized = true;\n  }\n  \n  if (file.size === 0) {\n    result.valid = false;\n    result.errors.push('File is empty');\n  }\n  \n  // MIME type validation\n  if (!config.allowedMimeTypes.includes(file.type)) {\n    result.valid = false;\n    result.errors.push(`File type \"${file.type}\" is not allowed`);\n  }\n  \n  // Extension validation\n  const extension = getFileExtension(file.name);\n  if (!config.allowedExtensions.includes(extension.toLowerCase())) {\n    result.valid = false;\n    result.errors.push(`File extension \"${extension}\" is not allowed`);\n  }\n  \n  // Dangerous file pattern check\n  if (DANGEROUS_PATTERNS.some(pattern => pattern.test(file.name))) {\n    result.valid = false;\n    result.errors.push('File type is potentially dangerous and not allowed');\n    result.securityFlags.potentialMalware = true;\n  }\n  \n  // Suspicious filename check\n  if (SUSPICIOUS_NAME_PATTERNS.some(pattern => pattern.test(file.name))) {\n    result.warnings.push('Filename contains suspicious patterns');\n    result.securityFlags.suspiciousName = true;\n  }\n  \n  // Check for null bytes (path traversal attempts)\n  if (file.name.includes('\\0')) {\n    result.valid = false;\n    result.errors.push('Filename contains null bytes');\n    result.securityFlags.suspiciousName = true;\n  }\n}\n\n/**\n * Validate file signature (magic numbers)\n */\nasync function validateFileSignature(\n  file: File,\n  config: FileValidationConfig,\n  result: FileValidationResult\n): Promise<void> {\n  try {\n    const buffer = await file.slice(0, 16).arrayBuffer(); // Read first 16 bytes\n    const bytes = new Uint8Array(buffer);\n    const magicNumber = Array.from(bytes.slice(0, 8)).map(b => b.toString(16).padStart(2, '0')).join(' ');\n    \n    result.fileInfo.magicNumber = magicNumber;\n    \n    // Get expected magic numbers for file type\n    const extension = getFileExtension(file.name).toLowerCase().replace('.', '');\n    const expectedMagicNumbers = config.allowedMagicNumbers[extension];\n    \n    if (expectedMagicNumbers && expectedMagicNumbers.length > 0) {\n      const isValidMagic = expectedMagicNumbers.some(expectedBytes => {\n        return expectedBytes.every((expectedByte, index) => {\n          return index < bytes.length && bytes[index] === expectedByte;\n        });\n      });\n      \n      if (!isValidMagic && expectedMagicNumbers[0].length > 0) { // Some files like txt may not have magic numbers\n        result.valid = false;\n        result.errors.push(`File signature doesn't match expected type. Expected: ${extension}`);\n        result.securityFlags.potentialMalware = true;\n      }\n    }\n  } catch {\n    result.warnings.push('Could not validate file signature');\n  }\n}\n\n/**\n * Validate file content for malicious patterns\n */\nasync function validateFileContent(\n  file: File,\n  config: FileValidationConfig,\n  result: FileValidationResult\n): Promise<void> {\n  try {\n    // For text-based files, scan content\n    if (file.type.startsWith('text/') || file.name.endsWith('.svg')) {\n      const text = await file.text();\n      \n      // Check for script injection\n      const scriptPatterns = [\n        /<script[\\s\\S]*?>/gi,\n        /javascript:/gi,\n        /vbscript:/gi,\n        /on\\w+\\s*=/gi,\n        /<iframe[\\s\\S]*?>/gi,\n        /<object[\\s\\S]*?>/gi,\n        /<embed[\\s\\S]*?>/gi,\n      ];\n      \n      if (scriptPatterns.some(pattern => pattern.test(text))) {\n        result.valid = false;\n        result.errors.push('File contains potentially malicious script content');\n        result.securityFlags.containsScript = true;\n      }\n      \n      // Check for SQL injection attempts\n      const sqlPatterns = [\n        /(\\bunion\\b|\\bselect\\b|\\binsert\\b|\\bupdate\\b|\\bdelete\\b|\\bdrop\\b)/gi,\n        /(\\bor\\b\\s+\\d+\\s*=\\s*\\d+)/gi,\n      ];\n      \n      if (sqlPatterns.some(pattern => pattern.test(text))) {\n        result.warnings.push('File contains SQL-like patterns');\n      }\n    }\n    \n    // For Office documents, check for macros (simplified)\n    if (file.type.includes('officedocument') || file.type.includes('ms-')) {\n      // In a real implementation, you would use a library to parse Office documents\n      // and check for VBA macros, embedded objects, etc.\n      result.securityFlags.containsMacros = await checkForMacros(file);\n      if (result.securityFlags.containsMacros) {\n        result.warnings.push('Document may contain macros or embedded content');\n      }\n    }\n    \n  } catch {\n    result.warnings.push('Could not fully validate file content');\n  }\n}\n\n/**\n * Simplified malware scanning (in production, integrate with proper antivirus)\n */\nasync function scanForMalware(\n  file: File,\n  config: FileValidationConfig,\n  result: FileValidationResult\n): Promise<void> {\n  // This is a simplified implementation\n  // In production, integrate with services like:\n  // - VirusTotal API\n  // - ClamAV\n  // - Windows Defender\n  // - Cloud-based scanning services\n  \n  try {\n    const buffer = await file.arrayBuffer();\n    const bytes = new Uint8Array(buffer);\n    \n    // Simple pattern matching for known malware signatures\n    const malwarePatterns = [\n      // EICAR test signature\n      [0x58, 0x35, 0x4F, 0x21, 0x50, 0x25, 0x40, 0x41, 0x50, 0x5B, 0x34, 0x5C, 0x50, 0x5A, 0x58, 0x35, 0x34],\n    ];\n    \n    for (const pattern of malwarePatterns) {\n      for (let i = 0; i <= bytes.length - pattern.length; i++) {\n        if (pattern.every((byte, j) => bytes[i + j] === byte)) {\n          result.valid = false;\n          result.errors.push('File contains known malware signature');\n          result.securityFlags.potentialMalware = true;\n          return;\n        }\n      }\n    }\n    \n    // Check for PE header (Windows executables)\n    if (bytes.length > 64) {\n      const peOffset = bytes[60] | (bytes[61] << 8) | (bytes[62] << 16) | (bytes[63] << 24);\n      if (peOffset < bytes.length - 4) {\n        const peSignature = bytes.slice(peOffset, peOffset + 4);\n        if (peSignature[0] === 0x50 && peSignature[1] === 0x45 && peSignature[2] === 0x00 && peSignature[3] === 0x00) {\n          result.valid = false;\n          result.errors.push('Windows executable files are not allowed');\n          result.securityFlags.potentialMalware = true;\n        }\n      }\n    }\n    \n  } catch {\n    result.warnings.push('Malware scan could not be completed');\n  }\n}\n\n/**\n * Check for macros in Office documents (simplified)\n */\nasync function checkForMacros(file: File): Promise<boolean> {\n  try {\n    // This is a very simplified check\n    // In production, use proper Office document parsing libraries\n    const text = await file.text();\n    return /vba|macro|activex/gi.test(text);\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Analyze security flags and update validation result\n */\nfunction analyzeSecurityFlags(result: FileValidationResult): void {\n  const { securityFlags } = result;\n  \n  // If multiple security flags are triggered, increase suspicion\n  const flagCount = Object.values(securityFlags).filter(Boolean).length;\n  \n  if (flagCount >= 3) {\n    result.valid = false;\n    result.errors.push('File triggers multiple security concerns');\n  } else if (flagCount >= 2) {\n    result.warnings.push('File has multiple security flags - proceed with caution');\n  }\n  \n  // Critical flags that should always fail validation\n  if (securityFlags.potentialMalware || securityFlags.containsScript) {\n    result.valid = false;\n  }\n}\n\n/**\n * Generate SHA-256 hash of file for integrity verification\n */\nasync function generateFileHash(file: File): Promise<string> {\n  try {\n    const buffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n  } catch {\n    return 'hash-generation-failed';\n  }\n}\n\n/**\n * Log file upload security events\n */\nasync function logFileUploadEvent(\n  file: File,\n  result: FileValidationResult,\n  context: string,\n  userId?: string\n): Promise<void> {\n  const eventType = result.valid ? SecurityEventType.PII_ACCESS : SecurityEventType.MALICIOUS_FILE_UPLOAD;\n  \n  await securityLogger.logSecurityEvent({\n    type: eventType,\n    timestamp: new Date().toISOString(),\n    userId,\n    reason: result.valid ? 'File upload successful' : result.errors.join(', '),\n    additionalData: {\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: file.type,\n      context,\n      hash: result.fileInfo.hash,\n      securityFlags: result.securityFlags,\n      validationErrors: result.errors,\n      validationWarnings: result.warnings,\n    },\n  });\n}\n\n/**\n * Helper functions\n */\nfunction getFileExtension(filename: string): string {\n  const lastDotIndex = filename.lastIndexOf('.');\n  return lastDotIndex === -1 ? '' : filename.slice(lastDotIndex);\n}\n\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Quarantine suspicious files (placeholder for production implementation)\n */\nexport async function quarantineFile(\n  file: File,\n  reason: string,\n  userId?: string\n): Promise<void> {\n  // In production, move file to quarantine storage\n  // Send alerts to security team\n  // Log detailed forensic information\n  \n  await securityLogger.logSecurityEvent({\n    type: SecurityEventType.MALICIOUS_FILE_UPLOAD,\n    timestamp: new Date().toISOString(),\n    userId,\n    reason: `File quarantined: ${reason}`,\n    additionalData: {\n      fileName: file.name,\n      fileSize: file.size,\n      fileType: file.type,\n      quarantineReason: reason,\n    },\n  });\n}\n\n/**\n * Batch file validation for multiple uploads\n */\nexport async function validateMultipleFiles(\n  files: File[],\n  context: keyof typeof FILE_CONFIGS = 'documents',\n  userId?: string\n): Promise<FileValidationResult[]> {\n  const results: FileValidationResult[] = [];\n  \n  for (const file of files) {\n    const result = await validateFile(file, context, userId);\n    results.push(result);\n    \n    // If any file fails validation with high security risk, reject the entire batch\n    if (!result.valid && (result.securityFlags.potentialMalware || result.securityFlags.containsScript)) {\n      // Quarantine all files in batch\n      for (const batchFile of files) {\n        await quarantineFile(batchFile, 'Batch contained malicious file', userId);\n      }\n      break;\n    }\n  }\n  \n  return results;\n}\n\n/**\n * Get file validation configuration for context\n */\nexport function getFileConfig(context: keyof typeof FILE_CONFIGS): FileValidationConfig {\n  return { ...FILE_CONFIGS[context] };\n}\n\n/**\n * Update file validation configuration (admin only)\n */\nexport function updateFileConfig(\n  context: keyof typeof FILE_CONFIGS,\n  updates: Partial<FileValidationConfig>\n): void {\n  FILE_CONFIGS[context] = { ...FILE_CONFIGS[context], ...updates };\n}"],"names":[],"mappings":"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","debugId":null}}]
}