{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACZ,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EACV,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;KAXS;AAaT,SAAS,WAAW,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IAClB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EACV,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,UAAU,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACjB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,gBAAgB,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACvB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IAClB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,YAAY,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IACnB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EAAE,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;MARS;AAUT,SAAS,WAAW,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IAClB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EAAE,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf;MARS","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,qOACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,KAIoD;QAJpD,EACb,SAAS,EACT,OAAO,EACP,GAAG,OAC8D,GAJpD;IAKb,qBACE,6LAAC;QACC,aAAU;QACV,MAAK;QACL,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;KAbS;AAeT,SAAS,WAAW,KAAoD;QAApD,EAAE,SAAS,EAAE,GAAG,OAAoC,GAApD;IAClB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EACV,+DACA;QAED,GAAG,KAAK;;;;;;AAGf;MAXS;AAaT,SAAS,iBAAiB,KAGI;QAHJ,EACxB,SAAS,EACT,GAAG,OACyB,GAHJ;IAIxB,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EACV,kGACA;QAED,GAAG,KAAK;;;;;;AAGf;MAdS","debugId":null}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/components/dashboard/dashboard-error-boundary.tsx"],"sourcesContent":["'use client'\n\nimport { Component, type ReactNode } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\nimport { AlertTriangle, RefreshCw, Home } from 'lucide-react'\nimport Link from 'next/link'\n\ninterface Props {\n  children: ReactNode\n  fallback?: ReactNode\n}\n\ninterface State {\n  hasError: boolean\n  error: Error | null\n}\n\nexport class DashboardErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = { hasError: false, error: null }\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error }\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Dashboard error:', error, errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Check if it's an API error\n      const isApiError = this.state.error?.message?.includes('404') || \n                        this.state.error?.message?.includes('Request failed')\n\n      if (isApiError) {\n        // Show a friendly message for API errors\n        return (\n          <div className=\"container mx-auto p-6 max-w-4xl\">\n            <Alert className=\"mb-6\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertTitle>Limited Functionality</AlertTitle>\n              <AlertDescription>\n                Some features are currently unavailable. You can still explore the application.\n              </AlertDescription>\n            </Alert>\n\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Quick Actions</CardTitle>\n                  <CardDescription>Get started with these features</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <Link href=\"/properties\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      View Properties\n                    </Button>\n                  </Link>\n                  <Link href=\"/tenants\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      Manage Tenants\n                    </Button>\n                  </Link>\n                  <Link href=\"/settings\">\n                    <Button variant=\"outline\" className=\"w-full justify-start\">\n                      Account Settings\n                    </Button>\n                  </Link>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Welcome to TenantFlow</CardTitle>\n                  <CardDescription>Your property management platform</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    We're currently setting up your dashboard. In the meantime, you can explore\n                    the available features using the navigation menu.\n                  </p>\n                  <Button \n                    onClick={() => window.location.reload()} \n                    variant=\"secondary\"\n                    className=\"w-full\"\n                  >\n                    <RefreshCw className=\"mr-2 h-4 w-4\" />\n                    Retry Loading Dashboard\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\">\n                  <Home className=\"mr-2 h-4 w-4\" />\n                  Back to Home\n                </Button>\n              </Link>\n            </div>\n          </div>\n        )\n      }\n\n      // For other errors, show the fallback or default error\n      return this.props.fallback || (\n        <div className=\"flex min-h-screen items-center justify-center\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle>Something went wrong</CardTitle>\n              <CardDescription>\n                An unexpected error occurred. Please try refreshing the page.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Button onClick={() => window.location.reload()} className=\"w-full\">\n                <RefreshCw className=\"mr-2 h-4 w-4\" />\n                Refresh Page\n              </Button>\n              <Link href=\"/\" className=\"block\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  Go to Home\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 580, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/hooks/query-factory.ts"],"sourcesContent":["/**\n * React Query Factory Utilities\n * \n * Consolidates common React Query patterns to eliminate duplication across hooks.\n * Based on official TanStack Query patterns from documentation.\n */\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'sonner'\n\n// ============================================================================\n// QUERY FACTORY TYPES\n// ============================================================================\n\nexport interface QueryFactoryOptions<TData = unknown, TError = Error> {\n  queryKey: readonly unknown[]\n  queryFn: () => Promise<TData>\n  enabled?: boolean\n  refetchInterval?: number | false\n  staleTime?: number\n  gcTime?: number\n  onSuccess?: (data: TData) => void\n  onError?: (error: TError) => void\n}\n\nexport interface MutationFactoryOptions<TData = unknown, TVariables = unknown, TError = Error> {\n  mutationFn: (variables: TVariables) => Promise<TData>\n  onSuccess?: (data: TData, variables: TVariables) => void\n  onError?: (error: TError, variables: TVariables) => void\n  invalidateKeys?: Array<readonly unknown[]>\n  successMessage?: string\n  errorMessage?: string\n  optimisticUpdate?: {\n    queryKey: readonly unknown[]\n    updater: (oldData: unknown, variables: TVariables) => unknown\n  }\n}\n\n// ============================================================================\n// QUERY FACTORY\n// ============================================================================\n\n/**\n * Standardized query hook factory with consistent patterns\n */\nexport function useQueryFactory<TData = unknown, TError = Error>(\n  options: QueryFactoryOptions<TData, TError>\n) {\n  const {\n    queryKey,\n    queryFn,\n    enabled = true,\n    refetchInterval,\n    staleTime = 5 * 60 * 1000, // 5 minutes default\n    gcTime = 10 * 60 * 1000, // 10 minutes default\n    onSuccess,\n    onError\n  } = options\n\n  return useQuery({\n    queryKey,\n    queryFn,\n    enabled,\n    refetchInterval,\n    staleTime,\n    gcTime,\n    meta: {\n      onSuccess,\n      onError\n    }\n  })\n}\n\n// ============================================================================\n// MUTATION FACTORY\n// ============================================================================\n\n/**\n * Standardized mutation hook factory with consistent patterns\n */\nexport function useMutationFactory<TData = unknown, TVariables = unknown, TError = Error>(\n  options: MutationFactoryOptions<TData, TVariables, TError>\n) {\n  const queryClient = useQueryClient()\n  \n  const {\n    mutationFn,\n    onSuccess,\n    onError,\n    invalidateKeys = [],\n    successMessage,\n    errorMessage,\n    optimisticUpdate\n  } = options\n\n  return useMutation({\n    mutationFn,\n    onMutate: async (variables: TVariables) => {\n      // Optimistic update pattern\n      if (optimisticUpdate) {\n        await queryClient.cancelQueries({ queryKey: optimisticUpdate.queryKey })\n        const previousData = queryClient.getQueryData(optimisticUpdate.queryKey)\n        queryClient.setQueryData(\n          optimisticUpdate.queryKey, \n          optimisticUpdate.updater(previousData, variables)\n        )\n        return { previousData }\n      }\n      return undefined\n    },\n    onSuccess: (data: TData, variables: TVariables) => {\n      // Invalidate related queries\n      invalidateKeys.forEach(key => {\n        queryClient.invalidateQueries({ queryKey: key })\n      })\n\n      // Show success toast\n      if (successMessage) {\n        toast.success(successMessage)\n      }\n\n      // Custom success callback\n      onSuccess?.(data, variables)\n    },\n    onError: (error: TError, variables: TVariables, context?: { previousData?: unknown }) => {\n      // Revert optimistic update on error\n      if (optimisticUpdate && context?.previousData !== undefined) {\n        queryClient.setQueryData(optimisticUpdate.queryKey, context.previousData)\n      }\n\n      // Show error toast\n      if (errorMessage) {\n        toast.error(errorMessage)\n      } else {\n        toast.error('An error occurred. Please try again.')\n      }\n\n      // Custom error callback\n      onError?.(error, variables)\n    }\n  })\n}\n\n// ============================================================================\n// CRUD FACTORY UTILITIES\n// ============================================================================\n\n/**\n * Creates standard CRUD mutation hooks for a resource\n */\nexport function useCrudMutations<TData = unknown, TCreateInput = unknown, TUpdateInput = unknown>(\n  resource: string,\n  api: {\n    create: (input: TCreateInput) => Promise<TData>\n    update: (id: string, input: TUpdateInput) => Promise<TData>\n    delete: (id: string) => Promise<void>\n  }\n) {\n  const listQueryKey = [resource, 'list'] as const\n  const invalidateKeys = [listQueryKey]\n\n  const createMutation = useMutationFactory({\n    mutationFn: api.create,\n    invalidateKeys,\n    successMessage: `${resource} created successfully`,\n    errorMessage: `Failed to create ${resource}`\n  })\n\n  const updateMutation = useMutationFactory({\n    mutationFn: ({ id, input }: { id: string; input: TUpdateInput }) => api.update(id, input),\n    invalidateKeys,\n    successMessage: `${resource} updated successfully`, \n    errorMessage: `Failed to update ${resource}`\n  })\n\n  const deleteMutation = useMutationFactory({\n    mutationFn: api.delete,\n    invalidateKeys,\n    successMessage: `${resource} deleted successfully`,\n    errorMessage: `Failed to delete ${resource}`\n  })\n\n  return {\n    createMutation,\n    updateMutation,\n    deleteMutation\n  }\n}\n\n// ============================================================================\n// COMMON QUERY PATTERNS\n// ============================================================================\n\n/**\n * Standard list query with search/filter support\n */\nexport function useListQuery<TData = unknown>(\n  resource: string,\n  fetcher: (params?: Record<string, unknown>) => Promise<TData>,\n  params?: Record<string, unknown>\n) {\n  return useQueryFactory({\n    queryKey: [resource, 'list', params],\n    queryFn: () => fetcher(params),\n    enabled: true,\n    staleTime: 5 * 60 * 1000\n  })\n}\n\n/**\n * Standard detail query for individual resources\n */\nexport function useDetailQuery<TData = unknown>(\n  resource: string,\n  id: string | undefined,\n  fetcher: (id: string) => Promise<TData>\n) {\n  return useQueryFactory({\n    queryKey: [resource, 'detail', id],\n    queryFn: () => fetcher(id!),\n    enabled: !!id,\n    staleTime: 2 * 60 * 1000\n  })\n}\n\n/**\n * Standard dashboard stats query with auto-refresh\n */\nexport function useStatsQuery<TData = unknown>(\n  resource: string,\n  fetcher: () => Promise<TData>,\n  refetchInterval = 5 * 60 * 1000 // 5 minutes\n) {\n  return useQueryFactory({\n    queryKey: [resource, 'stats'],\n    queryFn: fetcher,\n    enabled: true,\n    refetchInterval,\n    staleTime: 2 * 60 * 1000\n  })\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 799, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/hooks/api/use-dashboard.ts"],"sourcesContent":["/**\n * React Query hooks for Dashboard\n * Provides type-safe data fetching for dashboard statistics and analytics\n */\nimport { type UseQueryResult } from '@tanstack/react-query'\nimport { apiClient } from '@/lib/api-client'\nimport { queryKeys } from '@/lib/react-query/query-client'\nimport type { DashboardStats } from '@repo/shared'\nimport { useQueryFactory, useStatsQuery } from '../query-factory'\n\ninterface DashboardOverview {\n  recentActivity: {\n    id: string\n    type: 'tenant_added' | 'lease_created' | 'maintenance_request' | 'payment_received'\n    description: string\n    timestamp: Date\n    entityId?: string\n  }[]\n  upcomingLeaseExpirations: {\n    id: string\n    tenantName: string\n    propertyName: string\n    unitNumber: string\n    expirationDate: Date\n    daysRemaining: number\n  }[]\n  overduePayments: {\n    id: string\n    tenantName: string\n    amount: number\n    dueDate: Date\n    daysOverdue: number\n  }[]\n  propertyPerformance: {\n    propertyId: string\n    propertyName: string\n    occupancyRate: number\n    monthlyRevenue: number\n    maintenanceRequests: number\n    performance: 'excellent' | 'good' | 'fair' | 'poor'\n  }[]\n}\n\ninterface RevenueAnalytics {\n  monthlyRevenue: {\n    month: string\n    revenue: number\n    expenses: number\n    profit: number\n  }[]\n  revenueByProperty: {\n    propertyId: string\n    propertyName: string\n    revenue: number\n    percentage: number\n  }[]\n  paymentStatus: {\n    paid: number\n    pending: number\n    overdue: number\n  }\n  projectedRevenue: {\n    nextMonth: number\n    nextQuarter: number\n    nextYear: number\n  }\n}\n\n/**\n * Fetch dashboard statistics\n */\nexport function useDashboardStats(\n  options?: { enabled?: boolean; refetchInterval?: number }\n): UseQueryResult<DashboardStats, Error> {\n  return useStatsQuery(\n    'dashboard',\n    async () => {\n      try {\n        const response = await apiClient.get<DashboardStats>('/dashboard/stats')\n        return response.data\n      } catch {\n        // Return default data on error to allow UI to render\n        console.warn('Dashboard stats API unavailable, using defaults')\n        return {\n          properties: { totalProperties: 0, occupancyRate: 0 },\n          tenants: { totalTenants: 0 },\n          leases: { activeLeases: 0, expiredLeases: 0 },\n          maintenanceRequests: { open: 0 }\n        } as DashboardStats\n      }\n    },\n    options?.refetchInterval\n  )\n}\n\n/**\n * Fetch dashboard overview with recent activity and alerts\n */\nexport function useDashboardOverview(\n  options?: { enabled?: boolean }\n): UseQueryResult<DashboardOverview, Error> {\n  return useQueryFactory({\n    queryKey: queryKeys.dashboardOverview(),\n    queryFn: async () => {\n      try {\n        const response = await apiClient.get<DashboardOverview>('/dashboard/overview')\n        return response.data\n      } catch {\n        console.warn('Dashboard overview API unavailable')\n        // Return empty data structure\n        return {\n          recentActivity: [],\n          upcomingLeaseExpirations: [],\n          overduePayments: [],\n          propertyPerformance: []\n        } as DashboardOverview\n      }\n    },\n    enabled: options?.enabled,\n    staleTime: 2 * 60 * 1000\n  })\n}\n\n/**\n * Fetch recent activity for the dashboard\n */\nexport function useDashboardActivity(\n  limit = 10,\n  options?: { enabled?: boolean }\n): UseQueryResult<DashboardOverview['recentActivity'], Error> {\n  return useQueryFactory({\n    queryKey: queryKeys.dashboardActivity(),\n    queryFn: async () => {\n      try {\n        const response = await apiClient.get<DashboardOverview['recentActivity']>(\n          '/dashboard/activity',\n          { params: { limit } }\n        )\n        return response.data\n      } catch {\n        console.warn('Dashboard activity API unavailable')\n        return [] // Return empty array on error\n      }\n    },\n    enabled: options?.enabled,\n    staleTime: 60 * 1000\n  })\n}\n\n/**\n * Fetch revenue analytics\n */\nexport function useRevenueAnalytics(\n  options?: { \n    enabled?: boolean\n    period?: 'month' | 'quarter' | 'year'\n  }\n): UseQueryResult<RevenueAnalytics, Error> {\n  return useQueryFactory({\n    queryKey: ['revenue-analytics', options?.period ?? 'month'],\n    queryFn: async () => {\n      const response = await apiClient.get<RevenueAnalytics>(\n        '/dashboard/revenue',\n        { params: { period: options?.period ?? 'month' } }\n      )\n      return response.data\n    },\n    enabled: options?.enabled ?? true,\n    staleTime: 10 * 60 * 1000, // Consider data stale after 10 minutes\n  })\n}\n\n/**\n * Fetch occupancy trends\n */\nexport function useOccupancyTrends(\n  options?: { \n    enabled?: boolean\n    months?: number\n  }\n): UseQueryResult<{\n  month: string\n  occupancyRate: number\n  totalUnits: number\n  occupiedUnits: number\n}[], Error> {\n  return useQueryFactory({\n    queryKey: ['occupancy-trends', options?.months ?? 12],\n    queryFn: async () => {\n      const response = await apiClient.get(\n        '/dashboard/occupancy-trends',\n        { params: { months: options?.months ?? 12 } }\n      )\n      return response.data as {\n        month: string\n        occupancyRate: number\n        totalUnits: number\n        occupiedUnits: number\n      }[]\n    },\n    enabled: options?.enabled ?? true,\n    staleTime: 30 * 60 * 1000, // Consider data stale after 30 minutes\n  })\n}\n\n/**\n * Fetch maintenance metrics\n */\nexport function useMaintenanceMetrics(\n  options?: { enabled?: boolean }\n): UseQueryResult<{\n  averageResolutionTime: number\n  requestsByCategory: {\n    category: string\n    count: number\n    percentage: number\n  }[]\n  requestsByPriority: {\n    low: number\n    medium: number\n    high: number\n    urgent: number\n  }\n  monthlyTrends: {\n    month: string\n    created: number\n    resolved: number\n    pending: number\n  }[]\n  topIssues: {\n    issue: string\n    count: number\n    averageResolutionTime: number\n  }[]\n}, Error> {\n  return useQueryFactory({\n    queryKey: ['maintenance-metrics'],\n    queryFn: async () => {\n      const response = await apiClient.get('/dashboard/maintenance-metrics')\n      return response.data as {\n        averageResolutionTime: number\n        requestsByCategory: {\n          category: string\n          count: number\n          percentage: number\n        }[]\n        requestsByPriority: {\n          low: number\n          medium: number\n          high: number\n          urgent: number\n        }\n        monthlyTrends: {\n          month: string\n          created: number\n          resolved: number\n          pending: number\n        }[]\n        topIssues: {\n          issue: string\n          count: number\n          averageResolutionTime: number\n        }[]\n      }\n    },\n    enabled: options?.enabled ?? true,\n    staleTime: 15 * 60 * 1000, // Consider data stale after 15 minutes\n  })\n}\n\n/**\n * Fetch tenant satisfaction metrics\n */\nexport function useTenantMetrics(\n  options?: { enabled?: boolean }\n): UseQueryResult<{\n  totalTenants: number\n  newTenantsThisMonth: number\n  renewalRate: number\n  averageTenancy: number\n  satisfactionScore: number\n  tenantsByProperty: {\n    propertyId: string\n    propertyName: string\n    tenantCount: number\n  }[]\n}, Error> {\n  return useQueryFactory({\n    queryKey: ['tenant-metrics'],\n    queryFn: async () => {\n      const response = await apiClient.get('/dashboard/tenant-metrics')\n      return response.data as {\n        totalTenants: number\n        newTenantsThisMonth: number\n        renewalRate: number\n        averageTenancy: number\n        satisfactionScore: number\n        tenantsByProperty: {\n          propertyId: string\n          propertyName: string\n          tenantCount: number\n        }[]\n      }\n    },\n    enabled: options?.enabled ?? true,\n    staleTime: 20 * 60 * 1000, // Consider data stale after 20 minutes\n  })\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1022, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/auth.ts"],"sourcesContent":["/**\n * Authentication constants\n * Runtime constants and enums for user authentication and roles\n */\n\nexport const USER_ROLE = {\n  OWNER: 'OWNER',\n  MANAGER: 'MANAGER',\n  TENANT: 'TENANT',\n  ADMIN: 'ADMIN'\n} as const\n\nexport const USER_ROLE_OPTIONS = Object.values(USER_ROLE)"],"names":[],"mappings":"AAAA;;;CAGC;;;;AAEM,MAAM,YAAY;IACvB,OAAO;IACP,SAAS;IACT,QAAQ;IACR,OAAO;AACT;AAEO,MAAM,oBAAoB,OAAO,MAAM,CAAC","debugId":null}},
    {"offset": {"line": 1048, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/global.ts"],"sourcesContent":["/**\n * Global type declarations and augmentations\n * \n * This file contains global type declarations that extend the global namespace,\n * window object, and other global interfaces used throughout the application.\n */\n\ndeclare global {\n  /**\n   * PostHog analytics integration\n   */\n  interface Window {\n    posthog?: {\n      capture: (event: string, properties?: Record<string, unknown>) => void;\n      identify: (distinctId: string, properties?: Record<string, unknown>) => void;\n      alias: (alias: string) => void;\n      reset: () => void;\n      isFeatureEnabled: (flag: string) => boolean;\n      getFeatureFlag: (flag: string) => string | boolean;\n      reloadFeatureFlags: () => Promise<void>;\n      onFeatureFlags: (callback: () => void) => void;\n      group: (groupType: string, groupKey: string, properties?: Record<string, unknown>) => void;\n      register: (properties: Record<string, unknown>) => void;\n      unregister: (property: string) => void;\n    };\n  }\n\n  /**\n   * Environment variables\n   * Note: NODE_ENV is already declared by Next.js types\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace NodeJS {\n    interface ProcessEnv {\n      // PostHog configuration\n      NEXT_PUBLIC_POSTHOG_KEY: string;\n      NEXT_PUBLIC_POSTHOG_HOST: string;\n      \n      // API configuration\n      NEXT_PUBLIC_API_URL: string;\n      \n      // Supabase configuration\n      NEXT_PUBLIC_SUPABASE_URL: string;\n      NEXT_PUBLIC_SUPABASE_ANON_KEY: string;\n      \n      // Stripe configuration\n      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: string;\n      \n      // Vercel configuration\n      NEXT_PUBLIC_VERCEL_URL?: string;\n      VERCEL_URL?: string;\n    }\n  }\n\n}\n\nexport {};"],"names":[],"mappings":"AAAA;;;;;CAKC","debugId":null}},
    {"offset": {"line": 1064, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/reminders.ts"],"sourcesContent":["/**\n * Reminder types\n * Types for reminder and notification management\n */\n\nimport type { REMINDER_TYPE, REMINDER_STATUS } from '../constants/reminders'\n\n// Types derived from constants\nexport type ReminderType = typeof REMINDER_TYPE[keyof typeof REMINDER_TYPE]\nexport type ReminderStatus = typeof REMINDER_STATUS[keyof typeof REMINDER_STATUS]\n\n// ReminderLog interface - matches Prisma schema\nexport interface ReminderLog {\n  id: string\n  leaseId: string | null\n  userId: string\n  type: ReminderType\n  status: ReminderStatus\n  recipientEmail: string\n  recipientName: string | null\n  subject: string | null\n  content: string | null\n  sentAt: string | null\n  deliveredAt: string | null\n  openedAt: string | null\n  errorMessage: string | null\n  retryCount: number\n  createdAt: string\n  updatedAt: string\n}\n\n// Display helpers\nexport const getReminderTypeLabel = (type: ReminderType): string => {\n  const labels: Record<ReminderType, string> = {\n    RENT_REMINDER: 'Rent Reminder',\n    LEASE_EXPIRATION: 'Lease Expiration',\n    MAINTENANCE_DUE: 'Maintenance Due',\n    PAYMENT_OVERDUE: 'Payment Overdue'\n  }\n  return labels[type] || type\n}\n\nexport const getReminderStatusLabel = (status: ReminderStatus): string => {\n  const labels: Record<ReminderStatus, string> = {\n    PENDING: 'Pending',\n    SENT: 'Sent',\n    FAILED: 'Failed',\n    DELIVERED: 'Delivered',\n    OPENED: 'Opened'\n  }\n  return labels[status] || status\n}\n\nexport const getReminderStatusColor = (status: ReminderStatus): string => {\n  const colors: Record<ReminderStatus, string> = {\n    PENDING: 'bg-yellow-100 text-yellow-800',\n    SENT: 'bg-blue-100 text-blue-800',\n    FAILED: 'bg-red-100 text-red-800',\n    DELIVERED: 'bg-green-100 text-green-800',\n    OPENED: 'bg-purple-100 text-purple-800'\n  }\n  return colors[status] || 'bg-gray-100 text-gray-800'\n}"],"names":[],"mappings":"AAAA;;;CAGC;;;;;AA6BM,MAAM,uBAAuB,CAAC;IACnC,MAAM,SAAuC;QAC3C,eAAe;QACf,kBAAkB;QAClB,iBAAiB;QACjB,iBAAiB;IACnB;IACA,OAAO,MAAM,CAAC,KAAK,IAAI;AACzB;AAEO,MAAM,yBAAyB,CAAC;IACrC,MAAM,SAAyC;QAC7C,SAAS;QACT,MAAM;QACN,QAAQ;QACR,WAAW;QACX,QAAQ;IACV;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B;AAEO,MAAM,yBAAyB,CAAC;IACrC,MAAM,SAAyC;QAC7C,SAAS;QACT,MAAM;QACN,QAAQ;QACR,WAAW;QACX,QAAQ;IACV;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B","debugId":null}},
    {"offset": {"line": 1110, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/stripe-pricing.ts"],"sourcesContent":["/**\n * Stripe Pricing Component Types\n * Based on official Stripe documentation and best practices\n */\n\n// Import types from consolidated stripe.ts\nimport type { StripeError, BillingPeriod } from './stripe'\n\n// Import ProductTierConfig for modern pricing types\nimport type { ProductTierConfig } from '../types/billing'\n\nexport type BillingInterval = BillingPeriod\n\n// Checkout Session Request\nexport interface CreateCheckoutSessionRequest extends Record<string, unknown> {\n  priceId?: string\n  lookupKey?: string\n  billingInterval: BillingInterval\n  customerId?: string\n  customerEmail?: string\n  successUrl?: string\n  cancelUrl?: string\n  mode?: 'payment' | 'subscription' | 'setup'\n  allowPromotionCodes?: boolean\n  metadata?: Record<string, string>\n}\n\n// Checkout Session Response\nexport interface CreateCheckoutSessionResponse {\n  url: string\n  sessionId: string\n}\n\n// Customer Portal Request\nexport interface CreatePortalSessionRequest {\n  customerId: string\n  returnUrl?: string\n}\n\n// Customer Portal Response\nexport interface CreatePortalSessionResponse {\n  url: string\n}\n\n// Subscription Status\nexport type SubscriptionStatus = \n  | 'incomplete'\n  | 'incomplete_expired'\n  | 'trialing'\n  | 'active'\n  | 'past_due'\n  | 'canceled'\n  | 'unpaid'\n  | 'paused'\n  | 'updating'\n\n\n// Pricing Component Props\nexport interface PricingComponentProps {\n  currentPlan?: string\n  customerId?: string\n  customerEmail?: string\n  onPlanSelect?: (tier: ProductTierConfig, billingInterval: BillingInterval) => void\n  onError?: (error: StripeError) => void\n  className?: string\n}\n\n// Pricing Card Props\nexport interface PricingCardProps {\n  tier: ProductTierConfig\n  billingInterval: BillingInterval\n  isCurrentPlan?: boolean\n  loading?: boolean\n  onSubscribe: () => void\n  className?: string\n}\n\n\n// Calculate yearly savings\nexport const calculateYearlySavings = (monthlyPrice: number, yearlyPrice: number): number => {\n  const yearlyMonthlyEquivalent = monthlyPrice * 12\n  const savings = yearlyMonthlyEquivalent - yearlyPrice\n  return Math.round((savings / yearlyMonthlyEquivalent) * 100)\n}\n\n// Stripe error handling utility\nexport const getStripeErrorMessage = (error: StripeError): string => {\n  switch (error.code) {\n    case 'card_declined':\n      return 'Your card was declined. Please try a different payment method.'\n    case 'expired_card':\n      return 'Your card has expired. Please use a different card.'\n    case 'insufficient_funds':\n      return 'Your card has insufficient funds. Please use a different card.'\n    case 'incorrect_cvc':\n      return 'Your card\\'s security code is incorrect. Please try again.'\n    case 'processing_error':\n      return 'An error occurred while processing your card. Please try again.'\n    case 'rate_limit_error':\n      return 'Too many requests made too quickly. Please wait a moment and try again.'\n    default:\n      return error.message || 'An unexpected error occurred. Please try again.'\n  }\n}\n\n// Tier data validation\nexport const validatePricingPlan = (tier: ProductTierConfig): boolean => {\n  return !!(\n    tier.id &&\n    tier.name &&\n    tier.description &&\n    tier.price.monthly >= 0 &&\n    tier.price.annual >= 0 &&\n    Array.isArray(tier.features) &&\n    (tier.stripePriceIds.monthly || tier.stripePriceIds.annual)\n  )\n}"],"names":[],"mappings":"AAAA;;;CAGC,GAED,2CAA2C;;;;;;AA0EpC,MAAM,yBAAyB,CAAC,cAAsB;IAC3D,MAAM,0BAA0B,eAAe;IAC/C,MAAM,UAAU,0BAA0B;IAC1C,OAAO,KAAK,KAAK,CAAC,AAAC,UAAU,0BAA2B;AAC1D;AAGO,MAAM,wBAAwB,CAAC;IACpC,OAAQ,MAAM,IAAI;QAChB,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT,KAAK;YACH,OAAO;QACT;YACE,OAAO,MAAM,OAAO,IAAI;IAC5B;AACF;AAGO,MAAM,sBAAsB,CAAC;IAClC,OAAO,CAAC,CAAC,CACP,KAAK,EAAE,IACP,KAAK,IAAI,IACT,KAAK,WAAW,IAChB,KAAK,KAAK,CAAC,OAAO,IAAI,KACtB,KAAK,KAAK,CAAC,MAAM,IAAI,KACrB,MAAM,OAAO,CAAC,KAAK,QAAQ,KAC3B,CAAC,KAAK,cAAc,CAAC,OAAO,IAAI,KAAK,cAAc,CAAC,MAAM,CAC5D;AACF","debugId":null}},
    {"offset": {"line": 1154, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/stripe.ts"],"sourcesContent":["/**\n * Unified Stripe Type System\n *\n * Comprehensive type definitions for all Stripe-related functionality across TenantFlow.\n * This file serves as the single source of truth for Stripe types, eliminating duplication\n * and ensuring type safety across frontend and backend.\n *\n * @fileoverview Consolidates types from billing.ts, stripe-unified.ts, and local definitions\n */\n\n// Essential Stripe interfaces for type compatibility\n// This allows the shared package to compile without requiring stripe as a dependency\nexport interface StripeError {\n  type: string\n  message: string\n  code?: string\n  decline_code?: string\n  param?: string\n}\n\nexport interface StripeEvent {\n  id: string\n  object: 'event'\n  api_version: string\n  created: number\n  data: {\n    object: Record<string, unknown>\n    previous_attributes?: Record<string, unknown>\n  }\n  livemode: boolean\n  pending_webhooks: number\n  request: {\n    id: string | null\n    idempotency_key: string | null\n  }\n  type: string\n}\n\nexport interface StripeCustomer {\n  id: string\n  object: 'customer'\n  created: number\n  email: string | null\n  livemode: boolean\n  metadata: Record<string, string>\n}\n\nexport interface StripeSubscription {\n  id: string\n  object: 'subscription'\n  created: number\n  customer: string\n  status: string\n  livemode: boolean\n  metadata: Record<string, string>\n}\n\nexport interface StripePaymentMethod {\n  id: string\n  object: 'payment_method'\n  type: string\n  created: number\n  customer: string | null\n  livemode: boolean\n  metadata: Record<string, string>\n}\n\nexport interface StripeCheckoutSession {\n  id: string\n  object: 'checkout.session'\n  created: number\n  customer: string | null\n  livemode: boolean\n  metadata: Record<string, string>\n  mode: string\n  status: string | null\n  url: string | null\n}\n\nexport interface StripeCustomerCreateParams {\n  email?: string\n  name?: string\n  metadata?: Record<string, string>\n}\n\n// Direct exports - no legacy aliases needed\n// All consuming code should use the standard types directly\n\n// ========================\n// Core Stripe Constants\n// ========================\n\n/**\n * Supported Stripe API versions\n * These should be kept in sync with Stripe's latest stable versions\n */\nexport const STRIPE_API_VERSIONS = {\n  CURRENT: '2024-06-20',\n  BETA: '2025-06-30.basil',\n  LEGACY: '2023-10-16'\n} as const\n\nexport type StripeApiVersion = typeof STRIPE_API_VERSIONS[keyof typeof STRIPE_API_VERSIONS]\n\n/**\n * Comprehensive Stripe error codes mapping\n * Based on official Stripe error documentation\n */\nexport const STRIPE_ERROR_CODES = {\n  // Card Errors\n  CARD_DECLINED: 'card_declined',\n  EXPIRED_CARD: 'expired_card',\n  INCORRECT_CVC: 'incorrect_cvc',\n  INCORRECT_NUMBER: 'incorrect_number',\n  INSUFFICIENT_FUNDS: 'insufficient_funds',\n  INVALID_EXPIRY_MONTH: 'invalid_expiry_month',\n  INVALID_EXPIRY_YEAR: 'invalid_expiry_year',\n  INVALID_NUMBER: 'invalid_number',\n  PROCESSING_ERROR: 'processing_error',\n\n  // Rate Limit Errors\n  RATE_LIMIT: 'rate_limit',\n\n  // Invalid Request Errors\n  INVALID_REQUEST: 'invalid_request_error',\n  MISSING_PARAMETER: 'missing',\n  INVALID_PARAMETER: 'invalid',\n\n  // API Errors\n  API_CONNECTION_ERROR: 'api_connection_error',\n  API_ERROR: 'api_error',\n  AUTHENTICATION_ERROR: 'authentication_error',\n  PERMISSION_ERROR: 'permission_error',\n  IDEMPOTENCY_ERROR: 'idempotency_error',\n\n  // Application Errors\n  CUSTOMER_NOT_FOUND: 'customer_not_found',\n  SUBSCRIPTION_NOT_FOUND: 'subscription_not_found',\n  INVALID_PRICE_ID: 'invalid_price_id',\n  WEBHOOK_SIGNATURE_INVALID: 'webhook_signature_invalid',\n  CONFIGURATION_ERROR: 'configuration_error'\n} as const\n\nexport type StripeErrorCode = typeof STRIPE_ERROR_CODES[keyof typeof STRIPE_ERROR_CODES]\n\n/**\n * Stripe decline codes for detailed payment failure analysis\n */\nexport const STRIPE_DECLINE_CODES = {\n  GENERIC_DECLINE: 'generic_decline',\n  INSUFFICIENT_FUNDS: 'insufficient_funds',\n  LOST_CARD: 'lost_card',\n  STOLEN_CARD: 'stolen_card',\n  EXPIRED_CARD: 'expired_card',\n  INCORRECT_CVC: 'incorrect_cvc',\n  PROCESSING_ERROR: 'processing_error',\n  CARD_NOT_SUPPORTED: 'card_not_supported',\n  CURRENCY_NOT_SUPPORTED: 'currency_not_supported',\n  FRAUDULENT: 'fraudulent',\n  MERCHANT_BLACKLIST: 'merchant_blacklist',\n  PICKUP_CARD: 'pickup_card',\n  RESTRICTED_CARD: 'restricted_card',\n  SECURITY_VIOLATION: 'security_violation',\n  SERVICE_NOT_ALLOWED: 'service_not_allowed',\n  STOP_PAYMENT_ORDER: 'stop_payment_order',\n  TESTMODE_DECLINE: 'testmode_decline',\n  TRANSACTION_NOT_ALLOWED: 'transaction_not_allowed',\n  TRY_AGAIN_LATER: 'try_again_later',\n  WITHDRAWAL_COUNT_LIMIT_EXCEEDED: 'withdrawal_count_limit_exceeded'\n} as const\n\nexport type StripeDeclineCode = typeof STRIPE_DECLINE_CODES[keyof typeof STRIPE_DECLINE_CODES]\n\n// ========================\n// Plan and Subscription Types\n// ========================\n\n/**\n * Application plan types\n * These correspond to the business tiers offered by TenantFlow\n */\nexport const PLAN_TYPES = {\n  FREETRIAL: 'FREETRIAL',\n  STARTER: 'STARTER',\n  GROWTH: 'GROWTH',\n  TENANTFLOW_MAX: 'TENANTFLOW_MAX'\n} as const\n\nexport type PlanType = typeof PLAN_TYPES[keyof typeof PLAN_TYPES]\n\n/**\n * Billing periods supported by the application\n */\nexport const BILLING_PERIODS = {\n  MONTHLY: 'monthly',\n  ANNUAL: 'annual',\n  // Backward compatibility alias - prefer ANNUAL\n  YEARLY: 'yearly'\n} as const\n\nexport type BillingPeriod = typeof BILLING_PERIODS[keyof typeof BILLING_PERIODS]\n\n/**\n * Subscription statuses aligned with Stripe's subscription status values\n */\nexport const SUBSCRIPTION_STATUSES = {\n  INCOMPLETE: 'incomplete',\n  INCOMPLETE_EXPIRED: 'incomplete_expired',\n  TRIALING: 'trialing',\n  ACTIVE: 'active',\n  PAST_DUE: 'past_due',\n  CANCELED: 'canceled',\n  UNPAID: 'unpaid',\n  PAUSED: 'paused',\n  UPDATING: 'updating'\n} as const\n\nexport type SubscriptionStatus = typeof SUBSCRIPTION_STATUSES[keyof typeof SUBSCRIPTION_STATUSES]\n\n/**\n * Plan configuration interface with comprehensive metadata\n */\nexport interface PlanConfig {\n  readonly id: PlanType\n  readonly name: string\n  readonly description: string\n  readonly price: {\n    readonly monthly: number\n    readonly annual: number\n  }\n  readonly features: readonly string[]\n  readonly limits: {\n    readonly properties: number\n    readonly tenants: number\n    readonly storage: number // in MB\n    readonly apiCalls: number // per month\n  }\n  readonly priority: boolean\n  readonly isPopular?: boolean\n  readonly stripeIds: {\n    readonly monthlyPriceId: string | null\n    readonly annualPriceId: string | null\n    readonly productId: string | null\n  }\n}\n\n/**\n * User subscription data with full context\n */\nexport interface UserSubscription {\n  readonly id: string\n  readonly userId: string\n  readonly planType: PlanType\n  readonly status: SubscriptionStatus\n  readonly billingPeriod: BillingPeriod\n  readonly stripeCustomerId: string | null\n  readonly stripeSubscriptionId: string | null\n  readonly stripePriceId: string | null\n  readonly currentPeriodStart: Date | null\n  readonly currentPeriodEnd: Date | null\n  readonly trialStart: Date | null\n  readonly trialEnd: Date | null\n  readonly cancelAtPeriodEnd: boolean\n  readonly canceledAt: Date | null\n  readonly createdAt: Date\n  readonly updatedAt: Date\n}\n\n// ========================\n// Webhook Event Types\n// ========================\n\n/**\n * Comprehensive webhook event types that TenantFlow handles\n */\nexport const WEBHOOK_EVENT_TYPES = {\n  // Customer events\n  CUSTOMER_CREATED: 'customer.created',\n  CUSTOMER_UPDATED: 'customer.updated',\n  CUSTOMER_DELETED: 'customer.deleted',\n\n  // Subscription events\n  SUBSCRIPTION_CREATED: 'customer.subscription.created',\n  SUBSCRIPTION_UPDATED: 'customer.subscription.updated',\n  SUBSCRIPTION_DELETED: 'customer.subscription.deleted',\n  SUBSCRIPTION_TRIAL_WILL_END: 'customer.subscription.trial_will_end',\n  SUBSCRIPTION_PAUSED: 'customer.subscription.paused',\n  SUBSCRIPTION_RESUMED: 'customer.subscription.resumed',\n\n  // Invoice events\n  INVOICE_CREATED: 'invoice.created',\n  INVOICE_FINALIZED: 'invoice.finalized',\n  INVOICE_PAYMENT_SUCCEEDED: 'invoice.payment_succeeded',\n  INVOICE_PAYMENT_FAILED: 'invoice.payment_failed',\n  INVOICE_PAYMENT_ACTION_REQUIRED: 'invoice.payment_action_required',\n  INVOICE_UPCOMING: 'invoice.upcoming',\n\n  // Payment events\n  PAYMENT_INTENT_CREATED: 'payment_intent.created',\n  PAYMENT_INTENT_SUCCEEDED: 'payment_intent.succeeded',\n  PAYMENT_INTENT_PAYMENT_FAILED: 'payment_intent.payment_failed',\n  PAYMENT_INTENT_REQUIRES_ACTION: 'payment_intent.requires_action',\n\n  // Charge events\n  CHARGE_FAILED: 'charge.failed',\n\n  // Checkout events\n  CHECKOUT_SESSION_COMPLETED: 'checkout.session.completed',\n  CHECKOUT_SESSION_EXPIRED: 'checkout.session.expired',\n\n  // Setup intent events\n  SETUP_INTENT_SUCCEEDED: 'setup_intent.succeeded',\n  SETUP_INTENT_SETUP_FAILED: 'setup_intent.setup_failed'\n} as const\n\nexport type WebhookEventType = typeof WEBHOOK_EVENT_TYPES[keyof typeof WEBHOOK_EVENT_TYPES]\n\n/**\n * Standardized webhook event structure\n */\nexport interface StripeWebhookEvent {\n  readonly id: string\n  readonly object: 'event'\n  readonly api_version: string\n  readonly created: number\n  readonly data: {\n    readonly object: Record<string, unknown>\n    readonly previous_attributes?: Record<string, unknown>\n  }\n  readonly livemode: boolean\n  readonly pending_webhooks: number\n  readonly request: {\n    readonly id: string | null\n    readonly idempotency_key: string | null\n  }\n  readonly type: WebhookEventType\n}\n\n/**\n * Type-safe webhook event handlers\n * Using StripeEvent for better compatibility across environments\n */\nexport interface WebhookEventHandlers {\n  [WEBHOOK_EVENT_TYPES.CUSTOMER_CREATED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.CUSTOMER_UPDATED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.CUSTOMER_DELETED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SUBSCRIPTION_CREATED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SUBSCRIPTION_UPDATED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SUBSCRIPTION_DELETED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SUBSCRIPTION_TRIAL_WILL_END]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SUBSCRIPTION_PAUSED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SUBSCRIPTION_RESUMED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.INVOICE_CREATED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.INVOICE_FINALIZED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.INVOICE_PAYMENT_SUCCEEDED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.INVOICE_PAYMENT_FAILED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.INVOICE_UPCOMING]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.PAYMENT_INTENT_CREATED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.PAYMENT_INTENT_SUCCEEDED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.PAYMENT_INTENT_PAYMENT_FAILED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.CHECKOUT_SESSION_COMPLETED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.CHECKOUT_SESSION_EXPIRED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SETUP_INTENT_SUCCEEDED]: (event: StripeEvent) => Promise<void>\n  [WEBHOOK_EVENT_TYPES.SETUP_INTENT_SETUP_FAILED]: (event: StripeEvent) => Promise<void>\n}\n\n// ========================\n// Configuration Types\n// ========================\n\n/**\n * Unified Stripe configuration interface\n */\nexport interface StripeConfig {\n  readonly secretKey: string\n  readonly publishableKey: string\n  readonly webhookSecret: string\n  readonly apiVersion: StripeApiVersion\n  readonly automaticTax: boolean\n  readonly defaultTrialDays: number\n  readonly environment: 'test' | 'live'\n}\n\n/**\n * Environment-specific configuration\n */\nexport interface StripeEnvironmentConfig extends StripeConfig {\n  readonly isDevelopment: boolean\n  readonly isProduction: boolean\n  readonly isTest: boolean\n  readonly webhookEndpoint: string\n}\n\n/**\n * Plan price ID configuration for all tiers\n */\nexport interface StripePlanPriceIds {\n  readonly starter: {\n    readonly monthly: string\n    readonly annual: string\n  }\n  readonly growth: {\n    readonly monthly: string\n    readonly annual: string\n  }\n  readonly tenantflow_max: {\n    readonly monthly: string\n    readonly annual: string\n  }\n}\n\n// ========================\n// Error Handling Types\n// ========================\n\n/**\n * Error categories for systematic error handling\n */\nexport const STRIPE_ERROR_CATEGORIES = {\n  PAYMENT_METHOD: 'payment_method',\n  INFRASTRUCTURE: 'infrastructure',\n  CLIENT_ERROR: 'client_error',\n  STRIPE_SERVICE: 'stripe_service',\n  CONFIGURATION: 'configuration',\n  UNKNOWN: 'unknown'\n} as const\n\nexport type StripeErrorCategory = typeof STRIPE_ERROR_CATEGORIES[keyof typeof STRIPE_ERROR_CATEGORIES]\n\n/**\n * Error severity levels for alerting and monitoring\n */\nexport const STRIPE_ERROR_SEVERITIES = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  CRITICAL: 'critical'\n} as const\n\nexport type StripeErrorSeverity = typeof STRIPE_ERROR_SEVERITIES[keyof typeof STRIPE_ERROR_SEVERITIES]\n\n/**\n * Comprehensive error context for debugging and analytics\n */\nexport interface StripeErrorContext {\n  readonly operation: string\n  readonly resource: string\n  readonly userId?: string\n  readonly requestId?: string\n  readonly metadata?: Record<string, unknown>\n  readonly timestamp: Date\n}\n\n/**\n * Standardized error structure with full context\n */\nexport interface StandardizedStripeError {\n  readonly code: StripeErrorCode\n  readonly message: string\n  readonly userMessage: string\n  readonly details?: string\n  readonly errorId: string\n  readonly category: StripeErrorCategory\n  readonly severity: StripeErrorSeverity\n  readonly retryable: boolean\n  readonly retryAfter?: number\n  readonly stripeErrorType?: string\n  readonly httpStatusCode?: number\n  readonly context: StripeErrorContext\n}\n\n/**\n * Retry configuration for error recovery\n */\nexport interface StripeRetryConfig {\n  readonly maxAttempts: number\n  readonly baseDelayMs: number\n  readonly maxDelayMs: number\n  readonly exponentialBase: number\n  readonly jitterMs: number\n}\n\n/**\n * Error analytics for monitoring and alerting\n */\nexport interface StripeErrorAnalytics {\n  readonly category: StripeErrorCategory\n  readonly severity: StripeErrorSeverity\n  readonly actionRequired: boolean\n  readonly escalateToStripe: boolean\n  readonly affectedUsers: number\n  readonly errorRate: number\n  readonly avgResponseTime: number\n}\n\n// ========================\n// API Request/Response Types\n// ========================\n\n/**\n * Checkout session creation parameters\n */\nexport interface CreateCheckoutSessionParams {\n  readonly userId: string\n  readonly planType: PlanType\n  readonly billingInterval: BillingPeriod\n  readonly successUrl: string\n  readonly cancelUrl: string\n  readonly priceId?: string\n  readonly mode?: 'payment' | 'subscription' | 'setup'\n  readonly currency?: string\n  readonly locale?: string\n  readonly collectPaymentMethod?: boolean\n  readonly uiMode?: 'embedded' | 'hosted'\n  readonly metadata?: Record<string, string>\n}\n\n/**\n * Customer portal session parameters\n */\nexport interface CreatePortalSessionParams {\n  readonly customerId: string\n  readonly returnUrl: string\n  readonly configuration?: string\n}\n\n/**\n * Subscription management parameters\n */\nexport interface UpdateSubscriptionParams {\n  readonly userId: string\n  readonly newPriceId: string\n  readonly prorationBehavior?: 'create_prorations' | 'none' | 'always_invoice'\n  readonly prorationDate?: Date\n}\n\n/**\n * Invoice preview parameters\n */\nexport interface PreviewInvoiceParams {\n  readonly userId: string\n  readonly newPriceId: string\n  readonly prorationDate?: Date\n}\n\n/**\n * Subscription creation request\n */\nexport interface CreateSubscriptionRequest {\n  readonly planType: PlanType\n  readonly billingPeriod: BillingPeriod\n  readonly paymentMethodId?: string\n  readonly metadata?: Record<string, string>\n}\n\n/**\n * Subscription creation response\n */\nexport interface CreateSubscriptionResponse {\n  readonly subscription: UserSubscription\n  readonly clientSecret?: string\n  readonly requiresPaymentMethod: boolean\n  readonly success: boolean\n}\n\n// ========================\n// Payment Method Types\n// ========================\n\n/**\n * Simplified payment method interface for cross-platform usage\n */\nexport interface PaymentMethod {\n  readonly id: string\n  readonly object: 'payment_method'\n  readonly type: string\n  readonly created: number\n  readonly customer: string | null\n  readonly livemode: boolean\n  readonly metadata: Record<string, string>\n  readonly card?: {\n    readonly brand: string\n    readonly last4: string\n    readonly exp_month: number\n    readonly exp_year: number\n    readonly funding: string\n    readonly country: string | null\n  }\n  readonly billing_details: {\n    readonly address: {\n      readonly city: string | null\n      readonly country: string | null\n      readonly line1: string | null\n      readonly line2: string | null\n      readonly postal_code: string | null\n      readonly state: string | null\n    }\n    readonly email: string | null\n    readonly name: string | null\n    readonly phone: string | null\n  }\n}\n\n/**\n * Payment method error with detailed context\n */\nexport interface PaymentMethodError {\n  readonly code: StripeErrorCode\n  readonly declineCode?: StripeDeclineCode\n  readonly userMessage: string\n  readonly retryable: boolean\n  readonly suggestedActions: readonly string[]\n}\n\n// ========================\n// Usage and Billing Types\n// ========================\n\n/**\n * Usage metrics for plan enforcement\n */\nexport interface UsageMetrics {\n  readonly properties: number\n  readonly tenants: number\n  readonly leases: number\n  readonly storageUsedMB: number\n  readonly apiCallsCount: number\n  readonly leaseGenerationsCount: number\n  readonly month: string // YYYY-MM format\n}\n\n/**\n * Plan limits for subscription enforcement\n */\nexport interface PlanLimits {\n  readonly properties: number\n  readonly tenants: number\n  readonly storage: number\n  readonly apiCalls: number\n}\n\n/**\n * Limit check results\n */\nexport interface LimitChecks {\n  readonly propertiesExceeded: boolean\n  readonly tenantsExceeded: boolean\n  readonly storageExceeded: boolean\n  readonly apiCallsExceeded: boolean\n}\n\n/**\n * Complete usage data with limits\n */\nexport interface UsageData extends UsageMetrics {\n  readonly limits: PlanLimits | null\n  readonly limitChecks: LimitChecks | null\n}\n\n/**\n * Invoice information\n */\nexport interface Invoice {\n  readonly id: string\n  readonly userId: string\n  readonly subscriptionId: string | null\n  readonly stripeInvoiceId: string\n  readonly amountPaid: number\n  readonly amountDue: number\n  readonly currency: string\n  readonly status: string\n  readonly invoiceDate: Date\n  readonly dueDate: Date | null\n  readonly paidAt: Date | null\n  readonly invoiceUrl: string | null\n  readonly invoicePdf: string | null\n  readonly description: string | null\n  readonly createdAt: Date\n  readonly updatedAt: Date\n}\n\n/**\n * Billing history event for audit trail\n */\nexport interface BillingHistoryEvent {\n  readonly id: string\n  readonly userId: string\n  readonly type: 'subscription_created' | 'subscription_updated' | 'subscription_canceled' | 'payment_succeeded' | 'payment_failed' | 'invoice_created'\n  readonly description: string\n  readonly amount?: number\n  readonly currency?: string\n  readonly stripeEventId?: string\n  readonly metadata?: Record<string, string | number | boolean>\n  readonly createdAt: Date\n}\n\n// ========================\n// API Response Types\n// ========================\n\n/**\n * Standardized success response wrapper\n */\nexport interface StripeSuccessResponse<T = unknown> {\n  readonly success: true\n  readonly data: T\n  readonly metadata?: {\n    readonly requestId?: string\n    readonly timestamp: string\n    readonly operation: string\n    readonly resource: string\n  }\n}\n\n/**\n * Standardized error response wrapper\n */\nexport interface StripeErrorResponse {\n  readonly success: false\n  readonly error: {\n    readonly code: StripeErrorCode\n    readonly message: string\n    readonly userMessage: string\n    readonly errorId: string\n    readonly details?: string\n    readonly retryable: boolean\n    readonly retryAfter?: number\n    readonly analytics?: StripeErrorAnalytics\n  }\n  readonly metadata?: {\n    readonly requestId?: string\n    readonly timestamp: string\n    readonly operation: string\n    readonly resource: string\n  }\n}\n\n/**\n * Union type for all Stripe API responses\n */\nexport type StripeApiResponse<T = unknown> = StripeSuccessResponse<T> | StripeErrorResponse\n\n/**\n * Client-safe error interface (no sensitive details)\n */\nexport interface ClientSafeStripeError {\n  readonly code: StripeErrorCode\n  readonly userMessage: string\n  readonly retryable: boolean\n  readonly retryAfter?: number\n  readonly errorId: string\n  readonly category: StripeErrorCategory\n  readonly severity: StripeErrorSeverity\n}\n\n// ========================\n// Frontend Integration Types\n// ========================\n\n/**\n * Stripe Element event types for React components\n */\nexport interface StripeElementEvent {\n  readonly elementType: string\n  readonly empty: boolean\n  readonly complete: boolean\n  readonly error?: {\n    readonly type: string\n    readonly code: string\n    readonly message: string\n  }\n}\n\n/**\n * Card Element specific event\n */\nexport interface StripeCardElementEvent extends StripeElementEvent {\n  readonly brand?: string\n  readonly country?: string\n}\n\n/**\n * Payment Element specific event\n */\nexport interface StripePaymentElementEvent extends StripeElementEvent {\n  readonly value?: {\n    readonly type: string\n  }\n}\n\n/**\n * Event callback types for React components\n */\nexport type StripeElementEventCallback = (event: StripeElementEvent) => void\nexport type StripeCardElementEventCallback = (event: StripeCardElementEvent) => void\nexport type StripePaymentElementEventCallback = (event: StripePaymentElementEvent) => void\n\n// ========================\n// Constants Export\n// ========================\n\n/**\n * Default retry configuration\n */\nexport const DEFAULT_STRIPE_RETRY_CONFIG: StripeRetryConfig = {\n  maxAttempts: 3,\n  baseDelayMs: 1000,\n  maxDelayMs: 10000,\n  exponentialBase: 2,\n  jitterMs: 100\n} as const\n\n/**\n * Error categorization mapping\n */\nexport const ERROR_CATEGORY_MAPPING: Record<StripeErrorCode, StripeErrorCategory> = {\n  [STRIPE_ERROR_CODES.CARD_DECLINED]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.EXPIRED_CARD]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INCORRECT_CVC]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INCORRECT_NUMBER]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INSUFFICIENT_FUNDS]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INVALID_EXPIRY_MONTH]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INVALID_EXPIRY_YEAR]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INVALID_NUMBER]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.PROCESSING_ERROR]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.RATE_LIMIT]: STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE,\n  [STRIPE_ERROR_CODES.API_CONNECTION_ERROR]: STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE,\n  [STRIPE_ERROR_CODES.API_ERROR]: STRIPE_ERROR_CATEGORIES.STRIPE_SERVICE,\n  [STRIPE_ERROR_CODES.AUTHENTICATION_ERROR]: STRIPE_ERROR_CATEGORIES.CONFIGURATION,\n  [STRIPE_ERROR_CODES.PERMISSION_ERROR]: STRIPE_ERROR_CATEGORIES.CONFIGURATION,\n  [STRIPE_ERROR_CODES.INVALID_REQUEST]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.MISSING_PARAMETER]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.INVALID_PARAMETER]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.IDEMPOTENCY_ERROR]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.CUSTOMER_NOT_FOUND]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.SUBSCRIPTION_NOT_FOUND]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.INVALID_PRICE_ID]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.WEBHOOK_SIGNATURE_INVALID]: STRIPE_ERROR_CATEGORIES.CONFIGURATION,\n  [STRIPE_ERROR_CODES.CONFIGURATION_ERROR]: STRIPE_ERROR_CATEGORIES.CONFIGURATION\n} as const\n\n/**\n * Error severity mapping\n */\nexport const ERROR_SEVERITY_MAPPING: Record<StripeErrorCode, StripeErrorSeverity> = {\n  [STRIPE_ERROR_CODES.CARD_DECLINED]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.EXPIRED_CARD]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INCORRECT_CVC]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INCORRECT_NUMBER]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INSUFFICIENT_FUNDS]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INVALID_EXPIRY_MONTH]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INVALID_EXPIRY_YEAR]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INVALID_NUMBER]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.PROCESSING_ERROR]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.RATE_LIMIT]: STRIPE_ERROR_SEVERITIES.HIGH,\n  [STRIPE_ERROR_CODES.API_CONNECTION_ERROR]: STRIPE_ERROR_SEVERITIES.HIGH,\n  [STRIPE_ERROR_CODES.API_ERROR]: STRIPE_ERROR_SEVERITIES.HIGH,\n  [STRIPE_ERROR_CODES.AUTHENTICATION_ERROR]: STRIPE_ERROR_SEVERITIES.CRITICAL,\n  [STRIPE_ERROR_CODES.PERMISSION_ERROR]: STRIPE_ERROR_SEVERITIES.CRITICAL,\n  [STRIPE_ERROR_CODES.INVALID_REQUEST]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.MISSING_PARAMETER]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.INVALID_PARAMETER]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.IDEMPOTENCY_ERROR]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.CUSTOMER_NOT_FOUND]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.SUBSCRIPTION_NOT_FOUND]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.INVALID_PRICE_ID]: STRIPE_ERROR_SEVERITIES.HIGH,\n  [STRIPE_ERROR_CODES.WEBHOOK_SIGNATURE_INVALID]: STRIPE_ERROR_SEVERITIES.CRITICAL,\n  [STRIPE_ERROR_CODES.CONFIGURATION_ERROR]: STRIPE_ERROR_SEVERITIES.CRITICAL\n} as const\n\n/**\n * Retryable error codes\n */\nexport const RETRYABLE_ERROR_CODES: readonly StripeErrorCode[] = [\n  STRIPE_ERROR_CODES.RATE_LIMIT,\n  STRIPE_ERROR_CODES.API_ERROR,\n  STRIPE_ERROR_CODES.API_CONNECTION_ERROR,\n  STRIPE_ERROR_CODES.PROCESSING_ERROR\n] as const\n\n// ========================\n// Validation Functions\n// ========================\n\n/**\n * Validate Stripe configuration\n */\nexport function validateStripeConfig(config: {\n  secretKey?: string | null\n  publishableKey?: string | null\n  webhookSecret?: string | null\n}): { isValid: boolean; errors: string[] } {\n  const errors: string[] = []\n\n  if (!config.secretKey) {\n    errors.push('STRIPE_SECRET_KEY is required')\n  } else if (!config.secretKey.startsWith('sk_')) {\n    errors.push('STRIPE_SECRET_KEY must start with \"sk_\"')\n  }\n\n  if (!config.publishableKey) {\n    errors.push('STRIPE_PUBLISHABLE_KEY is required')\n  } else if (!config.publishableKey.startsWith('pk_')) {\n    errors.push('STRIPE_PUBLISHABLE_KEY must start with \"pk_\"')\n  }\n\n  // Webhook secret is optional but if provided, should be valid\n  if (config.webhookSecret && !config.webhookSecret.startsWith('whsec_')) {\n    errors.push('STRIPE_WEBHOOK_SECRET must start with \"whsec_\"')\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1400, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/stripe-guards.ts"],"sourcesContent":["/**\n * Stripe Type Guards\n * \n * Runtime type validation utilities for Stripe types.\n * Provides type-safe guards for validating Stripe objects at runtime.\n * \n * @fileoverview Type guards for all Stripe-related types\n */\n\nimport {\n  type PlanType,\n  PLAN_TYPES,\n  type BillingPeriod,\n  BILLING_PERIODS,\n  type SubscriptionStatus,\n  SUBSCRIPTION_STATUSES,\n  type WebhookEventType,\n  WEBHOOK_EVENT_TYPES,\n  type StripeErrorCode,\n  STRIPE_ERROR_CODES,\n  type StripeDeclineCode,\n  STRIPE_DECLINE_CODES,\n  type StripeErrorCategory,\n  STRIPE_ERROR_CATEGORIES,\n  type StripeErrorSeverity,\n  STRIPE_ERROR_SEVERITIES,\n  type StripeApiVersion,\n  STRIPE_API_VERSIONS,\n  type StandardizedStripeError,\n  type StripeWebhookEvent,\n  type PaymentMethod,\n  type UserSubscription,\n  type PlanConfig,\n  type UsageMetrics,\n  type StripeConfig,\n  type CreateCheckoutSessionParams,\n  type CreatePortalSessionParams,\n  type StripeSuccessResponse,\n  type StripeErrorResponse,\n  RETRYABLE_ERROR_CODES\n} from './stripe'\n\n// ========================\n// Primitive Type Guards\n// ========================\n\n/**\n * Check if value is a valid PlanType\n */\nexport function isPlanType(value: unknown): value is PlanType {\n  return typeof value === 'string' && Object.values(PLAN_TYPES).includes(value as PlanType)\n}\n\n/**\n * Check if value is a valid BillingPeriod\n */\nexport function isBillingPeriod(value: unknown): value is BillingPeriod {\n  return typeof value === 'string' && Object.values(BILLING_PERIODS).includes(value as BillingPeriod)\n}\n\n/**\n * Check if value is a valid SubscriptionStatus\n */\nexport function isSubscriptionStatus(value: unknown): value is SubscriptionStatus {\n  return typeof value === 'string' && Object.values(SUBSCRIPTION_STATUSES).includes(value as SubscriptionStatus)\n}\n\n/**\n * Check if value is a valid WebhookEventType\n */\nexport function isWebhookEventType(value: unknown): value is WebhookEventType {\n  return typeof value === 'string' && Object.values(WEBHOOK_EVENT_TYPES).includes(value as WebhookEventType)\n}\n\n/**\n * Check if value is a valid StripeErrorCode\n */\nexport function isStripeErrorCode(value: unknown): value is StripeErrorCode {\n  return typeof value === 'string' && Object.values(STRIPE_ERROR_CODES).includes(value as StripeErrorCode)\n}\n\n/**\n * Check if value is a valid StripeDeclineCode\n */\nexport function isStripeDeclineCode(value: unknown): value is StripeDeclineCode {\n  return typeof value === 'string' && Object.values(STRIPE_DECLINE_CODES).includes(value as StripeDeclineCode)\n}\n\n/**\n * Check if value is a valid StripeErrorCategory\n */\nexport function isStripeErrorCategory(value: unknown): value is StripeErrorCategory {\n  return typeof value === 'string' && Object.values(STRIPE_ERROR_CATEGORIES).includes(value as StripeErrorCategory)\n}\n\n/**\n * Check if value is a valid StripeErrorSeverity\n */\nexport function isStripeErrorSeverity(value: unknown): value is StripeErrorSeverity {\n  return typeof value === 'string' && Object.values(STRIPE_ERROR_SEVERITIES).includes(value as StripeErrorSeverity)\n}\n\n/**\n * Check if value is a valid StripeApiVersion\n */\nexport function isStripeApiVersion(value: unknown): value is StripeApiVersion {\n  return typeof value === 'string' && Object.values(STRIPE_API_VERSIONS).includes(value as StripeApiVersion)\n}\n\n// ========================\n// Complex Type Guards\n// ========================\n\n/**\n * Check if value is a valid StandardizedStripeError\n */\nexport function isStandardizedStripeError(value: unknown): value is StandardizedStripeError {\n  if (!value || typeof value !== 'object') return false\n  \n  const error = value as Record<string, unknown>\n  \n  return (\n    isStripeErrorCode(error.code) &&\n    typeof error.message === 'string' &&\n    typeof error.userMessage === 'string' &&\n    typeof error.errorId === 'string' &&\n    isStripeErrorCategory(error.category) &&\n    isStripeErrorSeverity(error.severity) &&\n    typeof error.retryable === 'boolean' &&\n    typeof error.context === 'object' &&\n    error.context !== null\n  )\n}\n\n/**\n * Check if value is a valid StripeWebhookEvent\n */\nexport function isStripeWebhookEvent(value: unknown): value is StripeWebhookEvent {\n  if (!value || typeof value !== 'object') return false\n  \n  const event = value as Record<string, unknown>\n  \n  return (\n    typeof event.id === 'string' &&\n    event.object === 'event' &&\n    typeof event.api_version === 'string' &&\n    typeof event.created === 'number' &&\n    typeof event.data === 'object' &&\n    event.data !== null &&\n    typeof event.livemode === 'boolean' &&\n    typeof event.pending_webhooks === 'number' &&\n    typeof event.request === 'object' &&\n    event.request !== null &&\n    isWebhookEventType(event.type)\n  )\n}\n\n/**\n * Check if value is a valid PaymentMethod\n */\nexport function isPaymentMethod(value: unknown): value is PaymentMethod {\n  if (!value || typeof value !== 'object') return false\n  \n  const pm = value as Record<string, unknown>\n  \n  return (\n    typeof pm.id === 'string' &&\n    pm.object === 'payment_method' &&\n    typeof pm.type === 'string' &&\n    typeof pm.created === 'number' &&\n    typeof pm.livemode === 'boolean' &&\n    typeof pm.metadata === 'object' &&\n    pm.metadata !== null &&\n    typeof pm.billing_details === 'object' &&\n    pm.billing_details !== null\n  )\n}\n\n/**\n * Check if value is a valid UserSubscription\n */\nexport function isUserSubscription(value: unknown): value is UserSubscription {\n  if (!value || typeof value !== 'object') return false\n  \n  const sub = value as Record<string, unknown>\n  \n  return (\n    typeof sub.id === 'string' &&\n    typeof sub.userId === 'string' &&\n    isPlanType(sub.planType) &&\n    isSubscriptionStatus(sub.status) &&\n    isBillingPeriod(sub.billingPeriod) &&\n    typeof sub.cancelAtPeriodEnd === 'boolean' &&\n    sub.createdAt instanceof Date &&\n    sub.updatedAt instanceof Date\n  )\n}\n\n/**\n * Check if value is a valid PlanConfig\n */\nexport function isPlanConfig(value: unknown): value is PlanConfig {\n  if (!value || typeof value !== 'object') return false\n  \n  const plan = value as Record<string, unknown>\n  \n  return (\n    isPlanType(plan.id) &&\n    typeof plan.name === 'string' &&\n    typeof plan.description === 'string' &&\n    typeof plan.price === 'object' &&\n    plan.price !== null &&\n    Array.isArray(plan.features) &&\n    typeof plan.limits === 'object' &&\n    plan.limits !== null &&\n    typeof plan.priority === 'boolean' &&\n    typeof plan.stripeIds === 'object' &&\n    plan.stripeIds !== null\n  )\n}\n\n/**\n * Check if value is a valid UsageMetrics\n */\nexport function isUsageMetrics(value: unknown): value is UsageMetrics {\n  if (!value || typeof value !== 'object') return false\n  \n  const usage = value as Record<string, unknown>\n  \n  return (\n    typeof usage.properties === 'number' &&\n    typeof usage.tenants === 'number' &&\n    typeof usage.leases === 'number' &&\n    typeof usage.storageUsedMB === 'number' &&\n    typeof usage.apiCallsCount === 'number' &&\n    typeof usage.leaseGenerationsCount === 'number' &&\n    typeof usage.month === 'string' &&\n    /^\\d{4}-\\d{2}$/.test(usage.month as string)\n  )\n}\n\n/**\n * Check if value is a valid StripeConfig\n */\nexport function isStripeConfig(value: unknown): value is StripeConfig {\n  if (!value || typeof value !== 'object') return false\n  \n  const config = value as Record<string, unknown>\n  \n  return (\n    typeof config.secretKey === 'string' &&\n    typeof config.publishableKey === 'string' &&\n    typeof config.webhookSecret === 'string' &&\n    isStripeApiVersion(config.apiVersion) &&\n    typeof config.automaticTax === 'boolean' &&\n    typeof config.defaultTrialDays === 'number' &&\n    (config.environment === 'test' || config.environment === 'live')\n  )\n}\n\n/**\n * Check if value is a valid CreateCheckoutSessionParams\n */\nexport function isCreateCheckoutSessionParams(value: unknown): value is CreateCheckoutSessionParams {\n  if (!value || typeof value !== 'object') return false\n  \n  const params = value as Record<string, unknown>\n  \n  return (\n    typeof params.userId === 'string' &&\n    isPlanType(params.planType) &&\n    isBillingPeriod(params.billingInterval) &&\n    typeof params.successUrl === 'string' &&\n    typeof params.cancelUrl === 'string'\n  )\n}\n\n/**\n * Check if value is a valid CreatePortalSessionParams\n */\nexport function isCreatePortalSessionParams(value: unknown): value is CreatePortalSessionParams {\n  if (!value || typeof value !== 'object') return false\n  \n  const params = value as Record<string, unknown>\n  \n  return (\n    typeof params.customerId === 'string' &&\n    typeof params.returnUrl === 'string'\n  )\n}\n\n/**\n * Check if value is a valid StripeSuccessResponse\n */\nexport function isStripeSuccessResponse<T>(value: unknown): value is StripeSuccessResponse<T> {\n  if (!value || typeof value !== 'object') return false\n  \n  const response = value as Record<string, unknown>\n  \n  return (\n    response.success === true &&\n    'data' in response\n  )\n}\n\n/**\n * Check if value is a valid StripeErrorResponse\n */\nexport function isStripeErrorResponse(value: unknown): value is StripeErrorResponse {\n  if (!value || typeof value !== 'object') return false\n  \n  const response = value as Record<string, unknown>\n  \n  return (\n    response.success === false &&\n    typeof response.error === 'object' &&\n    response.error !== null\n  )\n}\n\n// ========================\n// Error Classification Guards\n// ========================\n\n/**\n * Check if error is retryable based on error code\n */\nexport function isRetryableError(error: StandardizedStripeError): boolean {\n  return RETRYABLE_ERROR_CODES.includes(error.code)\n}\n\n/**\n * Check if error is a card error\n */\nexport function isCardError(error: StandardizedStripeError): boolean {\n  const cardErrorCodes = [\n    STRIPE_ERROR_CODES.CARD_DECLINED,\n    STRIPE_ERROR_CODES.EXPIRED_CARD,\n    STRIPE_ERROR_CODES.INCORRECT_CVC,\n    STRIPE_ERROR_CODES.INCORRECT_NUMBER,\n    STRIPE_ERROR_CODES.INSUFFICIENT_FUNDS,\n    STRIPE_ERROR_CODES.INVALID_EXPIRY_MONTH,\n    STRIPE_ERROR_CODES.INVALID_EXPIRY_YEAR,\n    STRIPE_ERROR_CODES.INVALID_NUMBER,\n    STRIPE_ERROR_CODES.PROCESSING_ERROR\n  ] as const\n  \n  return cardErrorCodes.includes(error.code as typeof cardErrorCodes[number])\n}\n\n/**\n * Check if error is a rate limit error\n */\nexport function isRateLimitError(error: StandardizedStripeError): boolean {\n  return error.code === STRIPE_ERROR_CODES.RATE_LIMIT\n}\n\n/**\n * Check if error is an infrastructure error\n */\nexport function isInfrastructureError(error: StandardizedStripeError): boolean {\n  return error.category === STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE\n}\n\n/**\n * Check if error is a configuration error\n */\nexport function isConfigurationError(error: StandardizedStripeError): boolean {\n  return error.category === STRIPE_ERROR_CATEGORIES.CONFIGURATION\n}\n\n/**\n * Check if error is critical severity\n */\nexport function isCriticalError(error: StandardizedStripeError): boolean {\n  return error.severity === STRIPE_ERROR_SEVERITIES.CRITICAL\n}\n\n/**\n * Check if error requires user action\n */\nexport function requiresUserAction(error: StandardizedStripeError): boolean {\n  const userActionErrorCodes = [\n    STRIPE_ERROR_CODES.CARD_DECLINED,\n    STRIPE_ERROR_CODES.EXPIRED_CARD,\n    STRIPE_ERROR_CODES.INCORRECT_CVC,\n    STRIPE_ERROR_CODES.INSUFFICIENT_FUNDS\n  ] as const\n  \n  return userActionErrorCodes.includes(error.code as typeof userActionErrorCodes[number])\n}\n\n// ========================\n// Stripe Object Guards\n// ========================\n\n/**\n * Check if value looks like a Stripe ID\n */\nexport function isStripeId(value: unknown, prefix?: string): value is string {\n  if (typeof value !== 'string') return false\n  \n  // All Stripe IDs start with a prefix followed by underscore\n  if (!value.includes('_')) return false\n  \n  if (prefix) {\n    return value.startsWith(prefix + '_')\n  }\n  \n  // Common Stripe ID prefixes\n  const commonPrefixes = [\n    'acct', 'ba', 'card', 'ch', 'cus', 'evt', 'fee', 'file', 'ic', 'in', 'inv',\n    'pi', 'pm', 'po', 'prod', 'py', 'req', 'rp', 'si', 'src', 'sub', 'tok',\n    'tr', 'txn', 'cs', 'price', 'whsec', 'sk', 'pk', 'rk'\n  ]\n  \n  return commonPrefixes.some(prefix => value.startsWith(prefix + '_'))\n}\n\n/**\n * Check if value is a Stripe customer ID\n */\nexport function isStripeCustomerId(value: unknown): value is string {\n  return isStripeId(value, 'cus')\n}\n\n/**\n * Check if value is a Stripe subscription ID\n */\nexport function isStripeSubscriptionId(value: unknown): value is string {\n  return isStripeId(value, 'sub')\n}\n\n/**\n * Check if value is a Stripe price ID\n */\nexport function isStripePriceId(value: unknown): value is string {\n  return isStripeId(value, 'price')\n}\n\n/**\n * Check if value is a Stripe payment method ID\n */\nexport function isStripePaymentMethodId(value: unknown): value is string {\n  return isStripeId(value, 'pm')\n}\n\n/**\n * Check if value is a Stripe checkout session ID\n */\nexport function isStripeCheckoutSessionId(value: unknown): value is string {\n  return isStripeId(value, 'cs')\n}\n\n/**\n * Check if value is a Stripe invoice ID\n */\nexport function isStripeInvoiceId(value: unknown): value is string {\n  return isStripeId(value, 'in')\n}\n\n/**\n * Check if value is a Stripe webhook secret\n */\nexport function isStripeWebhookSecret(value: unknown): value is string {\n  return typeof value === 'string' && value.startsWith('whsec_')\n}\n\n/**\n * Check if value is a Stripe API key (secret)\n */\nexport function isStripeSecretKey(value: unknown): value is string {\n  return typeof value === 'string' && value.startsWith('sk_')\n}\n\n/**\n * Check if value is a Stripe publishable key\n */\nexport function isStripePublishableKey(value: unknown): value is string {\n  return typeof value === 'string' && value.startsWith('pk_')\n}\n\n// ========================\n// Validation Utilities\n// ========================\n\n/**\n * Validate email format for Stripe operations\n */\nexport function isValidEmail(value: unknown): value is string {\n  if (typeof value !== 'string') return false\n  \n  // Use bounded quantifiers to prevent ReDoS attacks\n  const emailRegex = /^[^\\s@]{1,64}@[^\\s@]{1,63}(?:\\.[^\\s@]{1,63})+$/\n  return emailRegex.test(value)\n}\n\n/**\n * Validate currency code (3-letter ISO)\n */\nexport function isValidCurrency(value: unknown): value is string {\n  if (typeof value !== 'string') return false\n  \n  return /^[A-Z]{3}$/.test(value.toUpperCase()) && value.length === 3\n}\n\n/**\n * Validate amount in cents (must be positive integer)\n */\nexport function isValidAmount(value: unknown): value is number {\n  return typeof value === 'number' && Number.isInteger(value) && value >= 0\n}\n\n/**\n * Validate URL format\n */\nexport function isValidUrl(value: unknown): value is string {\n  if (typeof value !== 'string') return false\n  \n  try {\n    new URL(value)\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Validate metadata object (string keys and values)\n */\nexport function isValidMetadata(value: unknown): value is Record<string, string> {\n  if (!value || typeof value !== 'object') return false\n  \n  const metadata = value as Record<string, unknown>\n  \n  return Object.entries(metadata).every(\n    ([key, val]) => typeof key === 'string' && typeof val === 'string'\n  )\n}\n\n// ========================\n// Export All Guards\n// ========================\n\n/**\n * Comprehensive type guard collection for external use\n */\nexport const StripeTypeGuards = {\n  // Primitive guards\n  isPlanType,\n  isBillingPeriod,\n  isSubscriptionStatus,\n  isWebhookEventType,\n  isStripeErrorCode,\n  isStripeDeclineCode,\n  isStripeErrorCategory,\n  isStripeErrorSeverity,\n  isStripeApiVersion,\n  \n  // Complex type guards\n  isStandardizedStripeError,\n  isStripeWebhookEvent,\n  isPaymentMethod,\n  isUserSubscription,\n  isPlanConfig,\n  isUsageMetrics,\n  isStripeConfig,\n  isCreateCheckoutSessionParams,\n  isCreatePortalSessionParams,\n  isStripeSuccessResponse,\n  isStripeErrorResponse,\n  \n  // Error classification\n  isRetryableError,\n  isCardError,\n  isRateLimitError,\n  isInfrastructureError,\n  isConfigurationError,\n  isCriticalError,\n  requiresUserAction,\n  \n  // Stripe ID guards\n  isStripeId,\n  isStripeCustomerId,\n  isStripeSubscriptionId,\n  isStripePriceId,\n  isStripePaymentMethodId,\n  isStripeCheckoutSessionId,\n  isStripeInvoiceId,\n  isStripeWebhookSecret,\n  isStripeSecretKey,\n  isStripePublishableKey,\n  \n  // Validation utilities\n  isValidEmail,\n  isValidCurrency,\n  isValidAmount,\n  isValidUrl,\n  isValidMetadata\n} as const"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1731, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/currency.ts"],"sourcesContent":["/**\n * Currency and price formatting utilities for consistent display across the application\n * Consolidates multiple formatPrice implementations into a single shared utility\n */\n\nexport type BillingInterval = 'monthly' | 'annual' | 'month' | 'year'\nexport type CurrencyCode = 'USD' | 'EUR' | 'GBP' | 'CAD' | 'AUD'\n\nexport interface CurrencyFormatOptions {\n  locale?: string\n  currency?: CurrencyCode\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  compact?: boolean\n}\n\nexport interface PriceFormatOptions extends CurrencyFormatOptions {\n  interval?: BillingInterval\n  showInterval?: boolean\n  fromCents?: boolean\n}\n\n/**\n * Core currency formatter with flexible options\n */\nexport const formatCurrency = (\n  amount: number,\n  options: CurrencyFormatOptions = {}\n): string => {\n  const {\n    locale = 'en-US',\n    currency = 'USD',\n    minimumFractionDigits = 0,\n    maximumFractionDigits = 2,\n    compact = false\n  } = options\n\n  const formatter = new Intl.NumberFormat(locale, {\n    style: 'currency',\n    currency,\n    minimumFractionDigits,\n    maximumFractionDigits,\n    notation: compact ? 'compact' : 'standard',\n    compactDisplay: 'short'\n  })\n\n  return formatter.format(amount)\n}\n\n/**\n * Format price with special handling for Free/Custom and intervals\n * Consolidates all formatPrice implementations across the codebase\n */\nexport const formatPrice = (\n  amount: number,\n  options: PriceFormatOptions = {}\n): string => {\n  const {\n    interval,\n    showInterval = true,\n    fromCents = false,\n    currency = 'USD',\n    minimumFractionDigits,\n    maximumFractionDigits,\n    ...formatOptions\n  } = options\n\n  // Handle special values\n  if (amount === 0) return 'Free'\n  if (amount === -1) return 'Custom'\n\n  // Convert from cents if needed\n  const dollarAmount = fromCents ? amount / 100 : amount\n\n  // Determine fraction digits based on amount if not specified\n  const shouldShowDecimals = fromCents ? amount % 100 !== 0 : dollarAmount % 1 !== 0\n  const finalMinFractionDigits = minimumFractionDigits ?? (shouldShowDecimals ? 2 : 0)\n  const finalMaxFractionDigits = maximumFractionDigits ?? (shouldShowDecimals ? 2 : 0)\n\n  // Format the currency\n  const formatted = formatCurrency(dollarAmount, {\n    currency,\n    minimumFractionDigits: finalMinFractionDigits,\n    maximumFractionDigits: finalMaxFractionDigits,\n    ...formatOptions\n  })\n\n  // Add interval suffix if requested\n  if (showInterval && interval) {\n    const suffix = getIntervalSuffix(interval)\n    return `${formatted}${suffix}`\n  }\n\n  return formatted\n}\n\n/**\n * Get interval suffix for pricing display\n */\nexport const getIntervalSuffix = (interval: BillingInterval): string => {\n  switch (interval) {\n    case 'monthly':\n    case 'month':\n      return '/mo'\n    case 'annual':\n    case 'year':\n      return '/yr'\n    default:\n      return ''\n  }\n}\n\n/**\n * Format large numbers with K, M, B suffixes\n */\nexport const formatCompactCurrency = (\n  amount: number,\n  currency: CurrencyCode = 'USD'\n): string => {\n  return formatCurrency(amount, { \n    compact: true, \n    maximumFractionDigits: 1,\n    currency \n  })\n}\n\n/**\n * Format percentage with consistent styling\n */\nexport const formatPercentage = (\n  value: number,\n  options: {\n    minimumFractionDigits?: number\n    maximumFractionDigits?: number\n  } = {}\n): string => {\n  const { minimumFractionDigits = 0, maximumFractionDigits = 1 } = options\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'percent',\n    minimumFractionDigits,\n    maximumFractionDigits\n  })\n\n  return formatter.format(value / 100)\n}\n\n/**\n * Format numbers with thousand separators\n */\nexport const formatNumber = (\n  value: number,\n  options: {\n    minimumFractionDigits?: number\n    maximumFractionDigits?: number\n    compact?: boolean\n  } = {}\n): string => {\n  const {\n    minimumFractionDigits = 0,\n    maximumFractionDigits = 0,\n    compact = false\n  } = options\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    minimumFractionDigits,\n    maximumFractionDigits,\n    notation: compact ? 'compact' : 'standard',\n    compactDisplay: 'short'\n  })\n\n  return formatter.format(value)\n}\n\n/**\n * Format currency change with proper +/- indicators\n */\nexport const formatCurrencyChange = (\n  amount: number,\n  showSign = true,\n  currency: CurrencyCode = 'USD'\n): string => {\n  const formatted = formatCurrency(Math.abs(amount), { currency })\n  if (!showSign) return formatted\n\n  return amount >= 0 ? `+${formatted}` : `-${formatted}`\n}\n\n/**\n * Format percentage change with proper +/- indicators\n */\nexport const formatPercentageChange = (\n  value: number,\n  showSign = true\n): string => {\n  const formatted = formatPercentage(Math.abs(value))\n  if (!showSign) return formatted\n\n  return value >= 0 ? `+${formatted}` : `-${formatted}`\n}\n\n/**\n * Get currency display for dashboard cards\n */\nexport const getDashboardCurrency = (\n  amount: number,\n  currency: CurrencyCode = 'USD'\n): {\n  value: string\n  compact: string\n  raw: number\n} => {\n  return {\n    value: formatCurrency(amount, { currency }),\n    compact: formatCompactCurrency(amount, currency),\n    raw: amount\n  }\n}\n\n/**\n * Get percentage display with color coding\n */\nexport const getDashboardPercentage = (\n  value: number\n): {\n  value: string\n  color: string\n  trend: 'positive' | 'negative' | 'neutral'\n} => {\n  let trend: 'positive' | 'negative' | 'neutral'\n  if (value > 0) {\n    trend = 'positive'\n  } else if (value < 0) {\n    trend = 'negative'\n  } else {\n    trend = 'neutral'\n  }\n\n  let color: string\n  if (trend === 'positive') {\n    color = 'text-green-600'\n  } else if (trend === 'negative') {\n    color = 'text-red-600'\n  } else {\n    color = 'text-muted-foreground'\n  }\n\n  return {\n    value: formatPercentage(value),\n    color,\n    trend\n  }\n}\n\n/**\n * Collection rate status helper\n */\nexport const getCollectionRateStatus = (\n  rate: number\n): {\n  status: string\n  color: string\n  icon: string\n} => {\n  if (rate >= 95) {\n    return { status: 'Excellent', color: 'text-green-600', icon: '🎯' }\n  } else if (rate >= 85) {\n    return { status: 'Good', color: 'text-blue-600', icon: '👍' }\n  } else if (rate >= 70) {\n    return { status: 'Fair', color: 'text-orange-600', icon: '⚠️' }\n  } else {\n    return { status: 'Poor', color: 'text-red-600', icon: '🔻' }\n  }\n}\n\n// Legacy aliases for backward compatibility\nexport const formatPriceFromCents = (priceInCents: number, currency: CurrencyCode = 'USD'): string => {\n  return formatPrice(priceInCents, { fromCents: true, currency, showInterval: false })\n}\n\nexport const formatPriceWithInterval = (\n  amount: number, \n  interval: BillingInterval,\n  fromCents = false\n): string => {\n  return formatPrice(amount, { interval, fromCents })\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1927, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/stripe-utils.ts"],"sourcesContent":["/**\n * Stripe Utility Functions\n *\n * Helper functions for common Stripe operations, error handling, and data transformations.\n * Provides consistent behavior across frontend and backend implementations.\n *\n * @fileoverview Utility functions for Stripe integration\n */\n\nimport {\n  type StripeErrorCode,\n  type StripeErrorCategory,\n  type StripeErrorSeverity,\n  type StandardizedStripeError,\n  type StripeRetryConfig,\n  DEFAULT_STRIPE_RETRY_CONFIG,\n  ERROR_CATEGORY_MAPPING,\n  ERROR_SEVERITY_MAPPING,\n  RETRYABLE_ERROR_CODES,\n  type PlanType,\n  PLAN_TYPES,\n  type BillingPeriod,\n  BILLING_PERIODS,\n  type SubscriptionStatus,\n  type WebhookEventType,\n  type ClientSafeStripeError,\n  type StripeErrorAnalytics,\n  STRIPE_ERROR_CATEGORIES,\n  STRIPE_ERROR_SEVERITIES\n} from './stripe'\nimport { isStandardizedStripeError } from './stripe-guards'\n\n// Import removed - functions are not used in this file\n\n// ========================\n// Error Handling Utilities\n// ========================\n\n/**\n * Generate a unique error ID for tracking and debugging\n */\nexport function generateErrorId(): string {\n  const timestamp = Date.now().toString(36)\n  const random = Math.random().toString(36).substring(2, 8)\n  return `stripe_error_${timestamp}_${random}`\n}\n\n/**\n * Get error category from error code\n */\nexport function getErrorCategory(code: StripeErrorCode): StripeErrorCategory {\n  return ERROR_CATEGORY_MAPPING[code] || STRIPE_ERROR_CATEGORIES.UNKNOWN\n}\n\n/**\n * Get error severity from error code\n */\nexport function getErrorSeverity(code: StripeErrorCode): StripeErrorSeverity {\n  return ERROR_SEVERITY_MAPPING[code] || STRIPE_ERROR_SEVERITIES.MEDIUM\n}\n\n/**\n * Check if error code is retryable\n */\nexport function isRetryableErrorCode(code: StripeErrorCode): boolean {\n  return RETRYABLE_ERROR_CODES.includes(code)\n}\n\n/**\n * Calculate retry delay with exponential backoff and jitter\n */\nexport function calculateRetryDelay(\n  attemptCount: number,\n  config: Partial<StripeRetryConfig> = {}\n): number {\n  const finalConfig = { ...DEFAULT_STRIPE_RETRY_CONFIG, ...config }\n\n  const exponentialDelay = finalConfig.baseDelayMs * Math.pow(finalConfig.exponentialBase, attemptCount - 1)\n  const delayWithJitter = exponentialDelay + (Math.random() * finalConfig.jitterMs)\n\n  return Math.min(delayWithJitter, finalConfig.maxDelayMs)\n}\n\n/**\n * Convert StandardizedStripeError to client-safe version\n */\nexport function toClientSafeError(error: StandardizedStripeError): ClientSafeStripeError {\n  if (!isStandardizedStripeError(error)) {\n    throw new Error('Invalid StandardizedStripeError provided')\n  }\n\n  return {\n    code: error.code,\n    userMessage: error.userMessage,\n    retryable: error.retryable,\n    retryAfter: error.retryAfter,\n    errorId: error.errorId,\n    category: error.category,\n    severity: error.severity\n  }\n}\n\n/**\n * Generate analytics data from error\n */\nexport function generateErrorAnalytics(error: StandardizedStripeError): StripeErrorAnalytics {\n  const category = getErrorCategory(error.code)\n  const severity = getErrorSeverity(error.code)\n\n  // Determine if action is required based on error type\n  const actionRequired =\n    severity === STRIPE_ERROR_SEVERITIES.CRITICAL ||\n    category === STRIPE_ERROR_CATEGORIES.CONFIGURATION\n\n  // Determine if should escalate to Stripe support\n  const escalateToStripe =\n    category === STRIPE_ERROR_CATEGORIES.STRIPE_SERVICE ||\n    (category === STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE && severity === STRIPE_ERROR_SEVERITIES.HIGH)\n\n  return {\n    category,\n    severity,\n    actionRequired,\n    escalateToStripe,\n    affectedUsers: 1, // Default to 1, can be updated based on context\n    errorRate: 0, // To be calculated by monitoring system\n    avgResponseTime: 0 // To be calculated by monitoring system\n  }\n}\n\n/**\n * Create a standardized error from partial information\n */\nexport function createStandardizedError(\n  code: StripeErrorCode,\n  message: string,\n  context: {\n    operation: string\n    resource: string\n    userId?: string\n    requestId?: string\n    metadata?: Record<string, unknown>\n  },\n  options: {\n    userMessage?: string\n    details?: string\n    retryAfter?: number\n  } = {}\n): StandardizedStripeError {\n  const errorId = generateErrorId()\n  const category = getErrorCategory(code)\n  const severity = getErrorSeverity(code)\n  const retryable = isRetryableErrorCode(code)\n\n  return {\n    code,\n    message,\n    userMessage: options.userMessage || generateUserMessage(code),\n    details: options.details,\n    errorId,\n    category,\n    severity,\n    retryable,\n    retryAfter: options.retryAfter,\n    context: {\n      ...context,\n      timestamp: new Date()\n    }\n  }\n}\n\n/**\n * Generate user-friendly error messages\n */\nexport function generateUserMessage(code: StripeErrorCode): string {\n  const userMessages: Record<StripeErrorCode, string> = {\n    card_declined: 'Your card was declined. Please try a different payment method.',\n    expired_card: 'Your card has expired. Please update your payment information.',\n    incorrect_cvc: 'The security code is incorrect. Please check and try again.',\n    incorrect_number: 'The card number is incorrect. Please check and try again.',\n    insufficient_funds: 'Your card has insufficient funds. Please try a different card.',\n    invalid_expiry_month: 'The expiration month is invalid. Please check and try again.',\n    invalid_expiry_year: 'The expiration year is invalid. Please check and try again.',\n    invalid_number: 'The card number is invalid. Please check and try again.',\n    processing_error: 'There was an error processing your payment. Please try again.',\n    rate_limit: 'Too many requests. Please wait a moment and try again.',\n    invalid_request_error: 'There was an error with your request. Please try again.',\n    missing: 'Required information is missing. Please check your details.',\n    invalid: 'Some information is invalid. Please check your details.',\n    api_connection_error: 'Unable to connect to payment processor. Please try again.',\n    api_error: 'Payment processing is temporarily unavailable. Please try again.',\n    authentication_error: 'Authentication failed. Please contact support.',\n    permission_error: 'Access denied. Please contact support.',\n    idempotency_error: 'Duplicate request detected. Please try again.',\n    customer_not_found: 'Customer account not found. Please contact support.',\n    subscription_not_found: 'Subscription not found. Please contact support.',\n    invalid_price_id: 'Invalid pricing information. Please contact support.',\n    webhook_signature_invalid: 'Security validation failed. Please contact support.',\n    configuration_error: 'Payment system configuration error. Please contact support.'\n  }\n\n  return userMessages[code] || 'An unexpected error occurred. Please try again or contact support.'\n}\n\n// ========================\n// Plan and Pricing Utilities\n// ========================\n\n/**\n * Get plan type from Stripe price ID\n */\nexport function getPlanTypeFromPriceId(priceId: string): PlanType | null {\n  // This would typically map to your actual Stripe price IDs\n  // For now, we'll use pattern matching\n  const lowerPriceId = priceId.toLowerCase()\n\n  if (lowerPriceId.includes('starter')) return PLAN_TYPES.STARTER\n  if (lowerPriceId.includes('growth')) return PLAN_TYPES.GROWTH\n  if (lowerPriceId.includes('tenantflow_max') || lowerPriceId.includes('tenantflow')) return PLAN_TYPES.TENANTFLOW_MAX\n  if (lowerPriceId.includes('free') || lowerPriceId.includes('trial')) return PLAN_TYPES.FREETRIAL\n\n  return null\n}\n\n/**\n * Get billing period from Stripe price ID\n */\nexport function getBillingPeriodFromPriceId(priceId: string): BillingPeriod | null {\n  const lowerPriceId = priceId.toLowerCase()\n\n  if (lowerPriceId.includes('monthly') || lowerPriceId.includes('month')) {\n    return BILLING_PERIODS.MONTHLY\n  }\n  if (lowerPriceId.includes('annual') || lowerPriceId.includes('year')) {\n    return BILLING_PERIODS.ANNUAL\n  }\n\n  return null\n}\n\n/**\n * Format price for display\n */\nexport function formatPrice(\n  amount: number,\n  currency = 'USD',\n  interval?: BillingPeriod\n): string {\n  // Import dynamically to avoid circular dependency\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const { formatPrice: sharedFormatPrice } = require('../utils/currency')\n  const intervalMapping: Record<string, 'monthly' | 'annual'> = {\n    [BILLING_PERIODS.MONTHLY]: 'monthly',\n    [BILLING_PERIODS.ANNUAL]: 'annual'\n  }\n  \n  return sharedFormatPrice(amount, { \n    currency: currency.toUpperCase() as 'USD' | 'EUR' | 'GBP', \n    interval: interval ? intervalMapping[interval] : undefined,\n    fromCents: true,\n    showInterval: !!interval\n  })\n}\n\n/**\n * Calculate annual savings percentage\n */\nexport function calculateAnnualSavings(monthlyPrice: number, annualPrice: number): number {\n  const monthlyTotal = monthlyPrice * 12\n  const savings = monthlyTotal - annualPrice\n  return Math.round((savings / monthlyTotal) * 100)\n}\n\n/**\n * Get plan display name\n */\nexport function getPlanDisplayName(planType: PlanType): string {\n  const displayNames: Record<PlanType, string> = {\n    [PLAN_TYPES.FREETRIAL]: 'Free Trial',\n    [PLAN_TYPES.STARTER]: 'Starter',\n    [PLAN_TYPES.GROWTH]: 'Growth',\n    [PLAN_TYPES.TENANTFLOW_MAX]: 'TenantFlow Max'\n  }\n\n  return displayNames[planType] || planType\n}\n\n// ========================\n// Subscription Utilities\n// ========================\n\n/**\n * Check if subscription is active\n */\nexport function isActiveSubscription(status: SubscriptionStatus): boolean {\n  return status === 'active' || status === 'trialing'\n}\n\n/**\n * Check if subscription is in grace period\n */\nexport function isInGracePeriod(status: SubscriptionStatus): boolean {\n  return status === 'past_due'\n}\n\n/**\n * Check if subscription needs attention\n */\nexport function needsAttention(status: SubscriptionStatus): boolean {\n  return ['past_due', 'unpaid', 'incomplete'].includes(status)\n}\n\n/**\n * Get subscription status display text\n */\nexport function getSubscriptionStatusDisplay(status: SubscriptionStatus): string {\n  const statusDisplay: Record<SubscriptionStatus, string> = {\n    incomplete: 'Setup Required',\n    incomplete_expired: 'Setup Expired',\n    trialing: 'Trial',\n    active: 'Active',\n    past_due: 'Past Due',\n    canceled: 'Canceled',\n    unpaid: 'Unpaid',\n    paused: 'Paused',\n    updating: 'Updating'\n  }\n\n  return statusDisplay[status] || status\n}\n\n/**\n * Calculate days until subscription expires\n */\nexport function getDaysUntilExpiry(currentPeriodEnd: Date | null): number | null {\n  if (!currentPeriodEnd) return null\n\n  const now = new Date()\n  const diffTime = currentPeriodEnd.getTime() - now.getTime()\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n\n  return Math.max(0, diffDays)\n}\n\n/**\n * Calculate trial days remaining\n */\nexport function getTrialDaysRemaining(trialEnd: Date | null): number | null {\n  if (!trialEnd) return null\n\n  const now = new Date()\n  const diffTime = trialEnd.getTime() - now.getTime()\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n\n  return Math.max(0, diffDays)\n}\n\n// ========================\n// Webhook Utilities\n// ========================\n\n/**\n * Extract relevant data from webhook event\n */\nexport function extractWebhookData<T = Record<string, unknown>>(\n  _eventType: WebhookEventType,\n  eventData: Record<string, unknown>\n): T {\n  // Cast to expected type - in practice, you'd want more specific typing\n  return eventData as T\n}\n\n/**\n * Check if webhook event should be processed\n */\nexport function shouldProcessWebhookEvent(\n  eventType: WebhookEventType,\n  supportedEvents: readonly WebhookEventType[]\n): boolean {\n  return supportedEvents.includes(eventType)\n}\n\n/**\n * Get webhook event priority for queue processing\n */\nexport function getWebhookEventPriority(eventType: WebhookEventType): 'high' | 'medium' | 'low' {\n  const highPriorityEvents: WebhookEventType[] = [\n    'invoice.payment_failed',\n    'customer.subscription.deleted',\n    'invoice.payment_succeeded'\n  ]\n\n  const mediumPriorityEvents: WebhookEventType[] = [\n    'customer.subscription.created',\n    'customer.subscription.updated',\n    'checkout.session.completed'\n  ]\n\n  if (highPriorityEvents.includes(eventType)) return 'high'\n  if (mediumPriorityEvents.includes(eventType)) return 'medium'\n  return 'low'\n}\n\n// ========================\n// Validation Utilities\n// ========================\n\n/**\n * Validate Stripe configuration completeness\n */\nexport function validateStripeConfig(config: {\n  secretKey?: string\n  publishableKey?: string\n  webhookSecret?: string\n}): { isValid: boolean; errors: string[] } {\n  const errors: string[] = []\n\n  if (!config.secretKey) {\n    errors.push('Secret key is required')\n  } else if (!config.secretKey.startsWith('sk_')) {\n    errors.push('Invalid secret key format')\n  }\n\n  if (!config.publishableKey) {\n    errors.push('Publishable key is required')\n  } else if (!config.publishableKey.startsWith('pk_')) {\n    errors.push('Invalid publishable key format')\n  }\n\n  if (config.secretKey && config.publishableKey) {\n    const secretEnv = config.secretKey.includes('_test_') ? 'test' : 'live'\n    const pubEnv = config.publishableKey.includes('_test_') ? 'test' : 'live'\n\n    if (secretEnv !== pubEnv) {\n      errors.push('Secret key and publishable key environment mismatch')\n    }\n  }\n\n  if (config.webhookSecret && !config.webhookSecret.startsWith('whsec_')) {\n    errors.push('Invalid webhook secret format')\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors\n  }\n}\n\n/**\n * Sanitize metadata for Stripe (remove invalid characters, limit length)\n */\nexport function sanitizeMetadata(\n  metadata: Record<string, unknown>\n): Record<string, string> {\n  const sanitized: Record<string, string> = {}\n\n  Object.entries(metadata).forEach(([key, value]) => {\n    // Convert to string and limit length (Stripe has limits)\n    const stringValue = String(value).substring(0, 500)\n    const sanitizedKey = key.substring(0, 40).replace(/\\W/g, '_')\n\n    if (sanitizedKey && stringValue) {\n      sanitized[sanitizedKey] = stringValue\n    }\n  })\n\n  return sanitized\n}\n\n/**\n * Generate idempotency key for Stripe requests\n */\nexport function generateIdempotencyKey(operation: string, params?: Record<string, unknown>): string {\n  const timestamp = Date.now()\n  const random = Math.random().toString(36).substring(2, 8)\n  const hash = params ? btoa(JSON.stringify(params)).substring(0, 8) : 'no_params'\n\n  return `${operation}_${timestamp}_${random}_${hash}`\n}\n\n// ========================\n// Export All Utilities\n// ========================\n\nexport const StripeUtils = {\n  // Error handling\n  generateErrorId,\n  getErrorCategory,\n  getErrorSeverity,\n  isRetryableErrorCode,\n  calculateRetryDelay,\n  toClientSafeError,\n  generateErrorAnalytics,\n  createStandardizedError,\n  generateUserMessage,\n\n  // Plan and pricing\n  getPlanTypeFromPriceId,\n  getBillingPeriodFromPriceId,\n  formatPrice,\n  calculateAnnualSavings,\n  getPlanDisplayName,\n\n  // Subscription\n  isActiveSubscription,\n  isInGracePeriod,\n  needsAttention,\n  getSubscriptionStatusDisplay,\n  getDaysUntilExpiry,\n  getTrialDaysRemaining,\n\n  // Webhook\n  extractWebhookData,\n  shouldProcessWebhookEvent,\n  getWebhookEventPriority,\n\n  // Validation\n  validateStripeConfig,\n  sanitizeMetadata,\n  generateIdempotencyKey\n} as const\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAED;AAqBA;;;AAWO,SAAS;IACd,MAAM,YAAY,KAAK,GAAG,GAAG,QAAQ,CAAC;IACtC,MAAM,SAAS,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;IACvD,OAAO,AAAC,gBAA4B,OAAb,WAAU,KAAU,OAAP;AACtC;AAKO,SAAS,iBAAiB,IAAqB;IACpD,OAAO,+IAAA,CAAA,yBAAsB,CAAC,KAAK,IAAI,+IAAA,CAAA,0BAAuB,CAAC,OAAO;AACxE;AAKO,SAAS,iBAAiB,IAAqB;IACpD,OAAO,+IAAA,CAAA,yBAAsB,CAAC,KAAK,IAAI,+IAAA,CAAA,0BAAuB,CAAC,MAAM;AACvE;AAKO,SAAS,qBAAqB,IAAqB;IACxD,OAAO,+IAAA,CAAA,wBAAqB,CAAC,QAAQ,CAAC;AACxC;AAKO,SAAS,oBACd,YAAoB;QACpB,SAAA,iEAAqC,CAAC;IAEtC,MAAM,cAAc;QAAE,GAAG,+IAAA,CAAA,8BAA2B;QAAE,GAAG,MAAM;IAAC;IAEhE,MAAM,mBAAmB,YAAY,WAAW,GAAG,KAAK,GAAG,CAAC,YAAY,eAAe,EAAE,eAAe;IACxG,MAAM,kBAAkB,mBAAoB,KAAK,MAAM,KAAK,YAAY,QAAQ;IAEhF,OAAO,KAAK,GAAG,CAAC,iBAAiB,YAAY,UAAU;AACzD;AAKO,SAAS,kBAAkB,KAA8B;IAC9D,IAAI,CAAC,CAAA,GAAA,yJAAA,CAAA,4BAAyB,AAAD,EAAE,QAAQ;QACrC,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO;QACL,MAAM,MAAM,IAAI;QAChB,aAAa,MAAM,WAAW;QAC9B,WAAW,MAAM,SAAS;QAC1B,YAAY,MAAM,UAAU;QAC5B,SAAS,MAAM,OAAO;QACtB,UAAU,MAAM,QAAQ;QACxB,UAAU,MAAM,QAAQ;IAC1B;AACF;AAKO,SAAS,uBAAuB,KAA8B;IACnE,MAAM,WAAW,iBAAiB,MAAM,IAAI;IAC5C,MAAM,WAAW,iBAAiB,MAAM,IAAI;IAE5C,sDAAsD;IACtD,MAAM,iBACJ,aAAa,+IAAA,CAAA,0BAAuB,CAAC,QAAQ,IAC7C,aAAa,+IAAA,CAAA,0BAAuB,CAAC,aAAa;IAEpD,iDAAiD;IACjD,MAAM,mBACJ,aAAa,+IAAA,CAAA,0BAAuB,CAAC,cAAc,IAClD,aAAa,+IAAA,CAAA,0BAAuB,CAAC,cAAc,IAAI,aAAa,+IAAA,CAAA,0BAAuB,CAAC,IAAI;IAEnG,OAAO;QACL;QACA;QACA;QACA;QACA,eAAe;QACf,WAAW;QACX,iBAAiB,EAAE,wCAAwC;IAC7D;AACF;AAKO,SAAS,wBACd,IAAqB,EACrB,OAAe,EACf,OAMC;QACD,UAAA,iEAII,CAAC;IAEL,MAAM,UAAU;IAChB,MAAM,WAAW,iBAAiB;IAClC,MAAM,WAAW,iBAAiB;IAClC,MAAM,YAAY,qBAAqB;IAEvC,OAAO;QACL;QACA;QACA,aAAa,QAAQ,WAAW,IAAI,oBAAoB;QACxD,SAAS,QAAQ,OAAO;QACxB;QACA;QACA;QACA;QACA,YAAY,QAAQ,UAAU;QAC9B,SAAS;YACP,GAAG,OAAO;YACV,WAAW,IAAI;QACjB;IACF;AACF;AAKO,SAAS,oBAAoB,IAAqB;IACvD,MAAM,eAAgD;QACpD,eAAe;QACf,cAAc;QACd,eAAe;QACf,kBAAkB;QAClB,oBAAoB;QACpB,sBAAsB;QACtB,qBAAqB;QACrB,gBAAgB;QAChB,kBAAkB;QAClB,YAAY;QACZ,uBAAuB;QACvB,SAAS;QACT,SAAS;QACT,sBAAsB;QACtB,WAAW;QACX,sBAAsB;QACtB,kBAAkB;QAClB,mBAAmB;QACnB,oBAAoB;QACpB,wBAAwB;QACxB,kBAAkB;QAClB,2BAA2B;QAC3B,qBAAqB;IACvB;IAEA,OAAO,YAAY,CAAC,KAAK,IAAI;AAC/B;AASO,SAAS,uBAAuB,OAAe;IACpD,2DAA2D;IAC3D,sCAAsC;IACtC,MAAM,eAAe,QAAQ,WAAW;IAExC,IAAI,aAAa,QAAQ,CAAC,YAAY,OAAO,+IAAA,CAAA,aAAU,CAAC,OAAO;IAC/D,IAAI,aAAa,QAAQ,CAAC,WAAW,OAAO,+IAAA,CAAA,aAAU,CAAC,MAAM;IAC7D,IAAI,aAAa,QAAQ,CAAC,qBAAqB,aAAa,QAAQ,CAAC,eAAe,OAAO,+IAAA,CAAA,aAAU,CAAC,cAAc;IACpH,IAAI,aAAa,QAAQ,CAAC,WAAW,aAAa,QAAQ,CAAC,UAAU,OAAO,+IAAA,CAAA,aAAU,CAAC,SAAS;IAEhG,OAAO;AACT;AAKO,SAAS,4BAA4B,OAAe;IACzD,MAAM,eAAe,QAAQ,WAAW;IAExC,IAAI,aAAa,QAAQ,CAAC,cAAc,aAAa,QAAQ,CAAC,UAAU;QACtE,OAAO,+IAAA,CAAA,kBAAe,CAAC,OAAO;IAChC;IACA,IAAI,aAAa,QAAQ,CAAC,aAAa,aAAa,QAAQ,CAAC,SAAS;QACpE,OAAO,+IAAA,CAAA,kBAAe,CAAC,MAAM;IAC/B;IAEA,OAAO;AACT;AAKO,SAAS,YACd,MAAc;QACd,WAAA,iEAAW,OACX;IAEA,kDAAkD;IAClD,iEAAiE;IACjE,MAAM,EAAE,aAAa,iBAAiB,EAAE;IACxC,MAAM,kBAAwD;QAC5D,CAAC,+IAAA,CAAA,kBAAe,CAAC,OAAO,CAAC,EAAE;QAC3B,CAAC,+IAAA,CAAA,kBAAe,CAAC,MAAM,CAAC,EAAE;IAC5B;IAEA,OAAO,kBAAkB,QAAQ;QAC/B,UAAU,SAAS,WAAW;QAC9B,UAAU,WAAW,eAAe,CAAC,SAAS,GAAG;QACjD,WAAW;QACX,cAAc,CAAC,CAAC;IAClB;AACF;AAKO,SAAS,uBAAuB,YAAoB,EAAE,WAAmB;IAC9E,MAAM,eAAe,eAAe;IACpC,MAAM,UAAU,eAAe;IAC/B,OAAO,KAAK,KAAK,CAAC,AAAC,UAAU,eAAgB;AAC/C;AAKO,SAAS,mBAAmB,QAAkB;IACnD,MAAM,eAAyC;QAC7C,CAAC,+IAAA,CAAA,aAAU,CAAC,SAAS,CAAC,EAAE;QACxB,CAAC,+IAAA,CAAA,aAAU,CAAC,OAAO,CAAC,EAAE;QACtB,CAAC,+IAAA,CAAA,aAAU,CAAC,MAAM,CAAC,EAAE;QACrB,CAAC,+IAAA,CAAA,aAAU,CAAC,cAAc,CAAC,EAAE;IAC/B;IAEA,OAAO,YAAY,CAAC,SAAS,IAAI;AACnC;AASO,SAAS,qBAAqB,MAA0B;IAC7D,OAAO,WAAW,YAAY,WAAW;AAC3C;AAKO,SAAS,gBAAgB,MAA0B;IACxD,OAAO,WAAW;AACpB;AAKO,SAAS,eAAe,MAA0B;IACvD,OAAO;QAAC;QAAY;QAAU;KAAa,CAAC,QAAQ,CAAC;AACvD;AAKO,SAAS,6BAA6B,MAA0B;IACrE,MAAM,gBAAoD;QACxD,YAAY;QACZ,oBAAoB;QACpB,UAAU;QACV,QAAQ;QACR,UAAU;QACV,UAAU;QACV,QAAQ;QACR,QAAQ;QACR,UAAU;IACZ;IAEA,OAAO,aAAa,CAAC,OAAO,IAAI;AAClC;AAKO,SAAS,mBAAmB,gBAA6B;IAC9D,IAAI,CAAC,kBAAkB,OAAO;IAE9B,MAAM,MAAM,IAAI;IAChB,MAAM,WAAW,iBAAiB,OAAO,KAAK,IAAI,OAAO;IACzD,MAAM,WAAW,KAAK,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,KAAK,EAAE;IAE1D,OAAO,KAAK,GAAG,CAAC,GAAG;AACrB;AAKO,SAAS,sBAAsB,QAAqB;IACzD,IAAI,CAAC,UAAU,OAAO;IAEtB,MAAM,MAAM,IAAI;IAChB,MAAM,WAAW,SAAS,OAAO,KAAK,IAAI,OAAO;IACjD,MAAM,WAAW,KAAK,IAAI,CAAC,WAAW,CAAC,OAAO,KAAK,KAAK,EAAE;IAE1D,OAAO,KAAK,GAAG,CAAC,GAAG;AACrB;AASO,SAAS,mBACd,UAA4B,EAC5B,SAAkC;IAElC,uEAAuE;IACvE,OAAO;AACT;AAKO,SAAS,0BACd,SAA2B,EAC3B,eAA4C;IAE5C,OAAO,gBAAgB,QAAQ,CAAC;AAClC;AAKO,SAAS,wBAAwB,SAA2B;IACjE,MAAM,qBAAyC;QAC7C;QACA;QACA;KACD;IAED,MAAM,uBAA2C;QAC/C;QACA;QACA;KACD;IAED,IAAI,mBAAmB,QAAQ,CAAC,YAAY,OAAO;IACnD,IAAI,qBAAqB,QAAQ,CAAC,YAAY,OAAO;IACrD,OAAO;AACT;AASO,SAAS,qBAAqB,MAIpC;IACC,MAAM,SAAmB,EAAE;IAE3B,IAAI,CAAC,OAAO,SAAS,EAAE;QACrB,OAAO,IAAI,CAAC;IACd,OAAO,IAAI,CAAC,OAAO,SAAS,CAAC,UAAU,CAAC,QAAQ;QAC9C,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,CAAC,OAAO,cAAc,EAAE;QAC1B,OAAO,IAAI,CAAC;IACd,OAAO,IAAI,CAAC,OAAO,cAAc,CAAC,UAAU,CAAC,QAAQ;QACnD,OAAO,IAAI,CAAC;IACd;IAEA,IAAI,OAAO,SAAS,IAAI,OAAO,cAAc,EAAE;QAC7C,MAAM,YAAY,OAAO,SAAS,CAAC,QAAQ,CAAC,YAAY,SAAS;QACjE,MAAM,SAAS,OAAO,cAAc,CAAC,QAAQ,CAAC,YAAY,SAAS;QAEnE,IAAI,cAAc,QAAQ;YACxB,OAAO,IAAI,CAAC;QACd;IACF;IAEA,IAAI,OAAO,aAAa,IAAI,CAAC,OAAO,aAAa,CAAC,UAAU,CAAC,WAAW;QACtE,OAAO,IAAI,CAAC;IACd;IAEA,OAAO;QACL,SAAS,OAAO,MAAM,KAAK;QAC3B;IACF;AACF;AAKO,SAAS,iBACd,QAAiC;IAEjC,MAAM,YAAoC,CAAC;IAE3C,OAAO,OAAO,CAAC,UAAU,OAAO,CAAC;YAAC,CAAC,KAAK,MAAM;QAC5C,yDAAyD;QACzD,MAAM,cAAc,OAAO,OAAO,SAAS,CAAC,GAAG;QAC/C,MAAM,eAAe,IAAI,SAAS,CAAC,GAAG,IAAI,OAAO,CAAC,OAAO;QAEzD,IAAI,gBAAgB,aAAa;YAC/B,SAAS,CAAC,aAAa,GAAG;QAC5B;IACF;IAEA,OAAO;AACT;AAKO,SAAS,uBAAuB,SAAiB,EAAE,MAAgC;IACxF,MAAM,YAAY,KAAK,GAAG;IAC1B,MAAM,SAAS,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;IACvD,MAAM,OAAO,SAAS,KAAK,KAAK,SAAS,CAAC,SAAS,SAAS,CAAC,GAAG,KAAK;IAErE,OAAO,AAAC,GAAe,OAAb,WAAU,KAAgB,OAAb,WAAU,KAAa,OAAV,QAAO,KAAQ,OAAL;AAChD;AAMO,MAAM,cAAc;IACzB,iBAAiB;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA,mBAAmB;IACnB;IACA;IACA;IACA;IACA;IAEA,eAAe;IACf;IACA;IACA;IACA;IACA;IACA;IAEA,UAAU;IACV;IACA;IACA;IAEA,aAAa;IACb;IACA;IACA;AACF","debugId":null}},
    {"offset": {"line": 2273, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/billing.ts"],"sourcesContent":["/**\n * Billing and subscription management types\n * All types related to subscriptions, plans, invoices, and billing\n */\n\n// Import consolidated types from stripe.ts\nimport type { PlanType, BillingPeriod, StripeWebhookEvent } from './stripe'\n\nexport const PLAN_TYPE = {\n  FREETRIAL: 'FREETRIAL',\n  STARTER: 'STARTER', \n  GROWTH: 'GROWTH',\n  TENANTFLOW_MAX: 'TENANTFLOW_MAX'\n} as const\n\nexport type SubStatus = \n  | 'incomplete'\n  | 'incomplete_expired' \n  | 'trialing'\n  | 'active'\n  | 'past_due'\n  | 'canceled'\n  | 'unpaid'\n  | 'paused'\n\nexport interface Plan {\n  id: PlanType\n  uiId: string // Added for UI component compatibility\n  name: string\n  description: string\n  price: {\n    monthly: number\n    annual: number\n  }\n  features: string[]\n  propertyLimit: number\n  storageLimit: number\n  apiCallLimit: number\n  priority: boolean\n  subscription?: string\n  stripePriceIds: {\n    monthly: string | null\n    annual: string | null\n  }\n  ANNUALPrice?: number\n}\n\n // Backend service-specific plan interface for simplified operations\nexport interface ServicePlan {\n  id: PlanType\n  name: string\n  price: number\n  propertyLimit: number\n  stripePriceIds: {\n    monthly: string | null\n    annual: string | null\n  }\n}\n\n// Plan configuration interface\nexport interface PlanConfig {\n  id: string\n  name: string\n  description: string\n  price: {\n    monthly: number\n    annual: number\n  }\n  features: string[]\n  propertyLimit: number\n  storageLimit: number\n  apiCallLimit: number\n  priority: boolean\n}\n\n// User plan type that extends plan config\nexport interface UserPlan extends PlanConfig {\n  billingPeriod: BillingPeriod\n  status: SubStatus\n  currentPeriodStart?: Date\n  currentPeriodEnd?: Date\n}\n\n// Plan display helpers\nexport const getPlanTypeLabel = (plan: PlanType): string => {\n  const labels: Record<PlanType, string> = {\n    FREETRIAL: 'Free Trial',\n    STARTER: 'Starter',\n    GROWTH: 'Growth',\n    TENANTFLOW_MAX: 'TenantFlow Max'\n  }\n  return labels[plan] || plan\n}\n\n// Subscription entity types\nexport interface Subscription {\n  id: string\n  userId: string\n  plan: string\n  status: string\n  startDate: Date\n  endDate: Date | null\n  cancelledAt: Date | null\n  stripeCustomerId: string | null\n  stripeSubscriptionId: string | null\n  stripePriceId: string | null\n  planId: string | null\n  billingPeriod: BillingPeriod | null\n  currentPeriodStart: Date | null\n  currentPeriodEnd: Date | null\n  trialStart: Date | null\n  trialEnd: Date | null\n  cancelAtPeriodEnd: boolean | null\n  canceledAt: Date | null\n  createdAt: Date\n  updatedAt: Date\n}\n\nexport interface Invoice {\n  id: string\n  userId: string\n  subscriptionId: string | null\n  stripeInvoiceId: string\n  amountPaid: number\n  amountDue: number\n  currency: string\n  status: string\n  invoiceDate: Date\n  dueDate: Date | null\n  paidAt: Date | null\n  invoiceUrl: string | null\n  invoicePdf: string | null\n  description: string | null\n  createdAt: Date\n  updatedAt: Date\n}\n\n// Stripe configuration types - 4-tier system\nexport interface StripePricing {\n  id: string\n  priceFree: string\n  priceStarter: string\n  priceGrowth: string\n  priceEnterprise: string\n  productFree: string\n  productStarter: string\n  productGrowth: string\n  productEnterprise: string\n  pricingTableId: string\n  customerPortalUrl: string\n  isActive: boolean\n  createdAt: Date\n  updatedAt: Date\n}\n\n// Trial configuration for each product tier\nexport interface TrialConfig {\n  trialPeriodDays: number\n  trialEndBehavior: 'cancel' | 'pause' | 'require_payment'\n  collectPaymentMethod: boolean\n  reminderDaysBeforeEnd: number\n}\n\n// Product tier configuration\nexport interface ProductTierConfig {\n  id: PlanType\n  name: string\n  description: string\n  price: {\n    monthly: number\n    annual: number\n  }\n  trial: TrialConfig\n  features: string[]\n  limits: {\n    properties: number\n    units: number\n    users?: number\n    storage?: number // in GB\n    apiCalls?: number\n  }\n  support: 'email' | 'priority' | 'dedicated'\n  stripePriceIds: {\n    monthly: string | null\n    annual: string | null\n  }\n}\n\nexport interface WebhookEvent {\n  id: string\n  stripeEventId: string\n  eventType: string\n  processed: boolean\n  processingTime: number | null\n  errorMessage: string | null\n  retryCount: number\n  createdAt: Date\n  updatedAt: Date\n}\n\n// Note: Plan interface is now imported as BillingPlan from types-core\n\n// Simple usage metrics interface\nexport interface UsageMetrics {\n  properties: number\n  tenants?: number\n}\n\n// Billing history interface\nexport interface BillingHistory {\n  invoices: Invoice[]\n  totalSpent: number\n  currentBalance: number\n}\n\n// Subscription create request/response types\nexport interface SubscriptionCreateRequest {\n  planId: PlanType\n  paymentMethodId?: string\n}\n\nexport interface SubscriptionCreateResponse {\n  subscription: Subscription\n  clientSecret?: string\n  requiresPaymentMethod: boolean\n  success: boolean\n  subscriptionId?: string\n}\n\n// Customer portal types\nexport interface CustomerPortalRequest {\n  returnUrl?: string\n}\n\nexport interface CustomerPortalResponse {\n  url: string\n}\n\n// Direct subscription parameters (moved to api-inputs.ts)\n// Note: DirectSubscriptionParams is now available in @repo/shared/types/api-inputs\n\n// Stripe error handling types using official Stripe types\n// Note: These types are available when stripe package is installed (backend only)\nexport type StripeErrorType = \n  | 'card_error'\n  | 'rate_limit_error' \n  | 'invalid_request_error'\n  | 'api_error'\n  | 'api_connection_error'\n  | 'authentication_error'\n  | 'idempotency_error'\n\nexport interface StripeWebhookError {\n  type: StripeErrorType\n  message: string\n  stack?: string\n}\n\n// Stripe-specific backend types (consolidated from apps/backend/src/stripe/types)\n// \n// IMPLEMENTATION NOTE: For backend services, use official Stripe types directly:\n// \n// ```typescript\n// import Stripe from 'stripe'\n// \n// // Use official types for service methods:\n// async createCheckoutSession(params: CreateCheckoutSessionParams): Promise<Stripe.Checkout.Session>\n// async handleWebhook(event: Stripe.Event): Promise<void>\n// async createCustomer(params: Stripe.CustomerCreateParams): Promise<Stripe.Customer>\n// ```\n// \n// The types below are for shared contracts between frontend/backend\n// Note: Stripe types are conditionally imported only when available\n\n// Checkout session parameters - aligned with Stripe's API structure\nexport interface CreateCheckoutSessionParams {\n\tuserId: string\n\tplanType: PlanType\n\tbillingInterval: 'monthly' | 'annual'\n\tcollectPaymentMethod?: boolean\n\tsuccessUrl: string\n\tcancelUrl: string\n\tuiMode?: 'embedded' | 'hosted'\n\tpriceId?: string\n\t// Additional Stripe-compatible fields\n\tmode?: 'payment' | 'subscription' | 'setup'\n\tcurrency?: string\n\tlocale?: string\n}\n\nexport interface CreatePortalSessionParams {\n\tcustomerId: string\n\treturnUrl: string\n}\n\nexport interface SubscriptionData {\n\tuserId: string\n\tstripeCustomerId: string\n\tstripeSubscriptionId: string\n\tplanType: PlanType\n\tstatus: SubStatus\n\ttrialEndsAt?: Date\n\tcurrentPeriodEnd: Date\n\tcancelAtPeriodEnd: boolean\n}\n\n\nexport interface WebhookEventHandler {\n\t'customer.subscription.created': (event: StripeWebhookEvent) => Promise<void>\n\t'customer.subscription.updated': (event: StripeWebhookEvent) => Promise<void>\n\t'customer.subscription.deleted': (event: StripeWebhookEvent) => Promise<void>\n\t'customer.subscription.trial_will_end': (event: StripeWebhookEvent) => Promise<void>\n\t'customer.subscription.paused': (event: StripeWebhookEvent) => Promise<void>\n\t'customer.subscription.resumed': (event: StripeWebhookEvent) => Promise<void>\n\t'invoice.payment_succeeded': (event: StripeWebhookEvent) => Promise<void>\n\t'invoice.payment_failed': (event: StripeWebhookEvent) => Promise<void>\n\t'invoice.payment_action_required': (event: StripeWebhookEvent) => Promise<void>\n\t'invoice.upcoming': (event: StripeWebhookEvent) => Promise<void>\n\t'checkout.session.completed': (event: StripeWebhookEvent) => Promise<void>\n\t'payment_intent.requires_action': (event: StripeWebhookEvent) => Promise<void>\n\t'charge.failed': (event: StripeWebhookEvent) => Promise<void>\n}\n\nexport type WebhookEventType = keyof WebhookEventHandler\n\nexport const STRIPE_ERRORS = {\n\tCUSTOMER_NOT_FOUND: 'Customer not found',\n\tSUBSCRIPTION_NOT_FOUND: 'Subscription not found',\n\tINVALID_PRICE_ID: 'Invalid price ID',\n\tWEBHOOK_SIGNATURE_INVALID: 'Invalid webhook signature',\n\tCONFIGURATION_ERROR: 'Stripe configuration error',\n\tRATE_LIMIT_EXCEEDED: 'Rate limit exceeded',\n\tPAYMENT_DECLINED: 'Payment declined',\n\tAUTHENTICATION_FAILED: 'Authentication failed',\n\tINVALID_REQUEST: 'Invalid request parameters',\n\tAPI_CONNECTION_ERROR: 'API connection error',\n\tCARD_DECLINED: 'Card declined',\n\tPROCESSING_ERROR: 'Processing error'\n} as const\n\nexport interface PreviewInvoiceParams {\n\tuserId: string\n\tnewPriceId: string\n\tprorationDate?: Date\n}\n\nexport interface UpdateSubscriptionParams extends Record<string, unknown> {\n\tuserId: string\n\tnewPriceId: string\n\tprorationBehavior?: 'create_prorations' | 'none' | 'always_invoice'\n\tprorationDate?: Date\n\tallowIncomplete?: boolean\n\tplanId?: string\n}\n\n// Subscription upgrade/downgrade preview\nexport interface SubscriptionChangePreview {\n\tprorationAmount: number\n\timmediateCharge: number\n\tnextBillingAmount: number\n\tnextBillingDate: Date\n\tcreditApplied: number\n}\n\n// Stripe Element event types for frontend components\nexport interface StripeElementEvent {\n\telementType: string\n\tempty: boolean\n\tcomplete: boolean\n\terror?: {\n\t\ttype: string\n\t\tcode: string\n\t\tmessage: string\n\t}\n}\n\nexport interface StripeCardElementEvent extends StripeElementEvent {\n\tbrand?: string\n\tcountry?: string\n}\n\nexport interface StripePaymentElementEvent extends StripeElementEvent {\n\tvalue?: {\n\t\ttype: string\n\t}\n}\n\n// Generic event callback for Stripe elements\nexport type StripeElementEventCallback = (event: StripeElementEvent) => void\nexport type StripeCardElementEventCallback = (event: StripeCardElementEvent) => void  \nexport type StripePaymentElementEventCallback = (event: StripePaymentElementEvent) => void\n\n// ========================\n// Payment Method Types\n// ========================\n\n/**\n * Payment method type compatible with Stripe's PaymentMethod\n * Simplified version for shared usage between frontend and backend\n */\nexport interface PaymentMethod {\n  id: string\n  object: 'payment_method'\n  type: string\n  created: number\n  customer: string | null\n  livemode: boolean\n  metadata: Record<string, string>\n  card?: {\n    brand: string\n    last4: string\n    exp_month: number\n    exp_year: number\n    funding: string\n    country: string | null\n  }\n  billing_details: {\n    address: {\n      city: string | null\n      country: string | null\n      line1: string | null\n      line2: string | null\n      postal_code: string | null\n      state: string | null\n    }\n    email: string | null\n    name: string | null\n    phone: string | null\n  }\n}\n\n// ========================\n// Enhanced Usage & Metrics\n// ========================\n\n/**\n * Enhanced usage metrics with detailed tracking\n * Extends basic UsageMetrics with comprehensive usage data\n */\nexport interface UsageMetricsExtended extends UsageMetrics {\n  id: string\n  userId: string\n  month: string // YYYY-MM format\n  leaseGenerationsCount: number\n  createdAt: Date\n  updatedAt: Date\n}\n\n/**\n * Detailed usage metrics for comprehensive tracking\n * Used for dashboard analytics and billing calculations\n */\nexport interface DetailedUsageMetrics {\n  propertiesCount: number\n  tenantsCount: number\n  leasesCount: number\n  storageUsedMB: number\n  apiCallsCount: number\n  leaseGenerationsCount: number\n  month: string\n}\n\n/**\n * Plan limits interface for subscription enforcement\n * Defines the maximum allowed usage for each plan tier\n */\nexport interface PlanLimits {\n  properties: number\n  tenants: number\n  storage: number\n  apiCalls: number\n}\n\n/**\n * Limit checks interface for real-time validation\n * Indicates which limits have been exceeded\n */\nexport interface LimitChecks {\n  propertiesExceeded: boolean\n  tenantsExceeded: boolean\n  storageExceeded: boolean\n  apiCallsExceeded: boolean\n}\n\n/**\n * Combined usage data with limits and checks\n * Provides complete usage context with enforcement data\n */\nexport interface UsageData extends DetailedUsageMetrics {\n  limits: PlanLimits | null\n  limitChecks: LimitChecks | null\n}\n\n/**\n * Billing history event for audit trail\n * Tracks all billing-related activities and changes\n */\nexport interface BillingHistoryEvent {\n  id: string\n  userId: string\n  type:\n    | 'subscription_created'\n    | 'subscription_updated'\n    | 'subscription_canceled'\n    | 'payment_succeeded'\n    | 'payment_failed'\n    | 'invoice_created'\n  description: string\n  amount?: number\n  currency?: string\n  stripeEventId?: string\n  metadata?: Record<string, string | number | boolean>\n  createdAt: Date\n}\n\n\n// Local subscription data interface (renamed from useSubscription.ts to avoid conflicts)\nexport interface LocalSubscriptionData {\n  id: string\n  userId: string\n  status: string\n  planId: string | null\n  stripeSubscriptionId: string | null\n  stripeCustomerId: string | null\n  currentPeriodStart: Date | null\n  currentPeriodEnd: Date | null\n  cancelAtPeriodEnd: boolean | null\n  trialStart: Date | null\n  trialEnd: Date | null\n  createdAt: Date\n  updatedAt: Date\n}\n\n// Enhanced user plan interface (renamed from frontend to avoid conflicts)\nexport interface EnhancedUserPlan extends Omit<Plan, 'subscription'> {\n  id: keyof typeof PLAN_TYPE\n  billingPeriod: 'monthly' | 'annual'\n  status: string\n  subscription: LocalSubscriptionData | null\n  isActive: boolean\n  trialDaysRemaining: number\n  accessExpiresAt: Date | null\n  statusReason: string\n}\n"],"names":[],"mappings":"AAAA;;;CAGC,GAED,2CAA2C;;;;;;AAGpC,MAAM,YAAY;IACvB,WAAW;IACX,SAAS;IACT,QAAQ;IACR,gBAAgB;AAClB;AAuEO,MAAM,mBAAmB,CAAC;IAC/B,MAAM,SAAmC;QACvC,WAAW;QACX,SAAS;QACT,QAAQ;QACR,gBAAgB;IAClB;IACA,OAAO,MAAM,CAAC,KAAK,IAAI;AACzB;AAyOO,MAAM,gBAAgB;IAC5B,oBAAoB;IACpB,wBAAwB;IACxB,kBAAkB;IAClB,2BAA2B;IAC3B,qBAAqB;IACrB,qBAAqB;IACrB,kBAAkB;IAClB,uBAAuB;IACvB,iBAAiB;IACjB,sBAAsB;IACtB,eAAe;IACf,kBAAkB;AACnB","debugId":null}},
    {"offset": {"line": 2320, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/config/pricing.ts"],"sourcesContent":["/**\n * Pricing configuration for 4-tier subscription system\n * Defines products, trials, limits, and features for each tier\n */\n\nimport type { PlanType } from '../types/stripe'\nimport type { ProductTierConfig, TrialConfig } from '../types/billing'\n\n/**\n * Production-ready pricing configuration for TenantFlow\n * 4 Products: Free Trial, Starter, Growth, TenantFlow Max\n */\nexport const PRODUCT_TIERS: Record<PlanType, ProductTierConfig> = {\n  FREETRIAL: {\n    id: 'FREETRIAL',\n    name: 'Free Trial',\n    description: 'Perfect for trying out TenantFlow',\n    price: {\n      monthly: 0,\n      annual: 0\n    },\n    trial: {\n      trialPeriodDays: 14,\n      trialEndBehavior: 'cancel', // Cancel if no payment method after trial\n      collectPaymentMethod: false,\n      reminderDaysBeforeEnd: 3\n    },\n    features: [\n      'Up to 1 property',\n      'Up to 5 units',\n      'Basic tenant management',\n      'Email support',\n      'Mobile app access'\n    ],\n    limits: {\n      properties: 1,\n      units: 5,\n      users: 1,\n      storage: 1, // 1 GB\n      apiCalls: 1000\n    },\n    support: 'email',\n    stripePriceIds: {\n      monthly: null, // Free tier has no Stripe prices\n      annual: null\n    }\n  },\n\n  STARTER: {\n    id: 'STARTER',\n    name: 'Starter',\n    description: 'Great for small property managers',\n    price: {\n      monthly: 29,\n      annual: 290 // Save $58/year (2 months free)\n    },\n    trial: {\n      trialPeriodDays: 14,\n      trialEndBehavior: 'pause', // Pause subscription if no payment after trial\n      collectPaymentMethod: false,\n      reminderDaysBeforeEnd: 3\n    },\n    features: [\n      'Up to 5 properties',\n      'Up to 50 units',\n      'Advanced tenant management',\n      'Lease management',\n      'Maintenance tracking',\n      'Financial reporting',\n      'Priority email support',\n      'API access'\n    ],\n    limits: {\n      properties: 5,\n      units: 50,\n      users: 3,\n      storage: 10, // 10 GB\n      apiCalls: 10000\n    },\n    support: 'email',\n    stripePriceIds: {\n      monthly: 'price_1Rbnyk00PMlKUSP0oGJV2i1G',\n      annual: 'price_1Rbnyk00PMlKUSP0uS33sCq3'\n    }\n  },\n\n  GROWTH: {\n    id: 'GROWTH',\n    name: 'Growth',\n    description: 'Ideal for growing property management companies',\n    price: {\n      monthly: 79,\n      annual: 790 // Save $158/year (2 months free)\n    },\n    trial: {\n      trialPeriodDays: 14,\n      trialEndBehavior: 'pause',\n      collectPaymentMethod: false,\n      reminderDaysBeforeEnd: 3\n    },\n    features: [\n      'Up to 20 properties',\n      'Up to 200 units',\n      'Everything in Starter',\n      'Advanced analytics',\n      'Custom reports',\n      'Bulk operations',\n      'Team collaboration',\n      'Priority support',\n      'Advanced API access',\n      'Integrations'\n    ],\n    limits: {\n      properties: 20,\n      units: 200,\n      users: 10,\n      storage: 50, // 50 GB\n      apiCalls: 50000\n    },\n    support: 'priority',\n    stripePriceIds: {\n      monthly: 'price_1Rbnzv00PMlKUSP0fq5R5MNV',\n      annual: 'price_1Rbnzv00PMlKUSP0jIq3BxTy'\n    }\n  },\n\n  TENANTFLOW_MAX: {\n    id: 'TENANTFLOW_MAX',\n    name: 'TenantFlow Max',\n    description: 'For large property management operations',\n    price: {\n      monthly: 299, // Custom pricing available\n      annual: 2990 // Custom pricing available\n    },\n    trial: {\n      trialPeriodDays: 30, // Longer trial for tenantflow_max\n      trialEndBehavior: 'pause',\n      collectPaymentMethod: true, // Require payment method for tenantflow_max trials\n      reminderDaysBeforeEnd: 7\n    },\n    features: [\n      'Unlimited properties',\n      'Unlimited units',\n      'Everything in Growth',\n      'White-label options',\n      'Custom integrations',\n      'Dedicated account manager',\n      'SLA guarantee',\n      '24/7 phone support',\n      'Custom training',\n      'API rate limit bypass'\n    ],\n    limits: {\n      properties: -1, // Unlimited\n      units: -1, // Unlimited\n      users: -1, // Unlimited\n      storage: -1, // Unlimited\n      apiCalls: -1 // Unlimited\n    },\n    support: 'dedicated',\n    stripePriceIds: {\n      monthly: 'price_1Rbo0P00PMlKUSP0Isi7U1Wr',\n      annual: 'price_1Rbo0r00PMlKUSP0rzUhwgkO'\n    }\n  }\n}\n\n/**\n * Get product tier configuration by plan type\n */\nexport function getProductTier(planType: PlanType): ProductTierConfig {\n  const tier = PRODUCT_TIERS[planType]\n  if (!tier) {\n    throw new Error(`Product tier not found for plan type: ${planType}`)\n  }\n  return tier\n}\n\n/**\n * Get Stripe price ID for a plan and billing interval\n */\nexport function getStripePriceId(\n  planType: PlanType,\n  interval: 'monthly' | 'annual'\n): string | null {\n  const tier = PRODUCT_TIERS[planType]\n  if (!tier) return null\n  return tier.stripePriceIds[interval]\n}\n\n/**\n * Check if a plan has a free trial\n */\nexport function hasTrial(planType: PlanType): boolean {\n  const tier = PRODUCT_TIERS[planType]\n  if (!tier) return false\n  return tier.trial.trialPeriodDays > 0\n}\n\n/**\n * Get trial configuration for a plan\n */\nexport function getTrialConfig(planType: PlanType): TrialConfig | undefined {\n  const tier = PRODUCT_TIERS[planType]\n  return tier?.trial\n}\n\n/**\n * Check if user has exceeded plan limits\n */\nexport function checkPlanLimits(\n  planType: PlanType,\n  usage: {\n    properties?: number\n    units?: number\n    users?: number\n    storage?: number\n    apiCalls?: number\n  }\n): {\n  exceeded: boolean\n  limits: { type: string; current: number; limit: number }[]\n} {\n  const tier = PRODUCT_TIERS[planType]\n  const exceededLimits: { type: string; current: number; limit: number }[] = []\n\n  if (!tier) {\n    return { exceeded: false, limits: [] }\n  }\n\n  if (tier.limits.properties !== -1 && usage.properties && usage.properties > tier.limits.properties) {\n    exceededLimits.push({\n      type: 'properties',\n      current: usage.properties,\n      limit: tier.limits.properties\n    })\n  }\n\n  if (tier.limits.units !== -1 && usage.units && usage.units > tier.limits.units) {\n    exceededLimits.push({\n      type: 'units',\n      current: usage.units,\n      limit: tier.limits.units\n    })\n  }\n\n  if (tier.limits.users !== undefined && tier.limits.users !== -1 && usage.users && usage.users > tier.limits.users) {\n    exceededLimits.push({\n      type: 'users',\n      current: usage.users,\n      limit: tier.limits.users\n    })\n  }\n\n  if (tier.limits.storage !== undefined && tier.limits.storage !== -1 && usage.storage && usage.storage > tier.limits.storage) {\n    exceededLimits.push({\n      type: 'storage',\n      current: usage.storage,\n      limit: tier.limits.storage\n    })\n  }\n\n  if (tier.limits.apiCalls !== undefined && tier.limits.apiCalls !== -1 && usage.apiCalls && usage.apiCalls > tier.limits.apiCalls) {\n    exceededLimits.push({\n      type: 'apiCalls',\n      current: usage.apiCalls,\n      limit: tier.limits.apiCalls\n    })\n  }\n\n  return {\n    exceeded: exceededLimits.length > 0,\n    limits: exceededLimits\n  }\n}\n\n/**\n * Get recommended upgrade plan based on usage\n */\nexport function getRecommendedUpgrade(\n  currentPlan: PlanType,\n  usage: {\n    properties?: number\n    units?: number\n    users?: number\n  }\n): PlanType | null {\n  const planOrder: PlanType[] = ['FREETRIAL', 'STARTER', 'GROWTH', 'TENANTFLOW_MAX']\n  const currentIndex = planOrder.indexOf(currentPlan)\n\n  // Check each plan in order to find the first one that fits usage\n  for (let i = currentIndex + 1; i < planOrder.length; i++) {\n    const plan = planOrder[i]\n    if (!plan) continue // Skip if plan is undefined\n\n    const tier = PRODUCT_TIERS[plan]\n    if (!tier) continue // Skip if tier is undefined\n\n    const fitsUsage =\n      (tier.limits.properties === -1 || tier.limits.properties === undefined || !usage.properties || usage.properties <= tier.limits.properties) &&\n      (tier.limits.units === -1 || tier.limits.units === undefined || !usage.units || usage.units <= tier.limits.units) &&\n      (tier.limits.users === -1 || tier.limits.users === undefined || !usage.users || usage.users <= tier.limits.users)\n\n    if (fitsUsage) {\n      return plan\n    }\n  }\n\n  return null\n}\n\n/**\n * Calculate annual savings for a plan\n */\nexport function calculateAnnualSavings(planType: PlanType): number {\n  const tier = PRODUCT_TIERS[planType]\n  const monthlyCost = tier.price.monthly * 12\n  const annualCost = tier.price.annual\n  return monthlyCost - annualCost\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2590, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/lease-generator.ts"],"sourcesContent":["/**\n * Lease Generator types (consolidated from apps/frontend/src/components/lease-generator/types)\n * These are frontend domain-specific types that should be accessible from shared package\n */\n\nimport { z } from 'zod'\nimport type { UseFormReturn } from 'react-hook-form'\n\nexport const leaseFormSchema = z.object({\n  // Property Information\n  propertyAddress: z.string().min(1, 'Property address is required'),\n  city: z.string().min(1, 'City is required'),\n  state: z.string().min(2, 'State is required'),\n  zipCode: z.string().min(5, 'Valid ZIP code is required'),\n  unitNumber: z.string().optional(),\n  countyName: z.string().optional(),\n  propertyType: z.enum(['house', 'apartment', 'condo', 'townhouse', 'duplex', 'other']),\n  bedrooms: z.number().optional(),\n  bathrooms: z.number().optional(),\n  squareFootage: z.number().optional(),\n  \n  // Landlord Information\n  landlordName: z.string().min(1, 'Landlord name is required'),\n  landlordEmail: z.string().email('Valid email is required'),\n  landlordPhone: z.string().optional(),\n  landlordAddress: z.string().min(1, 'Landlord address is required'),\n  \n  // Tenant Information\n  tenantNames: z.array(z.object({ name: z.string() })).min(1, 'At least one tenant is required'),\n  \n  // Lease Terms\n  leaseStartDate: z.string().min(1, 'Lease start date is required'),\n  leaseEndDate: z.string().min(1, 'Lease end date is required'),\n  rentAmount: z.number().min(1, 'Rent amount must be greater than 0'),\n  securityDeposit: z.number().min(0, 'Security deposit cannot be negative'),\n  \n  // Payment Information\n  paymentDueDate: z.number().min(1).max(31),\n  lateFeeAmount: z.number().min(0),\n  lateFeeDays: z.number().min(1),\n  paymentMethod: z.enum(['check', 'online', 'bank_transfer', 'cash']),\n  paymentAddress: z.string().optional(),\n  \n  // Additional Terms\n  petPolicy: z.enum(['allowed', 'not_allowed', 'with_deposit']),\n  petDeposit: z.number().optional(),\n  parkingSpaces: z.number().optional(),\n  storageUnit: z.string().optional(),\n  smokingPolicy: z.enum(['allowed', 'not_allowed']),\n  maintenanceResponsibility: z.enum(['landlord', 'tenant', 'shared']),\n  utilitiesIncluded: z.array(z.string()),\n  \n  // Occupancy\n  maxOccupants: z.number().min(1),\n  occupancyLimits: z.object({\n    adults: z.number(),\n    childrenUnder18: z.number(),\n    childrenUnder2: z.number()\n  }),\n  \n  // Emergency Contact\n  emergencyContact: z.object({\n    name: z.string(),\n    phone: z.string(),\n    relationship: z.string()\n  }).optional(),\n  \n  // Additional fields\n  moveInDate: z.string().optional(),\n  prorationAmount: z.number().optional(),\n  petDetails: z.object({\n    type: z.string(),\n    breed: z.string(),\n    weight: z.string(),\n    registration: z.string()\n  }).optional(),\n  keyDeposit: z.number().optional(),\n  \n  // Additional Clauses\n  additionalTerms: z.string().optional(),\n  specialProvisions: z.string().optional()\n})\n\nexport type LeaseFormData = z.infer<typeof leaseFormSchema>\n\n// Component prop types for lease generator sections\nexport interface PropertyInfoSectionProps {\n  form: UseFormReturn<LeaseFormData>\n  supportedStates: string[]\n}\n\nexport interface TenantInfoSectionProps {\n  form: UseFormReturn<LeaseFormData>\n}\n\nexport interface LeaseTermsSectionProps {\n  form: UseFormReturn<LeaseFormData>\n}\n\nexport interface AdditionalTermsSectionProps {\n  form: UseFormReturn<LeaseFormData>\n}\n\nexport interface PartiesInfoSectionProps {\n  form: UseFormReturn<LeaseFormData>\n}\n\n// Additional types for lease generator functionality\nexport type LeaseGeneratorForm = LeaseFormData\n\nexport type LeaseOutputFormat = 'html' | 'pdf' | 'text' | 'docx' | 'both'\n\nexport interface LeaseGenerationResult {\n  success: boolean\n  content?: string\n  downloadUrl?: string\n  error?: string\n}\n\nexport interface LeaseGeneratorUsage {\n  id: string\n  email: string\n  ipAddress: string\n  userAgent: string\n  usageCount: number\n  lastUsedAt: string\n  createdAt: string\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2697, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/invoices.ts"],"sourcesContent":["/**\n * Invoice-related constants\n * Configuration for lead magnet functionality and invoice management\n */\n\n// ========================\n// Lead Magnet Configuration\n// ========================\n\n/**\n * Lead magnet tier configuration\n */\nexport const LEAD_MAGNET_CONFIG = {\n  FREE_TIER: {\n    maxInvoicesPerMonth: 5,\n    watermarkRequired: true,\n    customBrandingAllowed: false,\n    emailRequired: true,\n    maxLineItems: 10\n  },\n  PRO_TIER: {\n    maxInvoicesPerMonth: -1, // unlimited\n    watermarkRequired: false,\n    customBrandingAllowed: true,\n    emailRequired: false,\n    maxLineItems: -1, // unlimited\n    price: 9.99\n  }\n} as const\n\nexport type LeadMagnetTier = keyof typeof LEAD_MAGNET_CONFIG\n\n// ========================\n// Invoice Status Constants\n// ========================\n\n/**\n * Customer invoice status enum values\n */\nexport const CUSTOMER_INVOICE_STATUS = {\n  DRAFT: 'DRAFT',\n  SENT: 'SENT',\n  VIEWED: 'VIEWED',\n  PAID: 'PAID',\n  OVERDUE: 'OVERDUE',\n  CANCELLED: 'CANCELLED'\n} as const\n\nexport const CUSTOMER_INVOICE_STATUS_OPTIONS = Object.values(CUSTOMER_INVOICE_STATUS)\n\n// ========================\n// Default Values\n// ========================\n\n/**\n * Default invoice configuration\n */\nexport const INVOICE_DEFAULTS = {\n  TAX_RATE: 0,\n  PAYMENT_TERMS_DAYS: 30,\n  NOTES: 'Thank you for your business!',\n  TERMS: 'Payment is due within 30 days.',\n  DOWNLOAD_COUNT: 0,\n  IS_PRO_VERSION: false\n} as const\n\n/**\n * Invoice number generation pattern\n */\nexport const INVOICE_NUMBER_PREFIX = 'INV-'\n\n/**\n * File upload limits for invoice attachments\n */\nexport const INVOICE_FILE_LIMITS = {\n  MAX_FILE_SIZE_MB: 10,\n  ALLOWED_MIME_TYPES: [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'application/pdf'\n  ]\n} as const"],"names":[],"mappings":"AAAA;;;CAGC,GAED,2BAA2B;AAC3B,4BAA4B;AAC5B,2BAA2B;AAE3B;;CAEC;;;;;;;;AACM,MAAM,qBAAqB;IAChC,WAAW;QACT,qBAAqB;QACrB,mBAAmB;QACnB,uBAAuB;QACvB,eAAe;QACf,cAAc;IAChB;IACA,UAAU;QACR,qBAAqB,CAAC;QACtB,mBAAmB;QACnB,uBAAuB;QACvB,eAAe;QACf,cAAc,CAAC;QACf,OAAO;IACT;AACF;AAWO,MAAM,0BAA0B;IACrC,OAAO;IACP,MAAM;IACN,QAAQ;IACR,MAAM;IACN,SAAS;IACT,WAAW;AACb;AAEO,MAAM,kCAAkC,OAAO,MAAM,CAAC;;AAStD,MAAM,mBAAmB;IAC9B,UAAU;IACV,oBAAoB;IACpB,OAAO;IACP,OAAO;IACP,gBAAgB;IAChB,gBAAgB;AAClB;AAKO,MAAM,wBAAwB;AAK9B,MAAM,sBAAsB;IACjC,kBAAkB;IAClB,oBAAoB;QAClB;QACA;QACA;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 2769, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/billing.ts"],"sourcesContent":["/**\n * Billing constants\n * Central source of truth for billing enums and constants\n */\n\n// Plan type enum (matching Prisma schema)\nexport const PLAN_TYPE = {\n  FREETRIAL: 'FREETRIAL',\n  STARTER: 'STARTER',\n  GROWTH: 'GROWTH',\n  TENANTFLOW_MAX: 'TENANTFLOW_MAX'\n} as const\n\nexport type PlanType = typeof PLAN_TYPE[keyof typeof PLAN_TYPE]\n\n// Billing period enum\nexport const BILLING_PERIOD = {\n  MONTHLY: 'MONTHLY',\n  ANNUAL: 'ANNUAL'\n} as const\n\nexport type BillingPeriod = typeof BILLING_PERIOD[keyof typeof BILLING_PERIOD]\n\n// Subscription status enum\nexport const SUB_STATUS = {\n  ACTIVE: 'ACTIVE',\n  CANCELLED: 'CANCELLED',\n  PAST_DUE: 'PAST_DUE',\n  INCOMPLETE: 'INCOMPLETE',\n  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED',\n  TRIALING: 'TRIALING',\n  UNPAID: 'UNPAID'\n} as const\n\nexport type SubStatus = typeof SUB_STATUS[keyof typeof SUB_STATUS]\n\n// Plan configuration data\nexport const PLANS = [\n  {\n    id: 'FREETRIAL',\n    name: 'Free Trial',\n    description: 'Perfect for getting started',\n    price: { monthly: 0, annual: 0 },\n    features: ['Up to 2 properties', '5GB storage', 'Basic support'],\n    propertyLimit: 2,\n    storageLimit: 5000,\n    apiCallLimit: 1000,\n    priority: false\n  },\n  {\n    id: 'STARTER',\n    name: 'Starter',\n    description: 'Great for small portfolios',\n    price: { monthly: 2900, annual: 29000 },\n    features: ['Up to 10 properties', '50GB storage', 'Email support'],\n    propertyLimit: 10,\n    storageLimit: 50000,\n    apiCallLimit: 10000,\n    priority: false\n  },\n  {\n    id: 'GROWTH',\n    name: 'Growth',\n    description: 'Scale your property business',\n    price: { monthly: 7900, annual: 79000 },\n    features: ['Up to 50 properties', '200GB storage', 'Priority support'],\n    propertyLimit: 50,\n    storageLimit: 200000,\n    apiCallLimit: 50000,\n    priority: true\n  },\n  {\n    id: 'TENANTFLOW_MAX',\n    name: 'TenantFlow MAX',\n    description: 'For large property portfolios',\n    price: { monthly: 19900, annual: 199000 },\n    features: ['Unlimited properties', 'Unlimited storage', '24/7 support', 'Custom integrations'],\n    propertyLimit: -1,\n    storageLimit: -1,\n    apiCallLimit: -1,\n    priority: true\n  }\n]\n\n// Derived options arrays for frontend use\nexport const PLAN_TYPE_OPTIONS = Object.values(PLAN_TYPE)\nexport const BILLING_PERIOD_OPTIONS = Object.values(BILLING_PERIOD)\nexport const SUB_STATUS_OPTIONS = Object.values(SUB_STATUS)\n"],"names":[],"mappings":"AAAA;;;CAGC,GAED,0CAA0C;;;;;;;;;;AACnC,MAAM,YAAY;IACvB,WAAW;IACX,SAAS;IACT,QAAQ;IACR,gBAAgB;AAClB;AAKO,MAAM,iBAAiB;IAC5B,SAAS;IACT,QAAQ;AACV;AAKO,MAAM,aAAa;IACxB,QAAQ;IACR,WAAW;IACX,UAAU;IACV,YAAY;IACZ,oBAAoB;IACpB,UAAU;IACV,QAAQ;AACV;AAKO,MAAM,QAAQ;IACnB;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;YAAE,SAAS;YAAG,QAAQ;QAAE;QAC/B,UAAU;YAAC;YAAsB;YAAe;SAAgB;QAChE,eAAe;QACf,cAAc;QACd,cAAc;QACd,UAAU;IACZ;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;YAAE,SAAS;YAAM,QAAQ;QAAM;QACtC,UAAU;YAAC;YAAuB;YAAgB;SAAgB;QAClE,eAAe;QACf,cAAc;QACd,cAAc;QACd,UAAU;IACZ;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;YAAE,SAAS;YAAM,QAAQ;QAAM;QACtC,UAAU;YAAC;YAAuB;YAAiB;SAAmB;QACtE,eAAe;QACf,cAAc;QACd,cAAc;QACd,UAAU;IACZ;IACA;QACE,IAAI;QACJ,MAAM;QACN,aAAa;QACb,OAAO;YAAE,SAAS;YAAO,QAAQ;QAAO;QACxC,UAAU;YAAC;YAAwB;YAAqB;YAAgB;SAAsB;QAC9F,eAAe,CAAC;QAChB,cAAc,CAAC;QACf,cAAc,CAAC;QACf,UAAU;IACZ;CACD;AAGM,MAAM,oBAAoB,OAAO,MAAM,CAAC;;AACxC,MAAM,yBAAyB,OAAO,MAAM,CAAC;;AAC7C,MAAM,qBAAqB,OAAO,MAAM,CAAC","debugId":null}},
    {"offset": {"line": 2895, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/stripe-errors.ts"],"sourcesContent":["/**\n * Standardized Stripe Error Constants\n * \n * Centralized error codes and messages for consistent error handling across the application.\n * Following Stripe's official error documentation and best practices.\n */\n\n/**\n * Stripe API error types as defined by Stripe SDK\n */\nexport const STRIPE_ERROR_TYPES = {\n  CARD_ERROR: 'StripeCardError',\n  RATE_LIMIT_ERROR: 'StripeRateLimitError',\n  INVALID_REQUEST_ERROR: 'StripeInvalidRequestError',\n  API_ERROR: 'StripeAPIError',\n  CONNECTION_ERROR: 'StripeConnectionError',\n  AUTHENTICATION_ERROR: 'StripeAuthenticationError',\n  PERMISSION_ERROR: 'StripePermissionError',\n  IDEMPOTENCY_ERROR: 'StripeIdempotencyError',\n  SIGNATURE_VERIFICATION_ERROR: 'StripeSignatureVerificationError'\n} as const\n\n/**\n * Application-specific Stripe error codes\n */\nexport const STRIPE_ERROR_CODES = {\n  // Card Errors\n  CARD_DECLINED: 'card_declined',\n  EXPIRED_CARD: 'expired_card',\n  INCORRECT_CVC: 'incorrect_cvc',\n  INCORRECT_NUMBER: 'incorrect_number',\n  INSUFFICIENT_FUNDS: 'insufficient_funds',\n  INVALID_EXPIRY: 'invalid_expiry',\n  INVALID_NUMBER: 'invalid_number',\n  PROCESSING_ERROR: 'processing_error',\n  \n  // Rate Limit Errors\n  RATE_LIMIT: 'rate_limit',\n  \n  // Invalid Request Errors\n  INVALID_REQUEST: 'invalid_request_error',\n  MISSING_PARAMETER: 'missing',\n  INVALID_PARAMETER: 'invalid',\n  \n  // API Errors\n  API_CONNECTION_ERROR: 'api_connection_error',\n  API_ERROR: 'api_error',\n  AUTHENTICATION_ERROR: 'authentication_error',\n  PERMISSION_ERROR: 'permission_error',\n  IDEMPOTENCY_ERROR: 'idempotency_error',\n  \n  // Application Errors\n  CUSTOMER_NOT_FOUND: 'customer_not_found',\n  SUBSCRIPTION_NOT_FOUND: 'subscription_not_found',\n  INVALID_PRICE_ID: 'invalid_price_id',\n  WEBHOOK_SIGNATURE_INVALID: 'webhook_signature_invalid',\n  CONFIGURATION_ERROR: 'configuration_error',\n  \n  // Network Errors\n  NETWORK_ERROR: 'network_error',\n  TIMEOUT_ERROR: 'timeout_error',\n  UNKNOWN_ERROR: 'unknown_error'\n} as const\n\n/**\n * User-friendly error messages mapped to error codes\n */\nexport const STRIPE_ERROR_MESSAGES = {\n  // Card Errors\n  [STRIPE_ERROR_CODES.CARD_DECLINED]: 'Your card was declined. Please try a different payment method or contact your bank.',\n  [STRIPE_ERROR_CODES.EXPIRED_CARD]: 'Your card has expired. Please use a different payment method.',\n  [STRIPE_ERROR_CODES.INCORRECT_CVC]: 'Your card\\'s security code is incorrect. Please check and try again.',\n  [STRIPE_ERROR_CODES.INCORRECT_NUMBER]: 'Your card number is incorrect. Please check and try again.',\n  [STRIPE_ERROR_CODES.INSUFFICIENT_FUNDS]: 'Your card has insufficient funds. Please try a different payment method.',\n  [STRIPE_ERROR_CODES.INVALID_EXPIRY]: 'Your card\\'s expiration date is invalid. Please check and try again.',\n  [STRIPE_ERROR_CODES.INVALID_NUMBER]: 'Your card number is invalid. Please check and try again.',\n  [STRIPE_ERROR_CODES.PROCESSING_ERROR]: 'There was an error processing your card. Please try again.',\n  \n  // Rate Limit Errors\n  [STRIPE_ERROR_CODES.RATE_LIMIT]: 'Too many requests. Please wait a moment and try again.',\n  \n  // Invalid Request Errors\n  [STRIPE_ERROR_CODES.INVALID_REQUEST]: 'The request contains invalid information. Please contact support if this persists.',\n  [STRIPE_ERROR_CODES.MISSING_PARAMETER]: 'Required information is missing. Please fill in all required fields.',\n  [STRIPE_ERROR_CODES.INVALID_PARAMETER]: 'Some information is invalid. Please check your input and try again.',\n  \n  // API Errors\n  [STRIPE_ERROR_CODES.API_CONNECTION_ERROR]: 'Connection error. Please check your internet connection and try again.',\n  [STRIPE_ERROR_CODES.API_ERROR]: 'Payment processing temporarily unavailable. Please try again in a few moments.',\n  [STRIPE_ERROR_CODES.AUTHENTICATION_ERROR]: 'Service authentication error. Please contact support.',\n  [STRIPE_ERROR_CODES.PERMISSION_ERROR]: 'This operation is not permitted. Please contact support.',\n  [STRIPE_ERROR_CODES.IDEMPOTENCY_ERROR]: 'Duplicate request detected. Please refresh and try again.',\n  \n  // Application Errors\n  [STRIPE_ERROR_CODES.CUSTOMER_NOT_FOUND]: 'Customer information not found. Please contact support.',\n  [STRIPE_ERROR_CODES.SUBSCRIPTION_NOT_FOUND]: 'Subscription not found. Please contact support.',\n  [STRIPE_ERROR_CODES.INVALID_PRICE_ID]: 'Invalid pricing information. Please contact support.',\n  [STRIPE_ERROR_CODES.WEBHOOK_SIGNATURE_INVALID]: 'Invalid webhook signature. Please check your configuration.',\n  [STRIPE_ERROR_CODES.CONFIGURATION_ERROR]: 'Service configuration error. Please contact support.',\n  \n  // Network Errors\n  [STRIPE_ERROR_CODES.NETWORK_ERROR]: 'Network connection error. Please check your internet connection and try again.',\n  [STRIPE_ERROR_CODES.TIMEOUT_ERROR]: 'Request timed out. Please try again.',\n  [STRIPE_ERROR_CODES.UNKNOWN_ERROR]: 'An unexpected error occurred. Please contact support if this persists.'\n} as const\n\n/**\n * Stripe decline codes with user-friendly messages\n */\nexport const STRIPE_DECLINE_MESSAGES = {\n  'generic_decline': 'Your card was declined. Please contact your bank or try a different payment method.',\n  'insufficient_funds': 'Your card has insufficient funds. Please try a different payment method.',\n  'lost_card': 'Your card has been reported as lost. Please contact your bank.',\n  'stolen_card': 'Your card has been reported as stolen. Please contact your bank.',\n  'expired_card': 'Your card has expired. Please use a different payment method.',\n  'incorrect_cvc': 'Your card\\'s security code is incorrect. Please check and try again.',\n  'processing_error': 'There was an error processing your card. Please try again.',\n  'card_not_supported': 'This card type is not supported. Please try a different payment method.',\n  'currency_not_supported': 'Your card doesn\\'t support this currency. Please try a different payment method.',\n  'fraudulent': 'This transaction appears fraudulent. Please contact your bank.',\n  'merchant_blacklist': 'Your card cannot be used with this merchant. Please try a different payment method.',\n  'pickup_card': 'Your card cannot be used. Please contact your bank.',\n  'restricted_card': 'Your card has restrictions. Please contact your bank.',\n  'security_violation': 'Security violation detected. Please contact your bank.',\n  'service_not_allowed': 'This service is not allowed on your card. Please try a different payment method.',\n  'stop_payment_order': 'A stop payment order exists on your card. Please contact your bank.',\n  'testmode_decline': 'Your card was declined (test mode).',\n  'transaction_not_allowed': 'This transaction is not allowed on your card. Please contact your bank.',\n  'try_again_later': 'Please try again later.',\n  'withdrawal_count_limit_exceeded': 'Withdrawal limit exceeded. Please try again later.'\n} as const\n\n/**\n * Error categories for monitoring and analytics\n */\nexport const STRIPE_ERROR_CATEGORIES = {\n  PAYMENT_METHOD: 'payment_method',\n  INFRASTRUCTURE: 'infrastructure',\n  CLIENT_ERROR: 'client_error',\n  STRIPE_SERVICE: 'stripe_service',\n  CONFIGURATION: 'configuration',\n  UNKNOWN: 'unknown'\n} as const\n\n/**\n * Error severity levels for alerting\n */\nexport const STRIPE_ERROR_SEVERITIES = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  CRITICAL: 'critical'\n} as const\n\n/**\n * Retryable error codes\n */\nexport const RETRYABLE_ERROR_CODES = new Set([\n  STRIPE_ERROR_CODES.RATE_LIMIT,\n  STRIPE_ERROR_CODES.API_ERROR,\n  STRIPE_ERROR_CODES.API_CONNECTION_ERROR,\n  STRIPE_ERROR_CODES.PROCESSING_ERROR,\n  STRIPE_ERROR_CODES.NETWORK_ERROR,\n  STRIPE_ERROR_CODES.TIMEOUT_ERROR\n])\n\n/**\n * Default retry configuration\n */\nexport const DEFAULT_STRIPE_RETRY_CONFIG = {\n  maxAttempts: 3,\n  baseDelayMs: 1000,\n  maxDelayMs: 10000,\n  exponentialBase: 2,\n  jitterMs: 100\n} as const\n\n/**\n * Error code to category mapping\n */\nexport const ERROR_CATEGORY_MAP = {\n  [STRIPE_ERROR_CODES.CARD_DECLINED]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.EXPIRED_CARD]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INCORRECT_CVC]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INCORRECT_NUMBER]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INSUFFICIENT_FUNDS]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INVALID_EXPIRY]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.INVALID_NUMBER]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  [STRIPE_ERROR_CODES.PROCESSING_ERROR]: STRIPE_ERROR_CATEGORIES.PAYMENT_METHOD,\n  \n  [STRIPE_ERROR_CODES.RATE_LIMIT]: STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE,\n  [STRIPE_ERROR_CODES.API_CONNECTION_ERROR]: STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE,\n  [STRIPE_ERROR_CODES.NETWORK_ERROR]: STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE,\n  [STRIPE_ERROR_CODES.TIMEOUT_ERROR]: STRIPE_ERROR_CATEGORIES.INFRASTRUCTURE,\n  \n  [STRIPE_ERROR_CODES.INVALID_REQUEST]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.MISSING_PARAMETER]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.INVALID_PARAMETER]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.IDEMPOTENCY_ERROR]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.CUSTOMER_NOT_FOUND]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.SUBSCRIPTION_NOT_FOUND]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  [STRIPE_ERROR_CODES.INVALID_PRICE_ID]: STRIPE_ERROR_CATEGORIES.CLIENT_ERROR,\n  \n  [STRIPE_ERROR_CODES.API_ERROR]: STRIPE_ERROR_CATEGORIES.STRIPE_SERVICE,\n  \n  [STRIPE_ERROR_CODES.AUTHENTICATION_ERROR]: STRIPE_ERROR_CATEGORIES.CONFIGURATION,\n  [STRIPE_ERROR_CODES.PERMISSION_ERROR]: STRIPE_ERROR_CATEGORIES.CONFIGURATION,\n  [STRIPE_ERROR_CODES.WEBHOOK_SIGNATURE_INVALID]: STRIPE_ERROR_CATEGORIES.CONFIGURATION,\n  [STRIPE_ERROR_CODES.CONFIGURATION_ERROR]: STRIPE_ERROR_CATEGORIES.CONFIGURATION,\n  \n  [STRIPE_ERROR_CODES.UNKNOWN_ERROR]: STRIPE_ERROR_CATEGORIES.UNKNOWN\n} as const\n\n/**\n * Error code to severity mapping\n */\nexport const ERROR_SEVERITY_MAP = {\n  [STRIPE_ERROR_CODES.CARD_DECLINED]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.EXPIRED_CARD]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INCORRECT_CVC]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INCORRECT_NUMBER]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INSUFFICIENT_FUNDS]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INVALID_EXPIRY]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.INVALID_NUMBER]: STRIPE_ERROR_SEVERITIES.LOW,\n  [STRIPE_ERROR_CODES.PROCESSING_ERROR]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  \n  [STRIPE_ERROR_CODES.RATE_LIMIT]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.API_CONNECTION_ERROR]: STRIPE_ERROR_SEVERITIES.HIGH,\n  [STRIPE_ERROR_CODES.NETWORK_ERROR]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.TIMEOUT_ERROR]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  \n  [STRIPE_ERROR_CODES.INVALID_REQUEST]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.MISSING_PARAMETER]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.INVALID_PARAMETER]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.IDEMPOTENCY_ERROR]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.CUSTOMER_NOT_FOUND]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.SUBSCRIPTION_NOT_FOUND]: STRIPE_ERROR_SEVERITIES.MEDIUM,\n  [STRIPE_ERROR_CODES.INVALID_PRICE_ID]: STRIPE_ERROR_SEVERITIES.HIGH,\n  \n  [STRIPE_ERROR_CODES.API_ERROR]: STRIPE_ERROR_SEVERITIES.HIGH,\n  \n  [STRIPE_ERROR_CODES.AUTHENTICATION_ERROR]: STRIPE_ERROR_SEVERITIES.CRITICAL,\n  [STRIPE_ERROR_CODES.PERMISSION_ERROR]: STRIPE_ERROR_SEVERITIES.CRITICAL,\n  [STRIPE_ERROR_CODES.WEBHOOK_SIGNATURE_INVALID]: STRIPE_ERROR_SEVERITIES.CRITICAL,\n  [STRIPE_ERROR_CODES.CONFIGURATION_ERROR]: STRIPE_ERROR_SEVERITIES.CRITICAL,\n  \n  [STRIPE_ERROR_CODES.UNKNOWN_ERROR]: STRIPE_ERROR_SEVERITIES.HIGH\n} as const\n\n// Type exports\nexport type StripeErrorType = typeof STRIPE_ERROR_TYPES[keyof typeof STRIPE_ERROR_TYPES]\nexport type StripeErrorCode = typeof STRIPE_ERROR_CODES[keyof typeof STRIPE_ERROR_CODES]\nexport type StripeErrorCategory = typeof STRIPE_ERROR_CATEGORIES[keyof typeof STRIPE_ERROR_CATEGORIES]\nexport type StripeErrorSeverity = typeof STRIPE_ERROR_SEVERITIES[keyof typeof STRIPE_ERROR_SEVERITIES]\nexport type StripeDeclineCode = keyof typeof STRIPE_DECLINE_MESSAGES"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3105, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/leases.ts"],"sourcesContent":["/**\n * Lease constants\n * Runtime constants and enums for lease management\n */\n\n// Lease status enum - matches Prisma schema LeaseStatus enum\nexport const LEASE_STATUS = {\n  DRAFT: 'DRAFT',\n  ACTIVE: 'ACTIVE',\n  EXPIRED: 'EXPIRED',\n  TERMINATED: 'TERMINATED'\n} as const\n\nexport type LeaseStatus = typeof LEASE_STATUS[keyof typeof LEASE_STATUS]\n\nexport const LEASE_STATUS_OPTIONS = Object.values(LEASE_STATUS)\n\nexport const LEASE_TYPE = {\n  FIXED_TERM: 'FIXED_TERM',\n  MONTH_TO_MONTH: 'MONTH_TO_MONTH',\n  WEEK_TO_WEEK: 'WEEK_TO_WEEK'\n} as const\n\nexport type LeaseType = typeof LEASE_TYPE[keyof typeof LEASE_TYPE]\n\nexport const LEASE_TYPE_OPTIONS = Object.values(LEASE_TYPE)"],"names":[],"mappings":"AAAA;;;CAGC,GAED,6DAA6D;;;;;;;AACtD,MAAM,eAAe;IAC1B,OAAO;IACP,QAAQ;IACR,SAAS;IACT,YAAY;AACd;AAIO,MAAM,uBAAuB,OAAO,MAAM,CAAC;;AAE3C,MAAM,aAAa;IACxB,YAAY;IACZ,gBAAgB;IAChB,cAAc;AAChB;AAIO,MAAM,qBAAqB,OAAO,MAAM,CAAC","debugId":null}},
    {"offset": {"line": 3142, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/maintenance.ts"],"sourcesContent":["/**\n * Maintenance constants\n */\n\nexport const PRIORITY = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM', \n  HIGH: 'HIGH',\n  EMERGENCY: 'EMERGENCY'\n} as const\n\nexport const MAINTENANCE_CATEGORY = {\n  GENERAL: 'GENERAL',\n  PLUMBING: 'PLUMBING',\n  ELECTRICAL: 'ELECTRICAL',\n  HVAC: 'HVAC',\n  APPLIANCES: 'APPLIANCES',\n  SAFETY: 'SAFETY',\n  OTHER: 'OTHER'\n} as const\n\nexport type MaintenanceCategory = typeof MAINTENANCE_CATEGORY[keyof typeof MAINTENANCE_CATEGORY]\n\nexport const REQUEST_STATUS = {\n  OPEN: 'OPEN',\n  IN_PROGRESS: 'IN_PROGRESS',\n  COMPLETED: 'COMPLETED',\n  CANCELED: 'CANCELED',\n  ON_HOLD: 'ON_HOLD'\n} as const\n\nexport type Priority = typeof PRIORITY[keyof typeof PRIORITY]\nexport type RequestStatus = typeof REQUEST_STATUS[keyof typeof REQUEST_STATUS]\n\n// Derived options arrays for frontend use\nexport const PRIORITY_OPTIONS = Object.values(PRIORITY)\nexport const REQUEST_STATUS_OPTIONS = Object.values(REQUEST_STATUS)\n"],"names":[],"mappings":"AAAA;;CAEC;;;;;;;AAEM,MAAM,WAAW;IACtB,KAAK;IACL,QAAQ;IACR,MAAM;IACN,WAAW;AACb;AAEO,MAAM,uBAAuB;IAClC,SAAS;IACT,UAAU;IACV,YAAY;IACZ,MAAM;IACN,YAAY;IACZ,QAAQ;IACR,OAAO;AACT;AAIO,MAAM,iBAAiB;IAC5B,MAAM;IACN,aAAa;IACb,WAAW;IACX,UAAU;IACV,SAAS;AACX;AAMO,MAAM,mBAAmB,OAAO,MAAM,CAAC;;AACvC,MAAM,yBAAyB,OAAO,MAAM,CAAC","debugId":null}},
    {"offset": {"line": 3189, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/properties.ts"],"sourcesContent":["/**\n * Property constants\n * Central source of truth for property-related enums and constants\n */\n\nexport const PROPERTY_STATUS = {\n  ACTIVE: 'ACTIVE',\n  INACTIVE: 'INACTIVE',\n  UNDER_CONTRACT: 'UNDER_CONTRACT',\n  SOLD: 'SOLD'\n} as const\n\nexport type PropertyStatus = typeof PROPERTY_STATUS[keyof typeof PROPERTY_STATUS]\n\n// Property type enum - matches Prisma schema PropertyType enum\nexport const PROPERTY_TYPE = {\n  SINGLE_FAMILY: 'SINGLE_FAMILY',\n  MULTI_UNIT: 'MULTI_UNIT',\n  APARTMENT: 'APARTMENT',\n  COMMERCIAL: 'COMMERCIAL'\n} as const\n\nexport type PropertyType = typeof PROPERTY_TYPE[keyof typeof PROPERTY_TYPE]\n\n// Unit status enum - matches Prisma schema UnitStatus enum\nexport const UNIT_STATUS = {\n  VACANT: 'VACANT',\n  OCCUPIED: 'OCCUPIED',\n  MAINTENANCE: 'MAINTENANCE',\n  RESERVED: 'RESERVED'\n} as const\n\nexport type UnitStatus = typeof UNIT_STATUS[keyof typeof UNIT_STATUS]\n\n// Derived options arrays for frontend use\nexport const PROPERTY_TYPE_OPTIONS = Object.values(PROPERTY_TYPE)\nexport const UNIT_STATUS_OPTIONS = Object.values(UNIT_STATUS)\n"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;AAEM,MAAM,kBAAkB;IAC7B,QAAQ;IACR,UAAU;IACV,gBAAgB;IAChB,MAAM;AACR;AAKO,MAAM,gBAAgB;IAC3B,eAAe;IACf,YAAY;IACZ,WAAW;IACX,YAAY;AACd;AAKO,MAAM,cAAc;IACzB,QAAQ;IACR,UAAU;IACV,aAAa;IACb,UAAU;AACZ;AAKO,MAAM,wBAAwB,OAAO,MAAM,CAAC;;AAC5C,MAAM,sBAAsB,OAAO,MAAM,CAAC","debugId":null}},
    {"offset": {"line": 3233, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/tenants.ts"],"sourcesContent":["/**\n * Tenant constants\n * Runtime constants and enums for tenant management\n */\n\nexport const TENANT_STATUS = {\n  ACTIVE: 'ACTIVE',\n  INACTIVE: 'INACTIVE',\n  EVICTED: 'EVICTED',\n  PENDING: 'PENDING'\n} as const\n\nexport type TenantStatus = typeof TENANT_STATUS[keyof typeof TENANT_STATUS]\n"],"names":[],"mappings":"AAAA;;;CAGC;;;AAEM,MAAM,gBAAgB;IAC3B,QAAQ;IACR,UAAU;IACV,SAAS;IACT,SAAS;AACX","debugId":null}},
    {"offset": {"line": 3254, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/reminders.ts"],"sourcesContent":["/**\n * Reminder constants\n * Runtime constants and enums for reminder management\n */\n\n// Reminder type enum - matches Prisma schema ReminderType enum\nexport const REMINDER_TYPE = {\n  RENT_REMINDER: 'RENT_REMINDER',\n  LEASE_EXPIRATION: 'LEASE_EXPIRATION',\n  MAINTENANCE_DUE: 'MAINTENANCE_DUE',\n  PAYMENT_OVERDUE: 'PAYMENT_OVERDUE'\n} as const\n\nexport type ReminderType = typeof REMINDER_TYPE[keyof typeof REMINDER_TYPE]\n\n// Reminder status enum - matches Prisma schema ReminderStatus enum\nexport const REMINDER_STATUS = {\n  PENDING: 'PENDING',\n  SENT: 'SENT',\n  FAILED: 'FAILED',\n  DELIVERED: 'DELIVERED',\n  OPENED: 'OPENED'\n} as const\n\nexport type ReminderStatus = typeof REMINDER_STATUS[keyof typeof REMINDER_STATUS]\n\n// Derived options arrays for frontend use\nexport const REMINDER_TYPE_OPTIONS = Object.values(REMINDER_TYPE)\nexport const REMINDER_STATUS_OPTIONS = Object.values(REMINDER_STATUS)"],"names":[],"mappings":"AAAA;;;CAGC,GAED,+DAA+D;;;;;;;AACxD,MAAM,gBAAgB;IAC3B,eAAe;IACf,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;AACnB;AAKO,MAAM,kBAAkB;IAC7B,SAAS;IACT,MAAM;IACN,QAAQ;IACR,WAAW;IACX,QAAQ;AACV;AAKO,MAAM,wBAAwB,OAAO,MAAM,CAAC;;AAC5C,MAAM,0BAA0B,OAAO,MAAM,CAAC","debugId":null}},
    {"offset": {"line": 3293, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/constants/index.ts"],"sourcesContent":["/**\n * Constants barrel exports\n * Centralized exports for all runtime constants\n */\n\n// Invoice constants\nexport {\n  LEAD_MAGNET_CONFIG,\n  CUSTOMER_INVOICE_STATUS,\n  CUSTOMER_INVOICE_STATUS_OPTIONS,\n  INVOICE_DEFAULTS,\n  INVOICE_NUMBER_PREFIX,\n  INVOICE_FILE_LIMITS,\n  type LeadMagnetTier\n} from './invoices'\n\n// Auth constants\nexport * from './auth'\n\n// Billing constants  \nexport * from './billing'\n\n// Stripe error constants\nexport * from './stripe-errors'\n\n// Lease constants\nexport * from './leases'\n\n// Maintenance constants\nexport * from './maintenance'\n\n// Property constants\nexport * from './properties'\n\n// Tenant constants\nexport * from './tenants'\n\n// Reminder constants\nexport * from './reminders'\n"],"names":[],"mappings":"AAAA;;;CAGC,GAED,oBAAoB;;AACpB;AAUA,iBAAiB;AACjB;AAEA,sBAAsB;AACtB;AAEA,yBAAyB;AACzB;AAEA,kBAAkB;AAClB;AAEA,wBAAwB;AACxB;AAEA,qBAAqB;AACrB;AAEA,mBAAmB;AACnB;AAEA,qBAAqB;AACrB","debugId":null}},
    {"offset": {"line": 3348, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/security.ts"],"sourcesContent":["/**\n * Security-related types shared between frontend and backend\n */\n\n/**\n * Comprehensive security event types for monitoring\n */\nexport enum SecurityEventType {\n    // Authentication events\n    AUTH_ATTEMPT = 'AUTH_ATTEMPT',\n    AUTH_SUCCESS = 'AUTH_SUCCESS',\n    AUTH_FAILURE = 'AUTH_FAILURE',\n    AUTH_TOKEN_INVALID = 'AUTH_TOKEN_INVALID',\n    AUTH_RATE_LIMIT = 'AUTH_RATE_LIMIT',\n    PASSWORD_CHANGE = 'PASSWORD_CHANGE',\n    TOKEN_REFRESH = 'TOKEN_REFRESH',\n    SESSION_INVALIDATED = 'SESSION_INVALIDATED',\n    ACCOUNT_LOCKED = 'ACCOUNT_LOCKED',\n    \n    // Authorization events\n    PERMISSION_DENIED = 'PERMISSION_DENIED',\n    FORBIDDEN_ACCESS = 'FORBIDDEN_ACCESS',\n    RLS_BYPASS_ATTEMPT = 'RLS_BYPASS_ATTEMPT',\n    UNAUTHORIZED_QUERY = 'UNAUTHORIZED_QUERY',\n    \n    // Input validation & security threats\n    VALIDATION_FAILURE = 'VALIDATION_FAILURE',\n    INVALID_INPUT_DETECTED = 'INVALID_INPUT_DETECTED',\n    INJECTION_ATTEMPT = 'INJECTION_ATTEMPT',\n    SQL_INJECTION_ATTEMPT = 'SQL_INJECTION_ATTEMPT',\n    XSS_ATTEMPT = 'XSS_ATTEMPT',\n    CSRF_ATTEMPT = 'CSRF_ATTEMPT',\n    PATH_TRAVERSAL = 'PATH_TRAVERSAL',\n    FILE_UPLOAD_BLOCKED = 'FILE_UPLOAD_BLOCKED',\n    FILE_TYPE_VIOLATION = 'FILE_TYPE_VIOLATION',\n    FILE_SIZE_VIOLATION = 'FILE_SIZE_VIOLATION',\n    MALICIOUS_FILE_UPLOAD = 'MALICIOUS_FILE_UPLOAD',\n    \n    // Rate limiting & suspicious activity\n    RATE_LIMIT_EXCEEDED = 'RATE_LIMIT_EXCEEDED',\n    SUSPICIOUS_ACTIVITY = 'SUSPICIOUS_ACTIVITY',\n    SUSPICIOUS_REQUEST = 'SUSPICIOUS_REQUEST',\n    SUSPICIOUS_PATTERN = 'SUSPICIOUS_PATTERN',\n    \n    // Administrative & system events\n    ADMIN_ACTION = 'ADMIN_ACTION',\n    DATA_EXPORT = 'DATA_EXPORT',\n    CONFIGURATION_CHANGE = 'CONFIGURATION_CHANGE',\n    CONFIG_ACCESS = 'CONFIG_ACCESS',\n    PII_ACCESS = 'PII_ACCESS',\n    SYSTEM_ERROR = 'SYSTEM_ERROR'\n}\n\n/**\n * Security event severity levels\n */\nexport enum SecurityEventSeverity {\n    LOW = 'LOW',\n    MEDIUM = 'MEDIUM',\n    HIGH = 'HIGH',\n    CRITICAL = 'CRITICAL'\n}\n\n/**\n * Security event for logging and monitoring\n */\nexport interface SecurityEvent {\n    type: SecurityEventType\n    severity: SecurityEventSeverity\n    userId?: string\n    details?: string\n    metadata?: Record<string, unknown>\n    ipAddress?: string\n    userAgent?: string\n    timestamp?: Date\n}\n\n/**\n * Security audit log entry\n */\nexport interface SecurityAuditLog {\n    id?: string\n    eventType: SecurityEventType\n    severity: SecurityEventSeverity\n    userId?: string\n    details: string\n    metadata?: Record<string, unknown>\n    ipAddress?: string\n    userAgent?: string\n    timestamp?: Date\n    email?: string\n    resource?: string\n    action?: string\n}\n\n/**\n * Security metrics for monitoring\n */\nexport interface SecurityMetrics {\n    totalEvents: number\n    eventsByType: Record<SecurityEventType, number>\n    eventsBySeverity: Record<SecurityEventSeverity, number>\n    criticalEvents: number\n    recentEvents: SecurityEvent[]\n    suspiciousIPs?: string[]\n    failedAuthAttempts?: number\n    blockedRequests?: number\n    timeRange?: {\n        start: Date\n        end: Date\n    }\n}\n\n/**\n * Security validation result\n */\nexport interface SecurityValidationResult<T = unknown> {\n    isValid: boolean\n    data?: T\n    errors?: string[]\n    sanitizedInput?: unknown\n}\n\n/**\n * Compliance monitoring status and metrics\n */\nexport interface ComplianceStatus {\n    overallScore: number\n    fairHousingStatus?: {\n        riskLevel?: SecurityEventSeverity\n        score?: number\n        violations?: number\n    }\n    dataRetentionStatus?: {\n        overdueRecords?: number\n        score?: number\n        riskLevel?: SecurityEventSeverity\n    }\n    securityStatus?: {\n        criticalEvents?: number\n        score?: number\n        riskLevel?: SecurityEventSeverity\n    }\n    recentAlerts?: SecurityEvent[]\n    recommendations?: string[]\n}"],"names":[],"mappings":"AAAA;;CAEC,GAED;;CAEC;;;;AACM,IAAA,AAAK,2CAAA;IACR,wBAAwB;;;;;;;;;;IAWxB,uBAAuB;;;;;IAMvB,sCAAsC;;;;;;;;;;;;IAatC,sCAAsC;;;;;IAMtC,iCAAiC;;;;;;;WArCzB;;AAiDL,IAAA,AAAK,+CAAA;;;;;WAAA","debugId":null}},
    {"offset": {"line": 3414, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/logger.ts"],"sourcesContent":["/**\n * Logger types shared between frontend and backend\n */\n\n/**\n * Log levels for application logging\n */\nexport const LogLevel = {\n    DEBUG: 0,\n    INFO: 1,\n    WARN: 2,\n    ERROR: 3\n} as const\n\nexport type LogLevel = typeof LogLevel[keyof typeof LogLevel]\n\n/**\n * Log entry structure\n */\nexport interface LogEntry {\n    level: LogLevel\n    message: string\n    timestamp: string\n    context?: Record<string, unknown>\n    error?: Error\n}\n\n/**\n * Logger configuration options\n */\nexport interface LoggerConfig {\n    level: LogLevel\n    enableConsole?: boolean\n    enableFile?: boolean\n    maxFileSize?: number\n    maxFiles?: number\n}"],"names":[],"mappings":"AAAA;;CAEC,GAED;;CAEC;;;AACM,MAAM,WAAW;IACpB,OAAO;IACP,MAAM;IACN,MAAM;IACN,OAAO;AACX","debugId":null}},
    {"offset": {"line": 3436, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/billing.ts"],"sourcesContent":["/**\n * Billing utility functions\n * Helper functions for subscription calculations and plan management\n */\n\nimport { PLANS } from '../constants/billing'\n\nexport function getPlanById(planId: string): typeof PLANS[0] | undefined {\n  return PLANS.find(plan => plan.id === planId)\n}\n\nexport function calculateProratedAmount(\n  amount: number,\n  daysRemaining: number,\n  daysInPeriod: number\n): number {\n  return Math.round((amount * daysRemaining) / daysInPeriod)\n}\n\nexport function calculateAnnualPrice(monthlyPrice: number): number {\n  // 10% discount for annual billing\n  return Math.round(monthlyPrice * 12 * 0.9)\n}\n\nexport function calculateAnnualSavings(monthlyPrice: number): number {\n  const yearlyWithoutDiscount = monthlyPrice * 12\n  const yearlyWithDiscount = calculateAnnualPrice(monthlyPrice)\n  return yearlyWithoutDiscount - yearlyWithDiscount\n}\n\nexport const SUBSCRIPTION_URLS = {\n  MANAGE: '/dashboard/subscription',\n  UPGRADE: '/dashboard/subscription/upgrade',\n  CANCEL: '/dashboard/subscription/cancel',\n  PORTAL: '/dashboard/billing-portal',\n  dashboardWithTrial: '/dashboard?trial=success',\n  dashboardWithSetup: '/dashboard?setup=complete'\n} as const"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;;AAED;;AAEO,SAAS,YAAY,MAAc;IACxC,OAAO,oJAAA,CAAA,QAAK,CAAC,IAAI,CAAC,CAAA,OAAQ,KAAK,EAAE,KAAK;AACxC;AAEO,SAAS,wBACd,MAAc,EACd,aAAqB,EACrB,YAAoB;IAEpB,OAAO,KAAK,KAAK,CAAC,AAAC,SAAS,gBAAiB;AAC/C;AAEO,SAAS,qBAAqB,YAAoB;IACvD,kCAAkC;IAClC,OAAO,KAAK,KAAK,CAAC,eAAe,KAAK;AACxC;AAEO,SAAS,uBAAuB,YAAoB;IACzD,MAAM,wBAAwB,eAAe;IAC7C,MAAM,qBAAqB,qBAAqB;IAChD,OAAO,wBAAwB;AACjC;AAEO,MAAM,oBAAoB;IAC/B,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,QAAQ;IACR,oBAAoB;IACpB,oBAAoB;AACtB","debugId":null}},
    {"offset": {"line": 3480, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/errors.ts"],"sourcesContent":["/**\n * Shared error handling utilities\n * Common error classification and handling patterns for both frontend and backend\n */\n\nimport { z } from 'zod'\n\n// Error classification constants\nexport const ERROR_TYPES = {\n  VALIDATION: 'VALIDATION',\n  NOT_FOUND: 'NOT_FOUND',\n  UNAUTHORIZED: 'UNAUTHORIZED',\n  PERMISSION_DENIED: 'PERMISSION_DENIED',\n  BUSINESS_LOGIC: 'BUSINESS_LOGIC',\n  NETWORK: 'NETWORK',\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  SERVER_ERROR: 'SERVER_ERROR',\n  AUTH_ERROR: 'AUTH_ERROR',\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  RATE_LIMIT: 'RATE_LIMIT',\n  DATABASE: 'DATABASE',\n  EXTERNAL_SERVICE: 'EXTERNAL_SERVICE',\n  UNKNOWN: 'UNKNOWN'\n} as const\n\nexport type ErrorType = typeof ERROR_TYPES[keyof typeof ERROR_TYPES]\n\n// Error severity levels\nexport const ERROR_SEVERITY = {\n  LOW: 'LOW',\n  MEDIUM: 'MEDIUM',\n  HIGH: 'HIGH',\n  CRITICAL: 'CRITICAL'\n} as const\n\nexport type ErrorSeverity = typeof ERROR_SEVERITY[keyof typeof ERROR_SEVERITY]\n\n// Common error structure for both frontend and backend\nexport interface StandardError {\n  retryable: boolean\n  type: ErrorType\n  severity: ErrorSeverity\n  message: string\n  code?: string\n  details?: Record<string, unknown>\n  field?: string\n  context?: Record<string, unknown>\n  timestamp: string\n  userMessage?: string\n}\n\n// Validation error structure\nexport interface ValidationError extends StandardError {\n  type: typeof ERROR_TYPES.VALIDATION\n  field: string\n  details: {\n    zodError?: z.ZodError\n    fieldErrors?: Record<string, string[]>\n  }\n}\n\n// Network error structure\nexport interface NetworkError extends StandardError {\n  type: typeof ERROR_TYPES.NETWORK\n  details: {\n    status?: number\n    statusText?: string\n    url?: string\n    method?: string\n  }\n}\n\n// Business logic error structure\nexport interface BusinessLogicError extends StandardError {\n  type: typeof ERROR_TYPES.BUSINESS_LOGIC\n  code: string\n  details: {\n    operation: string\n    resource?: string\n    reason: string\n  }\n}\n\n/**\n * Create a standardized error object\n */\nexport function createStandardError(\n  type: ErrorType,\n  message: string,\n  options: {\n    severity?: ErrorSeverity\n    code?: string\n    details?: Record<string, unknown>\n    field?: string\n    context?: Record<string, unknown>\n    userMessage?: string\n  } = {}\n): StandardError {\n  return {\n    type,\n    severity: options.severity || ERROR_SEVERITY.MEDIUM,\n    message,\n    code: options.code,\n    details: options.details,\n    field: options.field,\n    context: options.context,\n    timestamp: new Date().toISOString(),\n    userMessage: options.userMessage || message,\n    retryable: false\n  }\n}\n\n/**\n * Create a validation error from Zod error\n */\nexport function createValidationError(\n  zodError: z.ZodError,\n  context?: Record<string, unknown>\n): ValidationError {\n  const firstIssue = zodError.issues[0]\n  const field = firstIssue?.path.join('.') || 'unknown'\n  \n  const fieldErrors: Record<string, string[]> = {}\n  zodError.issues.forEach(issue => {\n    const fieldPath = issue.path.join('.')\n    fieldErrors[fieldPath] ??= [];\n    fieldErrors[fieldPath].push(issue.message)\n  })\n\n  return {\n    type: ERROR_TYPES.VALIDATION,\n    severity: ERROR_SEVERITY.LOW,\n    message: `Validation failed for field: ${field}`,\n    field,\n    details: {\n      zodError,\n      fieldErrors\n    },\n    context,\n    timestamp: new Date().toISOString(),\n    userMessage: firstIssue?.message || 'Please check your input and try again',\n    retryable: false\n  }\n}\n\n/**\n * Create a network error\n */\nexport function createNetworkError(\n  message: string,\n  status?: number,\n  options: {\n    statusText?: string\n    url?: string\n    method?: string\n    context?: Record<string, unknown>\n  } = {}\n): NetworkError {\n  return {\n    type: ERROR_TYPES.NETWORK,\n    severity: status && status >= 500 ? ERROR_SEVERITY.HIGH : ERROR_SEVERITY.MEDIUM,\n    message,\n    details: {\n      status,\n      statusText: options.statusText,\n      url: options.url,\n      method: options.method\n    },\n    context: options.context,\n    timestamp: new Date().toISOString(),\n    userMessage: getNetworkErrorMessage(status, message),\n    retryable: !status || status >= 500\n  }\n}\n\n/**\n * Create a business logic error\n */\nexport function createBusinessLogicError(\n  operation: string,\n  reason: string,\n  options: {\n    code?: string\n    resource?: string\n    severity?: ErrorSeverity\n    context?: Record<string, unknown>\n    userMessage?: string\n  } = {}\n): BusinessLogicError {\n  return {\n    type: ERROR_TYPES.BUSINESS_LOGIC,\n    severity: options.severity || ERROR_SEVERITY.MEDIUM,\n    message: `Business logic error in ${operation}: ${reason}`,\n    code: options.code || 'BUSINESS_LOGIC_ERROR',\n    details: {\n      operation,\n      resource: options.resource,\n      reason\n    },\n    context: options.context,\n    timestamp: new Date().toISOString(),\n    userMessage: options.userMessage || reason,\n    retryable: false\n  }\n}\n\n/**\n * Get user-friendly network error message\n */\nfunction getNetworkErrorMessage(status?: number, originalMessage?: string): string {\n  if (!status) {\n    return 'Network error occurred. Please check your connection.'\n  }\n\n  switch (status) {\n    case 400:\n      return 'Invalid request. Please check your input.'\n    case 401:\n      return 'Please log in to continue.'\n    case 403:\n      return 'You don\\'t have permission to perform this action.'\n    case 404:\n      return 'The requested resource was not found.'\n    case 409:\n      return 'This action conflicts with existing data.'\n    case 422:\n      return 'Please check your input and try again.'\n    case 429:\n      return 'Too many requests. Please wait a moment and try again.'\n    case 500:\n      return 'Server error. Please try again later.'\n    case 502:\n    case 503:\n    case 504:\n      return 'Service temporarily unavailable. Please try again later.'\n    default:\n      return originalMessage || 'An unexpected error occurred.'\n  }\n}\n\n/**\n * Classify an unknown error into a standard error type\n */\nexport function classifyError(error: unknown): StandardError {\n  // Handle Zod validation errors\n  if (error instanceof z.ZodError) {\n    return createValidationError(error)\n  }\n\n  // Handle standard Error objects\n  if (error instanceof Error) {\n    // Check for specific error types based on message patterns\n    const message = error.message.toLowerCase()\n    \n    if (message.includes('network') || message.includes('fetch')) {\n      return createNetworkError(error.message)\n    }\n    \n    if (message.includes('not found')) {\n      const standardError = createStandardError(ERROR_TYPES.NOT_FOUND, error.message, {\n        severity: ERROR_SEVERITY.LOW,\n        userMessage: 'The requested item was not found.'\n      })\n      standardError.retryable = false\n      return standardError\n    }\n    \n    if (message.includes('unauthorized') || message.includes('authentication')) {\n      const standardError = createStandardError(ERROR_TYPES.UNAUTHORIZED, error.message, {\n        severity: ERROR_SEVERITY.MEDIUM,\n        userMessage: 'Please log in to continue.'\n      })\n      standardError.retryable = false\n      return standardError\n    }\n    \n    if (message.includes('permission') || message.includes('forbidden')) {\n      const standardError = createStandardError(ERROR_TYPES.PERMISSION_DENIED, error.message, {\n        severity: ERROR_SEVERITY.MEDIUM,\n        userMessage: 'You don\\'t have permission to perform this action.'\n      })\n      standardError.retryable = false\n      return standardError\n    }\n    \n    const standardError = createStandardError(ERROR_TYPES.UNKNOWN, error.message, {\n      severity: ERROR_SEVERITY.MEDIUM\n    })\n    standardError.retryable = true\n    return standardError\n  }\n\n  // Handle string errors\n  if (typeof error === 'string') {\n    const standardError = createStandardError(ERROR_TYPES.UNKNOWN, error, {\n      severity: ERROR_SEVERITY.MEDIUM\n    })\n    standardError.retryable = true\n    return standardError\n  }\n\n  // Handle unknown error types\n  const standardError = createStandardError(ERROR_TYPES.UNKNOWN, 'An unexpected error occurred', {\n    severity: ERROR_SEVERITY.MEDIUM,\n    details: { originalError: error }\n  })\n  standardError.retryable = true\n  return standardError\n}\n\n/**\n * Check if an error is retryable based on its type and details\n */\nexport function isRetryableError(error: StandardError): boolean {\n  switch (error.type) {\n    case ERROR_TYPES.NETWORK: {\n      const networkError = error as NetworkError\n      const status = networkError.details.status\n      // Retry on 5xx errors and network failures\n      return !status || status >= 500\n    }\n    \n    case ERROR_TYPES.RATE_LIMIT:\n      return true\n    \n    case ERROR_TYPES.DATABASE:\n      return true\n    \n    case ERROR_TYPES.EXTERNAL_SERVICE:\n      return true\n    \n    default:\n      return false\n  }\n}\n\n/**\n * Get error severity for logging purposes\n */\nexport function getErrorLogLevel(error: StandardError): 'debug' | 'info' | 'warn' | 'error' {\n  switch (error.severity) {\n    case ERROR_SEVERITY.LOW:\n      return 'info'\n    case ERROR_SEVERITY.MEDIUM:\n      return 'warn'\n    case ERROR_SEVERITY.HIGH:\n    case ERROR_SEVERITY.CRITICAL:\n      return 'error'\n    default:\n      return 'warn'\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3727, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/auth.ts"],"sourcesContent":["/**\n * Authentication utilities\n * Helper functions for user role display and management\n */\n\nimport type { UserRole } from '../types/auth'\n\nexport const getUserRoleLabel = (role: UserRole): string => {\n  const labels: Record<UserRole, string> = {\n    OWNER: 'Property Owner',\n    MANAGER: 'Property Manager',\n    TENANT: 'Tenant',\n    ADMIN: 'Administrator'\n  }\n  return labels[role] || role\n}\n\nexport const getUserRoleColor = (role: UserRole): string => {\n  const colors: Record<UserRole, string> = {\n    OWNER: 'bg-purple-100 text-purple-800',\n    MANAGER: 'bg-blue-100 text-blue-800',\n    TENANT: 'bg-green-100 text-green-800',\n    ADMIN: 'bg-red-100 text-red-800'\n  }\n  return colors[role] || 'bg-gray-100 text-gray-800'\n}"],"names":[],"mappings":"AAAA;;;CAGC;;;;AAIM,MAAM,mBAAmB,CAAC;IAC/B,MAAM,SAAmC;QACvC,OAAO;QACP,SAAS;QACT,QAAQ;QACR,OAAO;IACT;IACA,OAAO,MAAM,CAAC,KAAK,IAAI;AACzB;AAEO,MAAM,mBAAmB,CAAC;IAC/B,MAAM,SAAmC;QACvC,OAAO;QACP,SAAS;QACT,QAAQ;QACR,OAAO;IACT;IACA,OAAO,MAAM,CAAC,KAAK,IAAI;AACzB","debugId":null}},
    {"offset": {"line": 3761, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/properties.ts"],"sourcesContent":["/**\n * Property utilities\n * Helper functions for property and unit display\n */\n\ntype PropertyType = 'SINGLE_FAMILY' | 'MULTI_UNIT' | 'APARTMENT' | 'COMMERCIAL'\ntype UnitStatus = 'VACANT' | 'OCCUPIED' | 'MAINTENANCE' | 'RESERVED'\n\nexport const getPropertyTypeLabel = (type: PropertyType): string => {\n  const labels: Record<PropertyType, string> = {\n    SINGLE_FAMILY: 'Single Family',\n    MULTI_UNIT: 'Multi Unit',\n    APARTMENT: 'Apartment',\n    COMMERCIAL: 'Commercial'\n  }\n  return labels[type] || type\n}\n\nexport const getUnitStatusLabel = (status: UnitStatus): string => {\n  const labels: Record<UnitStatus, string> = {\n    VACANT: 'Vacant',\n    OCCUPIED: 'Occupied',\n    MAINTENANCE: 'Under Maintenance',\n    RESERVED: 'Reserved'\n  }\n  return labels[status] || status\n}\n\nexport const getUnitStatusColor = (status: UnitStatus): string => {\n  const colors: Record<UnitStatus, string> = {\n    VACANT: 'bg-yellow-100 text-yellow-800',\n    OCCUPIED: 'bg-green-100 text-green-800',\n    MAINTENANCE: 'bg-orange-100 text-orange-800',\n    RESERVED: 'bg-blue-100 text-blue-800'\n  }\n  return colors[status] || 'bg-gray-100 text-gray-800'\n}"],"names":[],"mappings":"AAAA;;;CAGC;;;;;AAKM,MAAM,uBAAuB,CAAC;IACnC,MAAM,SAAuC;QAC3C,eAAe;QACf,YAAY;QACZ,WAAW;QACX,YAAY;IACd;IACA,OAAO,MAAM,CAAC,KAAK,IAAI;AACzB;AAEO,MAAM,qBAAqB,CAAC;IACjC,MAAM,SAAqC;QACzC,QAAQ;QACR,UAAU;QACV,aAAa;QACb,UAAU;IACZ;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B;AAEO,MAAM,qBAAqB,CAAC;IACjC,MAAM,SAAqC;QACzC,QAAQ;QACR,UAAU;QACV,aAAa;QACb,UAAU;IACZ;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B","debugId":null}},
    {"offset": {"line": 3805, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/tenants.ts"],"sourcesContent":["/**\n * Tenant utilities\n * Helper functions for tenant invitation status display\n */\n\ntype InvitationStatus = 'PENDING' | 'ACCEPTED' | 'EXPIRED' | 'DECLINED' | 'CANCELLED'\n\nexport const getInvitationStatusLabel = (status: InvitationStatus): string => {\n  const labels: Record<InvitationStatus, string> = {\n    PENDING: 'Pending',\n    ACCEPTED: 'Accepted',\n    EXPIRED: 'Expired',\n    DECLINED: 'Declined',\n    CANCELLED: 'Cancelled'\n  }\n  return labels[status] || status\n}\n\nexport const getInvitationStatusColor = (status: InvitationStatus): string => {\n  const colors: Record<InvitationStatus, string> = {\n    PENDING: 'bg-yellow-100 text-yellow-800',\n    ACCEPTED: 'bg-green-100 text-green-800',\n    EXPIRED: 'bg-red-100 text-red-800',\n    DECLINED: 'bg-red-100 text-red-800',\n    CANCELLED: 'bg-gray-100 text-gray-800'\n  }\n  return colors[status] || 'bg-gray-100 text-gray-800'\n}"],"names":[],"mappings":"AAAA;;;CAGC;;;;AAIM,MAAM,2BAA2B,CAAC;IACvC,MAAM,SAA2C;QAC/C,SAAS;QACT,UAAU;QACV,SAAS;QACT,UAAU;QACV,WAAW;IACb;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B;AAEO,MAAM,2BAA2B,CAAC;IACvC,MAAM,SAA2C;QAC/C,SAAS;QACT,UAAU;QACV,SAAS;QACT,UAAU;QACV,WAAW;IACb;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B","debugId":null}},
    {"offset": {"line": 3841, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/leases.ts"],"sourcesContent":["/**\n * Lease utilities\n * Helper functions for lease status display and management\n */\n\ntype LeaseStatus = 'DRAFT' | 'ACTIVE' | 'EXPIRED' | 'TERMINATED'\n\nexport const getLeaseStatusLabel = (status: LeaseStatus): string => {\n  const labels: Record<LeaseStatus, string> = {\n    DRAFT: 'Draft',\n    ACTIVE: 'Active',\n    EXPIRED: 'Expired',\n    TERMINATED: 'Terminated'\n  }\n  return labels[status] || status\n}\n\nexport const getLeaseStatusColor = (status: LeaseStatus): string => {\n  const colors: Record<LeaseStatus, string> = {\n    DRAFT: 'bg-gray-100 text-gray-800',\n    ACTIVE: 'bg-green-100 text-green-800',\n    EXPIRED: 'bg-red-100 text-red-800',\n    TERMINATED: 'bg-orange-100 text-orange-800'\n  }\n  return colors[status] || 'bg-gray-100 text-gray-800'\n}"],"names":[],"mappings":"AAAA;;;CAGC;;;;AAIM,MAAM,sBAAsB,CAAC;IAClC,MAAM,SAAsC;QAC1C,OAAO;QACP,QAAQ;QACR,SAAS;QACT,YAAY;IACd;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B;AAEO,MAAM,sBAAsB,CAAC;IAClC,MAAM,SAAsC;QAC1C,OAAO;QACP,QAAQ;QACR,SAAS;QACT,YAAY;IACd;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B","debugId":null}},
    {"offset": {"line": 3875, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/maintenance.ts"],"sourcesContent":["/**\n * Maintenance utilities\n * Helper functions for maintenance priority and status display\n */\n\ntype Priority = 'LOW' | 'MEDIUM' | 'HIGH' | 'EMERGENCY'\ntype RequestStatus = 'OPEN' | 'IN_PROGRESS' | 'COMPLETED' | 'CANCELED' | 'ON_HOLD'\n\nexport const getPriorityLabel = (priority: Priority): string => {\n  const labels: Record<Priority, string> = {\n    LOW: 'Low Priority',\n    MEDIUM: 'Medium Priority',\n    HIGH: 'High Priority',\n    EMERGENCY: 'Emergency'\n  }\n  return labels[priority] || priority\n}\n\nexport const getPriorityColor = (priority: Priority): string => {\n  const colors: Record<Priority, string> = {\n    LOW: 'bg-green-100 text-green-800',\n    MEDIUM: 'bg-yellow-100 text-yellow-800',\n    HIGH: 'bg-orange-100 text-orange-800',\n    EMERGENCY: 'bg-red-100 text-red-800'\n  }\n  return colors[priority] || 'bg-gray-100 text-gray-800'\n}\n\nexport const getRequestStatusLabel = (status: RequestStatus): string => {\n  const labels: Record<RequestStatus, string> = {\n    OPEN: 'Open',\n    IN_PROGRESS: 'In Progress',\n    COMPLETED: 'Completed',\n    CANCELED: 'Canceled',\n    ON_HOLD: 'On Hold'\n  }\n  return labels[status] || status\n}\n\nexport const getRequestStatusColor = (status: RequestStatus): string => {\n  const colors: Record<RequestStatus, string> = {\n    OPEN: 'bg-yellow-100 text-yellow-800',\n    IN_PROGRESS: 'bg-blue-100 text-blue-800',\n    COMPLETED: 'bg-green-100 text-green-800',\n    CANCELED: 'bg-gray-100 text-gray-800',\n    ON_HOLD: 'bg-orange-100 text-orange-800'\n  }\n  return colors[status] || 'bg-gray-100 text-gray-800'\n}"],"names":[],"mappings":"AAAA;;;CAGC;;;;;;AAKM,MAAM,mBAAmB,CAAC;IAC/B,MAAM,SAAmC;QACvC,KAAK;QACL,QAAQ;QACR,MAAM;QACN,WAAW;IACb;IACA,OAAO,MAAM,CAAC,SAAS,IAAI;AAC7B;AAEO,MAAM,mBAAmB,CAAC;IAC/B,MAAM,SAAmC;QACvC,KAAK;QACL,QAAQ;QACR,MAAM;QACN,WAAW;IACb;IACA,OAAO,MAAM,CAAC,SAAS,IAAI;AAC7B;AAEO,MAAM,wBAAwB,CAAC;IACpC,MAAM,SAAwC;QAC5C,MAAM;QACN,aAAa;QACb,WAAW;QACX,UAAU;QACV,SAAS;IACX;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B;AAEO,MAAM,wBAAwB,CAAC;IACpC,MAAM,SAAwC;QAC5C,MAAM;QACN,aAAa;QACb,WAAW;QACX,UAAU;QACV,SAAS;IACX;IACA,OAAO,MAAM,CAAC,OAAO,IAAI;AAC3B","debugId":null}},
    {"offset": {"line": 3931, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/type-adapters.ts"],"sourcesContent":["/**\n * Type Adapter Utilities\n * Provides type-safe bridges between domain types and API layer requirements\n */\n\n/**\n * Generic type adapter interface that ensures type safety while satisfying API requirements\n */\nexport interface TypeAdapter<TDomain, TApi extends Record<string, unknown>> {\n  toApi: (domain: TDomain) => TApi\n  fromApi: (api: TApi) => TDomain\n}\n\n/**\n * Creates a type-safe query parameter adapter\n * Ensures domain query types are properly converted to API-compatible formats\n */\nexport function createQueryAdapter<T extends Record<string, unknown>>(\n  query?: T\n): Record<string, unknown> {\n  if (!query) return {}\n  \n  // Filter out undefined values and ensure proper serialization\n  const filtered: Record<string, unknown> = {}\n  \n  for (const [key, value] of Object.entries(query)) {\n    if (value !== undefined && value !== null) {\n      // Handle nested objects by serializing them\n      if (typeof value === 'object' && !Array.isArray(value) && !(value instanceof Date)) {\n        filtered[key] = JSON.stringify(value)\n      } else if (value instanceof Date) {\n        filtered[key] = value.toISOString()\n      } else {\n        filtered[key] = value\n      }\n    }\n  }\n  \n  return filtered\n}\n\n/**\n * Creates a type-safe mutation data adapter\n * Ensures domain input types are properly converted to API-compatible formats\n */\nexport function createMutationAdapter<T extends Record<string, unknown>>(\n  data: T\n): Record<string, unknown> {\n  // Ensure all required fields are present and properly typed\n  const adapted: Record<string, unknown> = {}\n  \n  for (const [key, value] of Object.entries(data)) {\n    if (value !== undefined) {\n      // Handle Date objects\n      if (value instanceof Date) {\n        adapted[key] = value.toISOString()\n      } \n      // Handle arrays\n      else if (Array.isArray(value)) {\n        adapted[key] = value\n      }\n      // Handle nested objects  \n      else if (typeof value === 'object' && value !== null) {\n        adapted[key] = value\n      }\n      // Handle primitive types\n      else {\n        adapted[key] = value\n      }\n    }\n  }\n  \n  return adapted\n}\n\n/**\n * Type-safe parameter validator that ensures required fields are present\n */\nexport function validateApiParams<T extends Record<string, unknown>>(\n  params: T,\n  requiredFields: (keyof T)[]\n): asserts params is T & Required<Pick<T, typeof requiredFields[number]>> {\n  for (const field of requiredFields) {\n    if (params[field] === undefined || params[field] === null) {\n      throw new Error(`Required field '${String(field)}' is missing`)\n    }\n  }\n}\n\n/**\n * Creates a type-safe response adapter\n * Converts API responses back to domain types with proper type checking\n */\nexport function createResponseAdapter<TApi, TDomain>(\n  apiData: TApi,\n  transformer: (data: TApi) => TDomain\n): TDomain {\n  try {\n    return transformer(apiData)\n  } catch (error) {\n    throw new Error(`Failed to transform API response: ${error instanceof Error ? error.message : 'Unknown error'}`)\n  }\n}\n\n/**\n * Enum validation helper\n * Ensures enum values are valid and provides type safety\n */\nexport function validateEnumValue<T extends Record<string, string>>(\n  value: string,\n  enumObject: T,\n  fallback?: T[keyof T]\n): T[keyof T] {\n  const enumValues = Object.values(enumObject)\n  if (enumValues.includes(value as T[keyof T])) {\n    return value as T[keyof T]\n  }\n  \n  if (fallback !== undefined) {\n    return fallback\n  }\n  \n  throw new Error(`Invalid enum value '${value}'. Valid values are: ${enumValues.join(', ')}`)\n}\n\n/**\n * Utility to safely convert strings to numbers for query parameters\n */\nexport function safeParseNumber(value: string | number | undefined): number | undefined {\n  if (typeof value === 'number') return value\n  if (typeof value === 'string') {\n    const parsed = parseFloat(value)\n    return isNaN(parsed) ? undefined : parsed\n  }\n  return undefined\n}\n\n/**\n * Utility to safely convert strings to dates for API parameters\n */\nexport function safeParseDate(value: string | Date | undefined): Date | undefined {\n  if (value instanceof Date) return value\n  if (typeof value === 'string') {\n    const parsed = new Date(value)\n    return isNaN(parsed.getTime()) ? undefined : parsed\n  }\n  return undefined\n}\n\n/**\n * Type-safe deep merge utility for combining API parameters\n */\nexport function mergeApiParams<T extends Record<string, unknown>, U extends Record<string, unknown>>(\n  base: T,\n  override: U\n): T & U {\n  return { ...base, ...override }\n}\n\n/**\n * Creates a typed API call wrapper that ensures proper parameter conversion\n */\nexport function createApiCall<TParams extends Record<string, unknown>>(\n  endpoint: string,\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' = 'GET'\n): {\n  endpoint: string\n  method: string\n  prepareParams: (params: TParams) => Record<string, unknown>\n  prepareData: (data: TParams) => Record<string, unknown>\n} {\n  return {\n    endpoint,\n    method,\n    prepareParams: (params: TParams): Record<string, unknown> => createQueryAdapter(params),\n    prepareData: (data: TParams): Record<string, unknown> => createMutationAdapter(data),\n  }\n}\n\n// Type guards for common API parameter validation\nexport function isValidQueryParam(value: unknown): value is string | number | boolean {\n  return typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean'\n}\n\nexport function isValidMutationData(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value)\n}\n\n/**\n * Error handling utilities for type adapter operations\n */\nexport class TypeAdapterError extends Error {\n  constructor(\n    message: string,\n    public readonly operation: 'query' | 'mutation' | 'response',\n    public readonly originalData: unknown\n  ) {\n    super(message)\n    this.name = 'TypeAdapterError'\n  }\n}\n\nexport function handleAdapterError(error: unknown, operation: 'query' | 'mutation' | 'response', data: unknown): never {\n  if (error instanceof Error) {\n    throw new TypeAdapterError(error.message, operation, data)\n  }\n  throw new TypeAdapterError('Unknown adapter error', operation, data)\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4072, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/utils/index.ts"],"sourcesContent":["/**\n * @repo/shared/utils - Utility functions export\n * \n * Re-exports all utility functions from the utils directory.\n */\n\n// Billing utilities\nexport * from './billing'\n\n// Error handling utilities  \nexport * from './errors'\n\n// Auth utilities\nexport * from './auth'\n\n// Property utilities\nexport * from './properties'\n\n// Tenant utilities\nexport * from './tenants'\n\n// Lease utilities\nexport * from './leases'\n\n// Maintenance utilities\nexport * from './maintenance'\n\n// Currency utilities\nexport * from './currency'\n\n// Type adapter utilities\n// IMPORTANT: ALL imports from utils should go through this barrel export (./utils)\n// to maintain CI/CD compatibility. Do NOT import directly from ./utils/type-adapters\nexport * from './type-adapters'"],"names":[],"mappings":"AAAA;;;;CAIC,GAED,oBAAoB;;AACpB;AAEA,6BAA6B;AAC7B;AAEA,iBAAiB;AACjB;AAEA,qBAAqB;AACrB;AAEA,mBAAmB;AACnB;AAEA,kBAAkB;AAClB;AAEA,wBAAwB;AACxB;AAEA,qBAAqB;AACrB;AAEA,yBAAyB;AACzB,mFAAmF;AACnF,qFAAqF;AACrF","debugId":null}},
    {"offset": {"line": 4130, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/types/domain.ts"],"sourcesContent":["/**\n * Domain-Driven Design Types for TenantFlow\n * \n * These types provide common patterns for implementing DDD concepts\n * across frontend and backend, ensuring consistency in domain modeling.\n */\n\n// ========================\n// Value Object Base Types\n// ========================\n\nexport interface ValueObject<T> {\n  equals(other: T): boolean\n  toString(): string\n}\n\nexport abstract class BaseValueObject<T> implements ValueObject<T> {\n  abstract equals(other: T): boolean\n  abstract toString(): string\n}\n\n// ========================\n// Entity Base Types\n// ========================\n\nexport interface Entity<TId = string> {\n  readonly id: TId\n  equals(other: Entity<TId>): boolean\n}\n\nexport abstract class BaseEntity<TId = string> implements Entity<TId> {\n  constructor(public readonly id: TId) {}\n\n  equals(other: Entity<TId>): boolean {\n    return this.id === other.id\n  }\n}\n\n// ========================\n// Aggregate Root Types\n// ========================\n\nexport interface AggregateRoot<TId = string> extends Entity<TId> {\n  readonly version: number\n  getUncommittedEvents(): DomainEvent[]\n  markEventsAsCommitted(): void\n}\n\nexport interface DomainEvent<TPayload = unknown> {\n  readonly id: string\n  readonly aggregateId: string\n  readonly aggregateType: string\n  readonly eventType: string\n  readonly version: number\n  readonly timestamp: Date\n  readonly payload: TPayload\n  readonly metadata?: Record<string, unknown>\n}\n\n// ========================\n// Repository Patterns\n// ========================\n\nexport interface Repository<TEntity extends Entity<TId>, TId = string> {\n  findById(id: TId): Promise<TEntity | null>\n  save(entity: TEntity): Promise<TEntity>\n  delete(id: TId): Promise<void>\n}\n\nexport interface QueryRepository<TEntity, TQuery = Record<string, unknown>> {\n  findMany(query?: TQuery): Promise<TEntity[]>\n  count(query?: TQuery): Promise<number>\n}\n\n// ========================\n// Specification Pattern\n// ========================\n\nexport interface Specification<T> {\n  isSatisfiedBy(candidate: T): boolean\n  and(other: Specification<T>): Specification<T>\n  or(other: Specification<T>): Specification<T>\n  not(): Specification<T>\n}\n\nexport abstract class BaseSpecification<T> implements Specification<T> {\n  abstract isSatisfiedBy(candidate: T): boolean\n\n  and(other: Specification<T>): Specification<T> {\n    return new AndSpecification(this, other)\n  }\n\n  or(other: Specification<T>): Specification<T> {\n    return new OrSpecification(this, other)\n  }\n\n  not(): Specification<T> {\n    return new NotSpecification(this)\n  }\n}\n\nclass AndSpecification<T> extends BaseSpecification<T> {\n  constructor(\n    private left: Specification<T>,\n    private right: Specification<T>\n  ) {\n    super()\n  }\n\n  isSatisfiedBy(candidate: T): boolean {\n    return this.left.isSatisfiedBy(candidate) && this.right.isSatisfiedBy(candidate)\n  }\n}\n\nclass OrSpecification<T> extends BaseSpecification<T> {\n  constructor(\n    private left: Specification<T>,\n    private right: Specification<T>\n  ) {\n    super()\n  }\n\n  isSatisfiedBy(candidate: T): boolean {\n    return this.left.isSatisfiedBy(candidate) || this.right.isSatisfiedBy(candidate)\n  }\n}\n\nclass NotSpecification<T> extends BaseSpecification<T> {\n  constructor(private spec: Specification<T>) {\n    super()\n  }\n\n  isSatisfiedBy(candidate: T): boolean {\n    return !this.spec.isSatisfiedBy(candidate)\n  }\n}\n\n// ========================\n// Command/Query Patterns\n// ========================\n\nexport interface Command {\n  readonly type: string\n  readonly timestamp: Date\n  readonly correlationId?: string\n  readonly causationId?: string\n}\n\nexport interface Query<TResult = unknown> {\n  readonly type: string\n  readonly timestamp: Date\n  readonly __result?: TResult // Phantom type to ensure TResult is used\n}\n\nexport interface CommandHandler<TCommand extends Command, TResult = void> {\n  handle(command: TCommand): Promise<TResult>\n}\n\nexport interface QueryHandler<TQuery extends Query<TResult>, TResult = unknown> {\n  handle(query: TQuery): Promise<TResult>\n}\n\n// ========================\n// Result Pattern\n// ========================\n\nexport type Result<T, E = Error> = Success<T> | Failure<E>\n\nexport interface Success<T> {\n  readonly success: true\n  readonly value: T\n  readonly error?: never\n}\n\nexport interface Failure<E> {\n  readonly success: false\n  readonly value?: never\n  readonly error: E\n}\n\nexport const Result = {\n  success: <T>(value: T): Success<T> => ({\n    success: true,\n    value\n  }),\n\n  failure: <E>(error: E): Failure<E> => ({\n    success: false,\n    error\n  }),\n\n  isSuccess: <T, E>(result: Result<T, E>): result is Success<T> => {\n    return result.success === true\n  },\n\n  isFailure: <T, E>(result: Result<T, E>): result is Failure<E> => {\n    return result.success === false\n  }\n}\n\n// ========================\n// Business Rule Types\n// ========================\n\nexport interface BusinessRule {\n  readonly message: string\n  isBroken(): boolean\n}\n\nexport class BusinessRuleValidationError extends Error {\n  constructor(\n    public readonly brokenRule: BusinessRule,\n    message?: string\n  ) {\n    super(message || brokenRule.message)\n    this.name = 'BusinessRuleValidationError'\n  }\n}\n\n// ========================\n// Domain Service Pattern\n// ========================\n\nexport interface DomainService {\n  readonly name: string\n}\n\n// ========================\n// Factory Pattern\n// ========================\n\nexport interface Factory<TEntity, TProps = unknown> {\n  create(props: TProps): Promise<TEntity> | TEntity\n}\n\n// ========================\n// Unit of Work Pattern\n// ========================\n\nexport interface UnitOfWork {\n  begin(): Promise<void>\n  commit(): Promise<void>\n  rollback(): Promise<void>\n  registerNew<T extends Entity>(entity: T): void\n  registerUpdated<T extends Entity>(entity: T): void\n  registerDeleted<T extends Entity>(entity: T): void\n}\n\n// ========================\n// ID Types for Type Safety\n// ========================\n\nexport type Brand<T, TBrand> = T & { readonly __brand: TBrand }\n\nexport type UserId = Brand<string, 'UserId'>\nexport type PropertyId = Brand<string, 'PropertyId'>\nexport type UnitId = Brand<string, 'UnitId'>\nexport type TenantId = Brand<string, 'TenantId'>\nexport type LeaseId = Brand<string, 'LeaseId'>\nexport type MaintenanceRequestId = Brand<string, 'MaintenanceRequestId'>\nexport type OrganizationId = Brand<string, 'OrganizationId'>\nexport type DocumentId = Brand<string, 'DocumentId'>\nexport type FileId = Brand<string, 'FileId'>\nexport type ActivityId = Brand<string, 'ActivityId'>\nexport type NotificationId = Brand<string, 'NotificationId'>\nexport type ReminderLogId = Brand<string, 'ReminderLogId'>\nexport type BlogArticleId = Brand<string, 'BlogArticleId'>\nexport type CustomerInvoiceId = Brand<string, 'CustomerInvoiceId'>\n\n// Helper functions for ID creation\nexport const createId = {\n  user: (id: string): UserId => id as UserId,\n  property: (id: string): PropertyId => id as PropertyId,\n  unit: (id: string): UnitId => id as UnitId,\n  tenant: (id: string): TenantId => id as TenantId,\n  lease: (id: string): LeaseId => id as LeaseId,\n  maintenanceRequest: (id: string): MaintenanceRequestId => id as MaintenanceRequestId,\n  organization: (id: string): OrganizationId => id as OrganizationId,\n  document: (id: string): DocumentId => id as DocumentId,\n  file: (id: string): FileId => id as FileId,\n  activity: (id: string): ActivityId => id as ActivityId,\n  notification: (id: string): NotificationId => id as NotificationId,\n  reminderLog: (id: string): ReminderLogId => id as ReminderLogId,\n  blogArticle: (id: string): BlogArticleId => id as BlogArticleId,\n  customerInvoice: (id: string): CustomerInvoiceId => id as CustomerInvoiceId\n}\n\n// ========================\n// Common Value Objects\n// ========================\n\nexport class Money extends BaseValueObject<Money> {\n  constructor(\n    public readonly amount: number,\n    public readonly currency = 'USD'\n  ) {\n    super()\n    if (amount < 0) {\n      throw new Error('Money amount cannot be negative')\n    }\n    if (!currency || currency.length !== 3) {\n      throw new Error('Currency must be a valid 3-letter code')\n    }\n  }\n\n  equals(other: Money): boolean {\n    return this.amount === other.amount && this.currency === other.currency\n  }\n\n  toString(): string {\n    return `${this.amount} ${this.currency}`\n  }\n\n  add(other: Money): Money {\n    if (this.currency !== other.currency) {\n      throw new Error('Cannot add money with different currencies')\n    }\n    return new Money(this.amount + other.amount, this.currency)\n  }\n\n  subtract(other: Money): Money {\n    if (this.currency !== other.currency) {\n      throw new Error('Cannot subtract money with different currencies')\n    }\n    return new Money(this.amount - other.amount, this.currency)\n  }\n\n  multiply(multiplier: number): Money {\n    return new Money(this.amount * multiplier, this.currency)\n  }\n\n  isZero(): boolean {\n    return this.amount === 0\n  }\n\n  isPositive(): boolean {\n    return this.amount > 0\n  }\n\n  isNegative(): boolean {\n    return this.amount < 0\n  }\n}\n\nexport class Email extends BaseValueObject<Email> {\n  constructor(public readonly value: string) {\n    super()\n    if (!this.isValidEmail(value)) {\n      throw new Error('Invalid email format')\n    }\n  }\n\n  private isValidEmail(email: string): boolean {\n    // Use bounded quantifiers to prevent ReDoS attacks\n    // RFC 5321: local part max 64 chars, domain parts max 63 chars each\n    const emailRegex = /^[^\\s@]{1,64}@[^\\s@]{1,63}(?:\\.[^\\s@]{1,63})+$/\n    return emailRegex.test(email)\n  }\n\n  equals(other: Email): boolean {\n    return this.value.toLowerCase() === other.value.toLowerCase()\n  }\n\n  toString(): string {\n    return this.value\n  }\n\n  getDomain(): string {\n    const parts = this.value.split('@')\n    return parts[1] || ''\n  }\n\n  getLocalPart(): string {\n    const parts = this.value.split('@')\n    return parts[0] || ''\n  }\n}\n\nexport class PhoneNumber extends BaseValueObject<PhoneNumber> {\n  constructor(public readonly value: string) {\n    super()\n    if (!this.isValidPhoneNumber(value)) {\n      throw new Error('Invalid phone number format')\n    }\n  }\n\n  private isValidPhoneNumber(phone: string): boolean {\n    // Basic international phone number validation\n    const phoneRegex = /^\\+?[1-9]\\d{1,14}$/\n    return phoneRegex.test(phone.replace(/\\s|-/g, ''))\n  }\n\n  equals(other: PhoneNumber): boolean {\n    return this.normalize() === other.normalize()\n  }\n\n  toString(): string {\n    return this.value\n  }\n\n  private normalize(): string {\n    return this.value.replace(/\\s|-/g, '')\n  }\n}\n\nexport class Address extends BaseValueObject<Address> {\n  constructor(\n    public readonly street: string,\n    public readonly city: string,\n    public readonly state: string,\n    public readonly zipCode: string,\n    public readonly country = 'US'\n  ) {\n    super()\n    if (!street?.trim()) throw new Error('Street is required')\n    if (!city?.trim()) throw new Error('City is required')\n    if (!state?.trim()) throw new Error('State is required')\n    if (!zipCode?.trim()) throw new Error('ZIP code is required')\n    if (!country?.trim()) throw new Error('Country is required')\n  }\n\n  equals(other: Address): boolean {\n    return (\n      this.street === other.street &&\n      this.city === other.city &&\n      this.state === other.state &&\n      this.zipCode === other.zipCode &&\n      this.country === other.country\n    )\n  }\n\n  toString(): string {\n    return `${this.street}, ${this.city}, ${this.state} ${this.zipCode}, ${this.country}`\n  }\n\n  getFullAddress(): string {\n    return this.toString()\n  }\n}\n\n// ========================\n// Domain Exception Types\n// ========================\n\nexport class DomainError extends Error {\n  constructor(\n    message: string,\n    public readonly code?: string,\n    public readonly context?: Record<string, unknown>\n  ) {\n    super(message)\n    this.name = 'DomainError'\n  }\n}\n\nexport class ValidationError extends DomainError {\n  constructor(message: string, public readonly field?: string) {\n    super(message, 'VALIDATION_ERROR', { field })\n    this.name = 'ValidationError'\n  }\n}\n\nexport class NotFoundError extends DomainError {\n  constructor(entityName: string, id: string) {\n    super(`${entityName} with ID ${id} not found`, 'NOT_FOUND', { entityName, id })\n    this.name = 'NotFoundError'\n  }\n}\n\nexport class ConflictError extends DomainError {\n  constructor(message: string, context?: Record<string, unknown>) {\n    super(message, 'CONFLICT', context)\n    this.name = 'ConflictError'\n  }\n}\n\nexport class UnauthorizedError extends DomainError {\n  constructor(message = 'Unauthorized access') {\n    super(message, 'UNAUTHORIZED')\n    this.name = 'UnauthorizedError'\n  }\n}\n\nexport class ForbiddenError extends DomainError {\n  constructor(message = 'Forbidden operation') {\n    super(message, 'FORBIDDEN')\n    this.name = 'ForbiddenError'\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4402, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/validation/common.ts"],"sourcesContent":["import { z } from 'zod'\n\n// ===== BASIC VALIDATION SCHEMAS =====\n\nexport const uuidSchema = z.string()\n  .min(1, { message: 'UUID is required' })\n  .refine(\n    (val) =>\n      /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(val),\n    { message: 'Invalid UUID format' }\n  )\n\nexport const emailSchema = z.string()\n  .min(1, { message: 'Email is required' })\n  .refine(\n    (val) =>\n      /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val),\n    { message: 'Invalid email format' }\n  )\n\nexport const nonEmptyStringSchema = z.string()\n  .min(1, { message: 'This field is required' })\n\nexport const positiveNumberSchema = z.number()\n  .positive({ message: 'Must be a positive number' })\n\nexport const nonNegativeNumberSchema = z.number()\n  .nonnegative({ message: 'Cannot be negative' })\n\n// ===== PAGINATION SCHEMAS =====\n// Backend-compatible pagination schemas\n\nexport const paginationSchema = z.object({\n  page: z.number().int().positive().default(1),\n  limit: z.number().int().positive().max(100).default(10)\n})\n\nexport const paginationQuerySchema = z.object({\n  page: z.coerce.number().int().positive().default(1),\n  limit: z.coerce.number().int().positive().max(100).default(10)\n})\n\nexport const paginationResponseSchema = z.object({\n  totalCount: z.number(),\n  totalPages: z.number(),\n  currentPage: z.number(),\n  hasNextPage: z.boolean(),\n  hasPreviousPage: z.boolean()\n})\n\n// ===== DATE VALIDATION SCHEMAS =====\n\nexport const dateStringSchema = z.string().refine(\n  (val) => !val || !isNaN(Date.parse(val)),\n  { message: 'Invalid date format' }\n)\n\nexport const dateRangeSchema = z.object({\n  startDate: dateStringSchema.optional(),\n  endDate: dateStringSchema.optional(),\n})\n\n// ===== COMMON FIELD SCHEMAS =====\n\nexport const idSchema = z.object({\n  id: uuidSchema,\n})\n\nexport const timestampFieldsSchema = z.object({\n  createdAt: dateStringSchema,\n  updatedAt: dateStringSchema,\n})\n\n// ===== STATUS ENUMS =====\n\nexport const statusSchema = z.enum(['ACTIVE', 'INACTIVE', 'PENDING', 'COMPLETED', 'FAILED'])\n\nexport const sortOrderSchema = z.enum(['asc', 'desc']).optional().default('desc')\n\n// ===== SEARCH AND FILTER SCHEMAS =====\n\nexport const searchSchema = z.object({\n  search: z.string().optional(),\n  sortBy: z.string().optional(),\n  sortOrder: sortOrderSchema,\n})\n\nexport const baseQuerySchema = z.object({\n  ...paginationSchema.shape,\n  ...searchSchema.shape,\n  ...dateRangeSchema.shape,\n})\n\n// ===== RESPONSE WRAPPER SCHEMAS =====\n\nexport const successResponseSchema = z.object({\n  success: z.boolean(),\n  message: z.string().optional(),\n})\n\nexport const errorResponseSchema = z.object({\n  error: z.string(),\n  message: z.string(),\n  code: z.string().optional(),\n})\n\n// ===== METADATA SCHEMAS =====\n\nexport const metadataSchema = z.record(z.string(), z.unknown())\n\nexport const auditFieldsSchema = z.object({\n  createdBy: z.string()\n    .refine(\n      (val) =>\n        !val || /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(val),\n      { message: 'Invalid UUID format' }\n    )\n    .optional(),\n  updatedBy: z.string()\n    .refine(\n      (val) =>\n        !val || /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(val),\n      { message: 'Invalid UUID format' }\n    )\n    .optional(),\n  createdAt: z.date(),\n  updatedAt: z.date()\n})\n\n// ===== UTILITY FUNCTIONS =====\n\n// Create a paginated response schema for any data type\nexport const createPaginatedResponseSchema = <T extends z.ZodTypeAny>(itemSchema: T): z.ZodObject<{\n  data: z.ZodArray<T>\n  pagination: typeof paginationResponseSchema\n}> =>\n  z.object({\n    data: z.array(itemSchema),\n    pagination: paginationResponseSchema\n  })\n\n// Create a standard API response schema\nexport const createApiResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T): z.ZodObject<{\n  success: z.ZodBoolean\n  data: z.ZodOptional<T>\n  error: z.ZodOptional<z.ZodString>\n  message: z.ZodOptional<z.ZodString>\n}> =>\n  z.object({\n    success: z.boolean(),\n    data: dataSchema.optional(),\n    error: z.string().optional(),\n    message: z.string().optional()\n  })\n\n// Create a list response with total count\nexport const createListResponseSchema = <T extends z.ZodTypeAny>(itemSchema: T): z.ZodObject<{\n  items: z.ZodArray<T>\n  totalCount: z.ZodNumber\n  page: z.ZodNumber\n  pageSize: z.ZodNumber\n}> =>\n  z.object({\n    items: z.array(itemSchema),\n    totalCount: z.number(),\n    page: z.number(),\n    pageSize: z.number(),\n    totalPages: z.number()\n  })\n\n// ===== REACT 19 ACTION STATE SCHEMAS =====\n\nexport const actionStateSchema = z.object({\n  success: z.boolean().optional(),\n  loading: z.boolean().optional(),\n  error: z.string().optional(),\n  message: z.string().optional(),\n  data: z.unknown().optional()\n})\n\nexport const formActionStateSchema = actionStateSchema.extend({\n  fieldErrors: z.record(z.string(), z.array(z.string())).optional()\n})\n\nexport const serverActionResponseSchema = z.object({\n  success: z.boolean(),\n  data: z.unknown().optional(),\n  error: z.string().optional(),\n  message: z.string().optional(),\n  redirect: z.string().optional()\n})\n\n// ===== ENHANCED COMMON SCHEMAS =====\n\n// Phone number validation\nexport const phoneSchema = z.string()\n  .regex(/^\\+?[1-9]\\d{1,14}$/, 'Invalid phone number format')\n\n// Currency amount validation\nexport const currencyAmountSchema = z.number()\n  .min(0, 'Amount cannot be negative')\n  .max(999999999.99, 'Amount is too large')\n\n// Percentage validation\nexport const percentageSchema = z.number()\n  .min(0, 'Percentage cannot be negative')\n  .max(100, 'Percentage cannot exceed 100')\n\n// URL validation\nexport const urlSchema = z.string().refine(\n  (val) => {\n    try {\n      new URL(val)\n      return true\n    } catch {\n      return false\n    }\n  },\n  { message: 'Invalid URL format' }\n)\n\n// File validation schemas\nexport const fileTypeSchema = z.enum([\n  'image/jpeg', 'image/png', 'image/gif', 'image/webp',\n  'application/pdf', 'text/plain', 'text/csv',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'application/vnd.ms-excel'\n])\n\nexport const fileSizeSchema = z.number()\n  .min(1, 'File cannot be empty')\n  .max(10 * 1024 * 1024, 'File size cannot exceed 10MB') // 10MB\n\nexport const uploadedFileSchema = z.object({\n  name: z.string(),\n  size: fileSizeSchema,\n  type: fileTypeSchema,\n  lastModified: z.number(),\n  data: z.string().optional() // base64 data\n})\n\n// Address validation\nexport const addressSchema = z.object({\n  street: nonEmptyStringSchema,\n  city: nonEmptyStringSchema,\n  state: nonEmptyStringSchema,\n  zipCode: z.string().regex(/^\\d{5}(-\\d{4})?$/, 'Invalid ZIP code format'),\n  country: z.string().length(2, 'Country code must be 2 letters').default('US')\n})\n\n// Coordinate validation\nexport const coordinatesSchema = z.object({\n  latitude: z.number().min(-90).max(90),\n  longitude: z.number().min(-180).max(180)\n})\n\n// ===== ENHANCED QUERY SCHEMAS =====\n\nexport const sortSchema = z.object({\n  field: z.string(),\n  direction: z.enum(['asc', 'desc']).default('desc')\n})\n\nexport const advancedSearchSchema = searchSchema.extend({\n  filters: z.record(z.string(), z.unknown()).optional(),\n  sort: z.array(sortSchema).optional(),\n  include: z.array(z.string()).optional(),\n  exclude: z.array(z.string()).optional()\n})\n\nexport const timeRangeSchema = z.object({\n  from: dateStringSchema.optional(),\n  to: dateStringSchema.optional(),\n  preset: z.enum(['today', 'yesterday', 'last7days', 'last30days', 'thisMonth', 'lastMonth', 'thisYear', 'lastYear']).optional()\n})\n\n// ===== BULK OPERATION SCHEMAS =====\n\nexport const bulkOperationSchema = z.object({\n  action: z.enum(['create', 'update', 'delete', 'archive', 'restore']),\n  ids: z.array(uuidSchema).min(1, 'At least one ID is required'),\n  data: z.unknown().optional()\n})\n\nexport const bulkResponseSchema = z.object({\n  successful: z.array(uuidSchema),\n  failed: z.array(z.object({\n    id: uuidSchema,\n    error: z.string()\n  })),\n  totalProcessed: z.number(),\n  successCount: z.number(),\n  failureCount: z.number()\n})\n\n// ===== WEBHOOK SCHEMAS =====\n\nexport const webhookEventSchema = z.object({\n  id: uuidSchema,\n  type: z.string(),\n  data: z.unknown(),\n  timestamp: dateStringSchema,\n  version: z.string().default('1.0')\n})\n\nexport const webhookDeliverySchema = z.object({\n  id: uuidSchema,\n  url: urlSchema,\n  event: webhookEventSchema,\n  attempts: z.number().min(1),\n  status: z.enum(['pending', 'delivered', 'failed']),\n  response: z.object({\n    status: z.number(),\n    headers: z.record(z.string(), z.string()),\n    body: z.string()\n  }).optional(),\n  nextRetry: dateStringSchema.optional()\n})\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4696, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/validation/index.ts"],"sourcesContent":["/**\n * Shared validation schemas for TenantFlow\n * Common Zod schemas used across frontend and backend\n */\n\nexport * from './common'\n\n// Re-export specific schemas that are commonly used\nexport { \n  uuidSchema, \n  emailSchema, \n  nonEmptyStringSchema,\n  positiveNumberSchema,\n  nonNegativeNumberSchema,\n  dateStringSchema,\n  // Pagination schemas\n  paginationSchema,\n  paginationQuerySchema,\n  paginationResponseSchema,\n  // React 19 Action State schemas\n  actionStateSchema,\n  formActionStateSchema,\n  serverActionResponseSchema,\n  // Enhanced common schemas\n  phoneSchema,\n  currencyAmountSchema,\n  percentageSchema,\n  urlSchema,\n  fileTypeSchema,\n  fileSizeSchema,\n  uploadedFileSchema,\n  addressSchema,\n  coordinatesSchema,\n  // Query schemas\n  sortSchema,\n  advancedSearchSchema,\n  timeRangeSchema,\n  baseQuerySchema,\n  // Bulk operation schemas\n  bulkOperationSchema,\n  bulkResponseSchema,\n  // Webhook schemas\n  webhookEventSchema,\n  webhookDeliverySchema,\n  // Response schemas\n  successResponseSchema,\n  errorResponseSchema,\n  // Utility functions\n  createPaginatedResponseSchema,\n  createApiResponseSchema,\n  createListResponseSchema\n} from './common'\n"],"names":[],"mappings":"AAAA;;;CAGC;AAED","debugId":null}},
    {"offset": {"line": 4719, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/packages/shared/src/index.ts"],"sourcesContent":["/**\n * @repo/shared - Main export file\n * \n * This file exports commonly used types and utilities from the shared package.\n * More specific exports are available through the package.json exports map.\n */\n\n// ========================\n// Core Entity Types\n// ========================\nexport type {\n  ValidatedUser,\n  Context,\n  AuthenticatedContext,\n  RequestContext,\n  PerformanceMetrics\n} from './types/backend'\n\n// ========================\n// Activity Types\n// ========================\nexport type {\n  Activity,\n  ActivityItem,\n  ActivityFeed,\n  ActivityQuery,\n  ActivityType,\n  ActivityStatus,\n  ActivityPriority,\n  ActivityMetadata,\n  CreateActivityInput,\n  UpdateActivityInput\n} from './types/activity'\n\nexport type {\n  User,\n  UserRole,\n  AuthUser\n} from './types/auth'\n\n// Export UserRole constants\nexport { USER_ROLE } from './constants/auth'\n\n// Global type declarations (augmentations)\nimport './types/global'\n\nexport type {\n  Property,\n  Unit,\n  PropertyType,\n  UnitStatus,\n  PropertyStats,\n  PropertyEntitlements\n} from './types/properties'\n\nexport type {\n  Tenant,\n  TenantStats,\n  CurrentLeaseInfo\n} from './types/tenants'\n\nexport type {\n  Lease,\n  LeaseStatus,\n  LeaseTemplateData,\n  StateLeaseRequirements\n} from './types/leases'\n\nexport type {\n  MaintenanceRequest,\n  Priority as MaintenancePriority,\n  RequestStatus as MaintenanceStatus\n} from './types/maintenance'\n\nexport type {\n  Document,\n  DocumentType,\n  File,\n  FileUploadProgress,\n  FileUploadOptions,\n  FileUploadResult\n} from './types/files'\n\nexport type {\n  ReminderLog,\n  ReminderType as ReminderTypeInterface,\n  ReminderStatus as ReminderStatusInterface\n} from './types/reminders'\n\nexport {\n  getReminderTypeLabel,\n  getReminderStatusLabel,\n  getReminderStatusColor\n} from './types/reminders'\n\nexport type {\n  Invoice as BillingInvoice\n} from './types/billing'\n\n// ========================\n// Extended Types with Relations\n// ========================\nexport type {\n  PropertyWithDetails,\n  PropertyWithUnits,\n  PropertyWithUnitsAndLeases,\n  UnitWithDetails,\n  TenantWithDetails,\n  TenantWithLeases,\n  LeaseWithDetails,\n  LeaseWithRelations,\n  MaintenanceWithDetails,\n  MaintenanceRequestWithRelations,\n  NotificationWithDetails,\n  NotificationWithRelations,\n  UnitWithProperty,\n  UserWithProperties\n} from './types/relations'\n\n// ========================\n// Query Types\n// ========================\nexport type {\n  PropertyQuery,\n  TenantQuery,\n  UnitQuery,\n  LeaseQuery,\n  MaintenanceQuery,\n  NotificationQuery\n} from './types/queries'\n\n// ========================\n// API Input Types\n// ========================\n// Property Input Types from properties module\nexport type {\n  CreatePropertyInput,\n  UpdatePropertyInput\n} from './types/properties'\n\nexport type {\n  CreateUnitInput,\n  UpdateUnitInput,\n  CreateTenantInput,\n  UpdateTenantInput,\n  CreateLeaseInput,\n  UpdateLeaseInput,\n  CreateMaintenanceInput,\n  UpdateMaintenanceInput,\n  RegisterInput,\n  LoginInput,\n  RefreshTokenInput,\n  ForgotPasswordInput,\n  ResetPasswordInput,\n  ChangePasswordInput,\n  AuthCallbackInput,\n  EnsureUserExistsInput,\n  UpdateUserProfileInput,\n  PropertyFormData,\n  CheckoutParams,\n  TrialParams,\n  DirectSubscriptionParams,\n  SubscriptionUpdateParams,\n  PropertyQueryInput,\n  UsePropertyFormDataProps,\n  CreateCheckoutInput,\n  CreatePortalInput\n} from './types/api-inputs'\n\n// ========================\n// API Response Types\n// ========================\nexport type {\n  CheckoutResponse,\n  PortalResponse,\n  TrialResponse,\n  ApiSubscriptionCreateResponse,\n  PropertyCreateResponse,\n  PropertyListResponse,\n  PropertyStatsResponse,\n  UnitCreateResponse,\n  UnitListResponse,\n  TenantCreateResponse,\n  TenantListResponse,\n  TenantStatsResponse,\n  LeaseCreateResponse,\n  LeaseListResponse,\n  MaintenanceCreateResponse,\n  MaintenanceListResponse,\n  UsageMetricsResponse,\n  ActivityFeedResponse,\n  ApiSuccessResponse,\n  ApiErrorResponse,\n  ApiPaginatedResponse\n} from './types/responses'\n\n// Dashboard API types\nexport type { DashboardStats } from './types/api'\n\n// ========================\n// Stripe & Billing Types (Unified)\n// ========================\nexport type {\n  // Core types\n  PlanType,\n  BillingPeriod, \n  SubscriptionStatus,\n  UserSubscription,\n  PlanConfig,\n  UsageMetrics,\n  PaymentMethod,\n  Invoice,\n  \n  // Configuration\n  StripeConfig,\n  StripeEnvironmentConfig,\n  StripePlanPriceIds,\n  \n  // Error handling\n  StripeErrorCode,\n  StripeErrorCategory,\n  StripeErrorSeverity,\n  StandardizedStripeError,\n  StripeRetryConfig,\n  ClientSafeStripeError,\n  \n  // API types\n  CreateCheckoutSessionParams,\n  CreatePortalSessionParams,\n  UpdateSubscriptionParams,\n  PreviewInvoiceParams,\n  CreateSubscriptionRequest,\n  CreateSubscriptionResponse,\n  \n  // Webhook types\n  WebhookEventType,\n  StripeWebhookEvent,\n  WebhookEventHandlers,\n  \n  // Response types\n  StripeApiResponse,\n  StripeSuccessResponse,\n  StripeErrorResponse,\n  \n  // Frontend integration\n  StripeElementEvent,\n  StripeCardElementEvent,\n  StripePaymentElementEvent,\n  StripeElementEventCallback,\n  StripeCardElementEventCallback,\n  StripePaymentElementEventCallback\n} from './types/stripe'\n\n// ========================\n// New Stripe Pricing Types\n// ========================\nexport type {\n  BillingInterval,\n  CreateCheckoutSessionRequest,\n  CreateCheckoutSessionResponse,\n  CreatePortalSessionRequest,\n  CreatePortalSessionResponse,\n  PricingComponentProps,\n  PricingCardProps\n} from './types/stripe-pricing'\n\nexport {\n  calculateYearlySavings,\n  getStripeErrorMessage,\n  validatePricingPlan\n} from './types/stripe-pricing'\n\nexport {\n  // Constants\n  PLAN_TYPES,\n  BILLING_PERIODS,\n  SUBSCRIPTION_STATUSES,\n  STRIPE_API_VERSIONS,\n  STRIPE_ERROR_CODES,\n  STRIPE_DECLINE_CODES,\n  STRIPE_ERROR_CATEGORIES,\n  STRIPE_ERROR_SEVERITIES,\n  WEBHOOK_EVENT_TYPES,\n  DEFAULT_STRIPE_RETRY_CONFIG,\n  ERROR_CATEGORY_MAPPING,\n  ERROR_SEVERITY_MAPPING,\n  RETRYABLE_ERROR_CODES\n} from './types/stripe'\n\n// ========================\n// Stripe Error Handler Types  \n// ========================\nexport type {\n  ExecuteContext,\n  RetryConfig,\n  ExecuteParams,\n  AsyncWrapParams\n} from './types/stripe-error-handler'\n\n// ========================\n// Stripe Type Guards\n// ========================\nexport {\n  StripeTypeGuards,\n  // Individual guards for tree-shaking\n  isPlanType,\n  isBillingPeriod,\n  isSubscriptionStatus,\n  isWebhookEventType,\n  isStripeErrorCode,\n  isStandardizedStripeError,\n  isStripeWebhookEvent,\n  isPaymentMethod,\n  isUserSubscription,\n  isPlanConfig,\n  isStripeConfig,\n  isRetryableError as isStripeRetryableError,\n  isCardError,\n  isRateLimitError,\n  isInfrastructureError,\n  isConfigurationError,\n  isCriticalError,\n  isStripeId,\n  isStripeCustomerId,\n  isStripeSubscriptionId,\n  isStripePriceId\n} from './types/stripe-guards'\n\n// ========================\n// Stripe Utilities\n// ========================\nexport {\n  StripeUtils,\n  // Individual utilities for tree-shaking\n  generateErrorId,\n  getErrorCategory,\n  getErrorSeverity,\n  calculateRetryDelay,\n  toClientSafeError,\n  createStandardizedError,\n  generateUserMessage,\n  getPlanTypeFromPriceId,\n  getBillingPeriodFromPriceId,\n  formatPrice as formatStripePrice,\n  calculateAnnualSavings as calculateStripeAnnualSavings,\n  getPlanDisplayName,\n  isActiveSubscription,\n  isInGracePeriod,\n  getSubscriptionStatusDisplay,\n  getDaysUntilExpiry,\n  getTrialDaysRemaining,\n  sanitizeMetadata,\n  generateIdempotencyKey\n} from './types/stripe-utils'\n\n// ========================\n// Billing Types (excluding duplicates from Stripe types)\n// ========================\nexport type {\n  Plan,\n  Subscription,\n  UserPlan,\n  SubscriptionData,\n  DetailedUsageMetrics,\n  PlanLimits,\n  LimitChecks,\n  UsageData,\n  LocalSubscriptionData,\n  EnhancedUserPlan,\n  // New types for 4-tier system\n  TrialConfig,\n  ProductTierConfig,\n  SubscriptionChangePreview\n} from './types/billing'\n\nexport {\n  PLAN_TYPE,\n  STRIPE_ERRORS,\n  getPlanTypeLabel\n} from './types/billing'\n\n// ========================\n// Pricing Configuration\n// ========================\nexport {\n  PRODUCT_TIERS,\n  getProductTier,\n  getStripePriceId,\n  hasTrial,\n  getTrialConfig,\n  checkPlanLimits,\n  getRecommendedUpgrade,\n  calculateAnnualSavings\n} from './config/pricing'\n\n// ========================\n// Invoice Types\n// ========================\nexport type {\n  CustomerInvoice,\n  CustomerInvoiceItem\n} from './types/invoices'\n\nexport type {\n  CustomerInvoiceForm,\n  InvoiceItemForm\n} from './types/invoice-lead'\n\n// ========================\n// Analytics Types\n// ========================\nexport type {\n  AnalyticsEventData\n} from './types/analytics'\n\n// ========================\n// Blog Types\n// ========================\nexport type {\n  BlogArticle,\n  BlogArticleWithDetails,\n  BlogArticleListItem,\n  BlogArticleInput,\n  BlogTag,\n  BlogTagInput,\n  BlogFilters,\n  BlogPagination,\n  BlogAnalytics,\n  BlogSEOData,\n  BlogCategory,\n  BlogStatus\n} from './types/blog'\n\n// ========================\n// Lease Generator Types\n// ========================\nexport type {\n  LeaseFormData,\n  LeaseGeneratorForm,\n  LeaseOutputFormat,\n  LeaseGenerationResult,\n  LeaseGeneratorUsage\n} from './types/lease-generator'\n\nexport {\n  leaseFormSchema\n} from './types/lease-generator'\n\n// ========================\n// Notification Types\n// ========================\nexport type {\n  Notification,\n  NotificationType,\n  NotificationPriority,\n  UseWebSocketOptions\n} from './types/notifications'\n\n// ========================\n// Auth Types\n// ========================\nexport type {\n  AuthResponse,\n  SupabaseJwtPayload\n} from './types/auth'\n\n// ========================\n// WebSocket Types\n// ========================\nexport type {\n  WebSocketMessage\n} from './types/websocket'\n\n// ========================\n// Constants\n// ========================\nexport * from './constants'\n\nexport type { TenantStatus } from './constants/tenants'\nexport { TENANT_STATUS } from './constants/tenants'\nexport type { ReminderType, ReminderStatus } from './constants/reminders'\nexport { REMINDER_TYPE, REMINDER_STATUS } from './constants/reminders'\n\n// ========================\n// Security Types\n// ========================\nexport {\n  SecurityEventType,\n  SecurityEventSeverity as SecuritySeverity,\n  SecurityEventSeverity\n} from './types/security'\n\nexport type {\n  SecurityEvent,\n  SecurityAuditLog,\n  SecurityMetrics,\n  ComplianceStatus\n} from './types/security'\n\n// ========================\n// Row Level Security (RLS) Types\n// ========================\nexport type {\n  RLSPolicy,\n  RLSTableStatus,\n  RLSPolicyInfo,\n  RLSAuditReport,\n  RLSTestResult,\n  RLSTestSuite,\n  RLSTableConfig,\n  TenantIsolationTest\n} from './types/rls'\n\n// ========================\n// Session Types\n// ========================\nexport type {\n  SessionData,\n  TokenPair\n} from './types/session'\n\n// ========================\n// Email Types\n// ========================\nexport type {\n  EmailOptions,\n  SendEmailResponse\n} from './types/email'\n\n// ========================\n// Logger Types\n// ========================\nexport type {\n  LogEntry,\n  LoggerConfig\n} from './types/logger'\n\n// Export LogLevel const object\nexport { LogLevel } from './types/logger'\n\n// ========================\n// Error Types\n// ========================\nexport type {\n  AppError,\n  AuthError,\n  ValidationError as SharedValidationError,\n  NetworkError,\n  ServerError,\n  BusinessError,\n  FileUploadError,\n  PaymentError,\n  ErrorResponse,\n  SuccessResponse,\n  ApiResponse as SharedApiResponse,\n  ControllerApiResponse,\n  ErrorContext\n} from './types/errors'\n\nexport type {\n  StandardError,\n  ErrorType,\n  ErrorSeverity\n} from './utils'\n\n// ========================\n// Utilities\n// ========================\nexport {\n  calculateProratedAmount,\n  calculateAnnualPrice,\n  SUBSCRIPTION_URLS\n} from './utils'\n\nexport {\n  formatCurrency,\n  formatPrice,\n  formatCompactCurrency,\n  formatPercentage,\n  formatNumber,\n  formatCurrencyChange,\n  formatPercentageChange,\n  getDashboardCurrency,\n  getDashboardPercentage,\n  getCollectionRateStatus,\n  getIntervalSuffix,\n  formatPriceFromCents,\n  formatPriceWithInterval\n} from './utils'\n\nexport type {\n  BillingInterval as CurrencyBillingInterval,\n  CurrencyCode,\n  CurrencyFormatOptions,\n  PriceFormatOptions\n} from './utils'\n\nexport {\n  createStandardError,\n  createValidationError,\n  createNetworkError,\n  createBusinessLogicError,\n  classifyError,\n  isRetryableError,\n  getErrorLogLevel,\n  ERROR_TYPES\n} from './utils'\n\n// Type adapter utilities (using utils barrel export for CI compatibility)\nexport {\n  createQueryAdapter,\n  createMutationAdapter,\n  createResponseAdapter,\n  validateApiParams,\n  validateEnumValue,\n  safeParseNumber,\n  safeParseDate,\n  mergeApiParams,\n  createApiCall,\n  isValidQueryParam,\n  isValidMutationData,\n  TypeAdapterError,\n  handleAdapterError\n} from './utils'\n\n// ========================\n// Note: Database Types\n// ========================\n// Database types are now imported directly from @repo/database\n// in each package that needs them. This avoids circular dependencies\n// during build and follows proper dependency patterns.\n//\n// Import database types like this:\n// import { User, Property, PrismaClient } from '@repo/database'\n\n// ========================\n// React 19 Action State Types\n// ========================\nexport interface ActionState<TData = unknown> {\n  success?: boolean\n  loading?: boolean\n  error?: string\n  message?: string\n  data?: TData\n}\n\nexport type FormActionState<TData = unknown> = ActionState<TData> & {\n  fieldErrors?: Record<string, string[]>\n}\n\nexport interface OptimisticState<TData = unknown> {\n  isSubmitting: boolean\n  data?: TData\n  message?: string\n}\n\nexport interface AsyncFormHandler<TArgs extends unknown[] = unknown[]> {\n  handler: (...args: TArgs) => void\n  isPending: boolean\n}\n\nexport interface AsyncClickHandler<TArgs extends unknown[] = unknown[]> {\n  handler: (...args: TArgs) => void\n  isPending: boolean\n}\n\n// Form action function type for React 19 useActionState\nexport type FormAction<TData = unknown> = (\n  prevState: ActionState<TData>,\n  formData: FormData\n) => Promise<ActionState<TData>>\n\n// Server action response type\nexport interface ServerActionResponse<TData = unknown> {\n  success: boolean\n  data?: TData\n  error?: string\n  message?: string\n  redirect?: string\n}\n\n// ========================\n// Common Frontend Utility Types\n// ========================\nexport type WithOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport type WithRequired<T, K extends keyof T> = T & Required<Pick<T, K>>\n\nexport type PartialExcept<T, K extends keyof T> = Partial<T> & Pick<T, K>\n\nexport type SharedDeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? SharedDeepPartial<T[P]> : T[P]\n}\n\nexport type LoadingState = 'idle' | 'loading' | 'success' | 'error'\n\nexport interface AsyncOperationState<TData = unknown, TError = Error> {\n  data?: TData\n  error?: TError\n  isLoading: boolean\n  isSuccess: boolean\n  isError: boolean\n}\n\n// ========================\n// Enhanced Pagination Types\n// ========================\nexport interface PaginationMeta {\n  totalCount: number\n  totalPages: number\n  currentPage: number\n  pageSize: number\n  hasNextPage: boolean\n  hasPreviousPage: boolean\n  startCursor?: string\n  endCursor?: string\n}\n\nexport interface PaginatedResponse<T> {\n  data: T[]\n  meta: PaginationMeta\n}\n\nexport interface CursorPaginationParams {\n  first?: number\n  after?: string\n  last?: number\n  before?: string\n}\n\nexport interface OffsetPaginationParams {\n  page?: number\n  limit?: number\n  offset?: number\n}\n\n// ========================\n// Domain Event Types\n// ========================\nexport interface DomainEvent<TPayload = unknown> {\n  id: string\n  type: string\n  payload: TPayload\n  timestamp: Date\n  aggregateId: string\n  aggregateType: string\n  version: number\n  metadata?: Record<string, unknown>\n}\n\nexport type EventHandler<TEvent extends DomainEvent = DomainEvent> = (\n  event: TEvent\n) => Promise<void> | void\n\n// ========================\n// API Client Types\n// ========================\nexport interface ApiClientConfig {\n  baseURL: string\n  timeout?: number\n  headers?: Record<string, string>\n  retryAttempts?: number\n  retryDelay?: number\n}\n\nexport interface ApiRequestConfig {\n  url: string\n  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE'\n  data?: unknown\n  params?: Record<string, unknown>\n  headers?: Record<string, string>\n  timeout?: number\n}\n\nexport interface ApiResponse<T = unknown> {\n  data: T\n  status: number\n  statusText: string\n  headers: Record<string, string>\n}\n\n// ========================\n// Domain-Driven Design Types\n// ========================\nexport type {\n  // Base patterns\n  ValueObject,\n  Entity,\n  AggregateRoot,\n  DomainEvent as SharedDomainEvent,\n  Repository,\n  QueryRepository,\n  Specification,\n  Command,\n  Query,\n  CommandHandler,\n  QueryHandler,\n  BusinessRule,\n  DomainService,\n  Factory,\n  UnitOfWork,\n  \n  // Result pattern\n  Result,\n  Result as DomainResult,\n  Success,\n  Failure,\n  \n  // Branded ID types\n  Brand,\n  UserId,\n  PropertyId,\n  UnitId,\n  TenantId,\n  LeaseId,\n  MaintenanceRequestId,\n  OrganizationId,\n  DocumentId,\n  FileId,\n  ActivityId,\n  NotificationId,\n  ReminderLogId,\n  BlogArticleId,\n  CustomerInvoiceId\n} from './types/domain'\n\nexport {\n  // Classes and utilities\n  BaseValueObject,\n  BaseEntity,\n  BaseSpecification,\n  Result as DomainResultClass,\n  Money,\n  Email,\n  PhoneNumber,\n  Address,\n  createId,\n  \n  // Domain exceptions\n  DomainError,\n  ValidationError,\n  NotFoundError,\n  ConflictError,\n  UnauthorizedError,\n  ForbiddenError,\n  BusinessRuleValidationError\n} from './types/domain'\n\n// ========================\n// Utility Types\n// ========================\nexport type {\n  // Type manipulation\n  PartialBy,\n  RequiredBy,\n  NonNullable,\n  DeepReadonly,\n  DeepPartial as UtilityDeepPartial,\n  KeysOfType,\n  PickByType,\n  OmitByType,\n  ValueOf,\n  ArrayElement,\n  FunctionWithParams,\n  PromiseReturnType,\n  NonFunctionKeys,\n  NonFunctionProps,\n  \n  // Conditional types\n  IsArray,\n  IsFunction,\n  IsPromise,\n  IsEqual,\n  IsNever,\n  \n  // String manipulation\n  CamelCase,\n  SnakeCase,\n  KebabCase,\n  CamelCaseKeys,\n  SnakeCaseKeys,\n  \n  // Object manipulation\n  Merge,\n  OptionalExcept,\n  Diff,\n  Intersection,\n  Flatten,\n  Nullable,\n  OptionalNullable,\n  \n  // API types\n  ApiResponse as UtilityApiResponse,\n  PaginatedApiResponse,\n  \n  // Form and validation\n  FieldError,\n  FormErrors,\n  ValidationResult,\n  FormSubmissionState,\n  \n  // Event handlers\n  EventHandler as UtilityEventHandler,\n  AsyncEventHandler,\n  ChangeHandler,\n  ClickHandler,\n  SubmitHandler,\n  \n  // Component props\n  BaseProps,\n  DisablableProps,\n  LoadableProps,\n  SizedProps,\n  VariantProps,\n  WithChildren,\n  AsProps,\n  \n  // Store and state\n  BaseState,\n  DataState,\n  ListState,\n  StoreActions,\n  \n  // Configuration\n  Environment,\n  FeatureFlags,\n  ApiConfig,\n  DatabaseConfig,\n  \n  // Time and date\n  DateRange,\n  TimePeriod,\n  \n  // File and upload\n  FileMetadata,\n  UploadProgress,\n  UploadStatus,\n  FileUploadState,\n  \n  // Search and filter\n  SortDirection,\n  SortConfig,\n  FilterValue,\n  FilterOperator,\n  FilterCondition,\n  SearchConfig\n} from './types/utilities'\n\n// ========================\n// Router Context Types\n// ========================\nexport type { RouterContext, EnhancedRouterContext, UserContext, LoaderError, EnhancedError, LoaderParams, LoaderFunction } from './types/router-context'\n\n// ========================\n// Utilities\n// ========================\nexport * from './utils'\n\n// ========================\n// Validation\n// ========================\nexport * from './validation'\n"],"names":[],"mappings":"AAAA;;;;;CAKC,GAED,2BAA2B;AAC3B,oBAAoB;AACpB,2BAA2B;;AA+B3B,4BAA4B;AAC5B;AAEA,2CAA2C;AAC3C;AA6CA;AAiLA;AAMA;AA2BA,2BAA2B;AAC3B,qBAAqB;AACrB,2BAA2B;AAC3B;AA0BA,2BAA2B;AAC3B,mBAAmB;AACnB,2BAA2B;AAC3B;AA4CA;AAMA,2BAA2B;AAC3B,wBAAwB;AACxB,2BAA2B;AAC3B;AA4DA;AA6BA,2BAA2B;AAC3B,YAAY;AACZ,2BAA2B;AAC3B;AAGA;AAEA;AAEA,2BAA2B;AAC3B,iBAAiB;AACjB,2BAA2B;AAC3B;AAmDA,+BAA+B;AAC/B;AA2BA,2BAA2B;AAC3B,YAAY;AACZ,2BAA2B;AAC3B;AAkQA;AAoIA,2BAA2B;AAC3B,aAAa;AACb,2BAA2B;AAC3B","debugId":null}},
    {"offset": {"line": 4825, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/hooks/api/use-properties.ts"],"sourcesContent":["/**\n * React Query hooks for Properties\n * Provides type-safe data fetching and mutations with optimistic updates\n */\nimport { \n  type UseQueryResult,\n  type UseMutationResult,\n  useQueryClient\n} from '@tanstack/react-query'\nimport { apiClient } from '@/lib/api-client'\nimport { queryKeys } from '@/lib/react-query/query-client'\nimport type { \n  Property, \n  PropertyQuery, \n  CreatePropertyInput, \n  UpdatePropertyInput \n} from '@repo/shared'\nimport { createMutationAdapter, createQueryAdapter } from '@repo/shared'\nimport { useQueryFactory,  useDetailQuery, useMutationFactory, useStatsQuery } from '../query-factory'\n\n/**\n * Fetch list of properties with optional filters\n */\nexport function useProperties(\n  query?: PropertyQuery,\n  options?: { enabled?: boolean }\n): UseQueryResult<Property[], Error> {\n  return useQueryFactory({\n    queryKey: ['tenantflow', 'properties', 'list', query],\n    queryFn: async () => {\n      try {\n        const response = await apiClient.get<Property[]>('/properties', { \n          params: createQueryAdapter(query)\n        })\n        return response.data\n      } catch {\n        console.warn('Properties API unavailable, returning empty list')\n        return [] // Return empty array on error to allow UI to render\n      }\n    },\n    enabled: options?.enabled ?? true,\n    staleTime: 5 * 60 * 1000\n  })\n}\n\n/**\n * Fetch single property by ID\n */\nexport function useProperty(\n  id: string,\n  options?: { enabled?: boolean }\n): UseQueryResult<Property, Error> {\n  return useDetailQuery(\n    'properties',\n    Boolean(id) && (options?.enabled ?? true) ? id : undefined,\n    async (id: string) => {\n      const response = await apiClient.get<Property>(`/properties/${id}`)\n      return response.data\n    }\n  )\n}\n\n/**\n * Fetch property statistics\n */\nexport function usePropertyStats(): UseQueryResult<{\n  total: number\n  occupied: number\n  vacant: number\n  occupancyRate: number\n  totalMonthlyRent: number\n  averageRent: number\n}, Error> {\n  return useStatsQuery(\n    'properties',\n    async () => {\n      const response = await apiClient.get<{\n        total: number\n        occupied: number\n        vacant: number\n        occupancyRate: number\n        totalMonthlyRent: number\n        averageRent: number\n      }>('/properties/stats')\n      return response.data\n    }\n  )\n}\n\n/**\n * Create new property with optimistic updates\n */\nexport function useCreateProperty(): UseMutationResult<\n  Property,\n  Error,\n  CreatePropertyInput\n> {\n  return useMutationFactory({\n    mutationFn: async (data: CreatePropertyInput) => {\n      const response = await apiClient.post<Property>('/properties', createMutationAdapter(data))\n      return response.data\n    },\n    invalidateKeys: [\n      queryKeys.properties(),\n      queryKeys.propertyStats()\n    ],\n    successMessage: 'Property created successfully',\n    errorMessage: 'Failed to create property',\n    optimisticUpdate: {\n      queryKey: queryKeys.propertyList(),\n      updater: (oldData: unknown, variables: CreatePropertyInput) => {\n        const previousProperties = oldData as Property[]\n        return previousProperties ? [...previousProperties, { \n          ...variables, \n          id: `temp-${Date.now()}`,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        } as Property] : []\n      }\n    }\n  })\n}\n\n/**\n * Update property with optimistic updates\n */\nexport function useUpdateProperty(): UseMutationResult<\n  Property,\n  Error,\n  { id: string; data: UpdatePropertyInput }\n> {\n  return useMutationFactory({\n    mutationFn: async ({ id, data }) => {\n      const response = await apiClient.put<Property>(\n        `/properties/${id}`,\n        createMutationAdapter(data)\n      )\n      return response.data\n    },\n    invalidateKeys: [\n      queryKeys.properties(),\n      queryKeys.propertyStats()\n    ],\n    successMessage: 'Property updated successfully',\n    errorMessage: 'Failed to update property',\n    optimisticUpdate: {\n      queryKey: queryKeys.propertyList(),\n      updater: (oldData: unknown, { id, data }: { id: string; data: UpdatePropertyInput }) => {\n        const previousList = oldData as Property[]\n        return previousList ? previousList.map(p => \n          p.id === id ? { ...p, ...data } : p\n        ) : []\n      }\n    }\n  })\n}\n\n/**\n * Delete property with optimistic updates\n */\nexport function useDeleteProperty(): UseMutationResult<\n  void,\n  Error,\n  string\n> {\n  return useMutationFactory({\n    mutationFn: async (id: string) => {\n      await apiClient.delete(`/properties/${id}`)\n    },\n    invalidateKeys: [\n      queryKeys.properties(),\n      queryKeys.propertyStats()\n    ],\n    successMessage: 'Property deleted successfully',\n    errorMessage: 'Failed to delete property',\n    optimisticUpdate: {\n      queryKey: queryKeys.propertyList(),\n      updater: (oldData: unknown, id: string) => {\n        const previousList = oldData as Property[]\n        return previousList ? previousList.filter(p => p.id !== id) : []\n      }\n    }\n  })\n}\n\n/**\n * Prefetch property data (for hover effects, etc.)\n */\nexport function usePrefetchProperty() {\n  const queryClient = useQueryClient()\n\n  return (id: string) => {\n    queryClient.prefetchQuery({\n      queryKey: queryKeys.propertyDetail(id),\n      queryFn: async () => {\n        const response = await apiClient.get<Property>(`/properties/${id}`)\n        return response.data\n      },\n      staleTime: 10 * 1000, // Consider data stale after 10 seconds\n    })\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5048, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"span\"> &\n  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB,kZACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,KAM6C;QAN7C,EACb,SAAS,EACT,OAAO,EACP,UAAU,KAAK,EACf,GAAG,OAEuD,GAN7C;IAOb,MAAM,OAAO,UAAU,mKAAA,CAAA,OAAI,GAAG;IAE9B,qBACE,6LAAC;QACC,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;KAhBS","debugId":null}},
    {"offset": {"line": 5101, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/components/ui/progress.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Progress({\n  className,\n  value,\n  ...props\n}: React.ComponentProps<typeof ProgressPrimitive.Root>) {\n  return (\n    <ProgressPrimitive.Root\n      data-slot=\"progress\"\n      className={cn(\n        \"bg-primary/20 relative h-2 w-full overflow-hidden rounded-full\",\n        className\n      )}\n      {...props}\n    >\n      <ProgressPrimitive.Indicator\n        data-slot=\"progress-indicator\"\n        className=\"bg-primary h-full w-full flex-1 transition-all\"\n        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n      />\n    </ProgressPrimitive.Root>\n  )\n}\n\nexport { Progress }\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AAOA,SAAS,SAAS,KAIoC;QAJpC,EAChB,SAAS,EACT,KAAK,EACL,GAAG,OACiD,GAJpC;IAKhB,qBACE,6LAAC,uKAAA,CAAA,OAAsB;QACrB,aAAU;QACV,WAAW,CAAA,GAAA,0IAAA,CAAA,KAAE,AAAD,EACV,kEACA;QAED,GAAG,KAAK;kBAET,cAAA,6LAAC,uKAAA,CAAA,YAA2B;YAC1B,aAAU;YACV,WAAU;YACV,OAAO;gBAAE,WAAW,AAAC,eAAiC,OAAnB,MAAM,CAAC,SAAS,CAAC,GAAE;YAAI;;;;;;;;;;;AAIlE;KArBS","debugId":null}},
    {"offset": {"line": 5147, "column": 0}, "map": {"version":3,"sources":["file:///Users/richard/Developer/tenant-flow/apps/frontend/src/components/dashboard/dashboard-client.tsx"],"sourcesContent":["'use client'\n\nimport { useDashboardStats } from '@/hooks/api/use-dashboard'\nimport { useProperties } from '@/hooks/api/use-properties'\nimport type { Property } from '@repo/shared'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { \n  AlertTriangle, \n  Building2, \n  Users, \n  FileText, \n  Wrench,\n  ArrowRight,\n  Sparkles,\n  CheckCircle2,\n  Home,\n  TrendingUp,\n  Calendar\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useState, useEffect } from 'react'\nimport { cn } from '@/lib/utils'\n\n// First-time user detection and progress tracking\nfunction useOnboardingProgress() {\n  const { data: stats } = useDashboardStats()\n  const [dismissed, setDismissed] = useState(false)\n  \n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const dismissedKey = 'onboarding-dismissed'\n      setDismissed(localStorage.getItem(dismissedKey) === 'true')\n    }\n  }, [])\n  \n  const steps = [\n    { \n      id: 'property', \n      label: 'Add a property', \n      completed: (stats?.properties?.totalProperties || 0) > 0,\n      href: '/properties/new',\n      icon: Building2\n    },\n    { \n      id: 'tenant', \n      label: 'Add a tenant', \n      completed: (stats?.tenants?.totalTenants || 0) > 0,\n      href: '/tenants/new',\n      icon: Users\n    },\n    { \n      id: 'lease', \n      label: 'Create a lease', \n      completed: (stats?.leases?.activeLeases || 0) > 0,\n      href: '/leases/new',\n      icon: FileText\n    }\n  ]\n  \n  const completedSteps = steps.filter(s => s.completed).length\n  const progress = (completedSteps / steps.length) * 100\n  const isNewUser = completedSteps === 0\n  const isPartiallyComplete = completedSteps > 0 && completedSteps < steps.length\n  \n  const dismissOnboarding = () => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('onboarding-dismissed', 'true')\n      setDismissed(true)\n    }\n  }\n  \n  return {\n    steps,\n    progress,\n    isNewUser,\n    isPartiallyComplete,\n    completedSteps,\n    dismissed,\n    dismissOnboarding\n  }\n}\n\n// Enhanced onboarding banner for first-time users\nexport function OnboardingBanner() {\n  const { steps, progress, isNewUser, isPartiallyComplete, completedSteps, dismissed, dismissOnboarding } = useOnboardingProgress()\n  \n  if (dismissed || (!isNewUser && !isPartiallyComplete)) {\n    return null\n  }\n  \n  return (\n    <Card className={cn(\n      \"border-2 transition-all duration-300\",\n      isNewUser ? \"border-primary/50 bg-primary/5\" : \"border-green-500/50 bg-green-50/50 dark:bg-green-950/20\"\n    )}>\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-1\">\n            <CardTitle className=\"flex items-center gap-2\">\n              {isNewUser ? (\n                <>\n                  <Sparkles className=\"h-5 w-5 text-primary\" />\n                  Welcome to TenantFlow!\n                </>\n              ) : (\n                <>\n                  <TrendingUp className=\"h-5 w-5 text-green-600\" />\n                  Great progress!\n                </>\n              )}\n            </CardTitle>\n            <CardDescription>\n              {isNewUser \n                ? \"Let's get you started with your property management journey\"\n                : `You're ${completedSteps}/3 of the way through setup`}\n            </CardDescription>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            onClick={dismissOnboarding}\n            className=\"text-muted-foreground hover:text-foreground\"\n          >\n            Dismiss\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Setup Progress</span>\n            <span className=\"font-medium\">{Math.round(progress)}%</span>\n          </div>\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n        \n        <div className=\"grid gap-2 sm:grid-cols-3\">\n          {steps.map((step) => {\n            const Icon = step.icon\n            return (\n              <Link\n                key={step.id}\n                href={step.completed ? '#' : step.href}\n                className={cn(\n                  \"group relative flex items-center gap-3 rounded-lg border p-3 transition-all\",\n                  step.completed \n                    ? \"border-green-500/50 bg-green-50/50 dark:bg-green-950/20\" \n                    : \"border-border hover:border-primary/50 hover:bg-accent\"\n                )}\n              >\n                <div className={cn(\n                  \"flex h-8 w-8 items-center justify-center rounded-full\",\n                  step.completed\n                    ? \"bg-green-600 text-white\"\n                    : \"bg-muted text-muted-foreground group-hover:bg-primary group-hover:text-white\"\n                )}>\n                  {step.completed ? (\n                    <CheckCircle2 className=\"h-4 w-4\" />\n                  ) : (\n                    <Icon className=\"h-4 w-4\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <p className={cn(\n                    \"text-sm font-medium leading-none\",\n                    step.completed && \"line-through opacity-60\"\n                  )}>\n                    {step.label}\n                  </p>\n                  {step.completed && (\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Completed</p>\n                  )}\n                </div>\n                {!step.completed && (\n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground opacity-0 transition-opacity group-hover:opacity-100\" />\n                )}\n              </Link>\n            )\n          })}\n        </div>\n        \n        {isNewUser && (\n          <Alert className=\"border-primary/50 bg-primary/5\">\n            <Sparkles className=\"h-4 w-4\" />\n            <AlertTitle>Pro tip</AlertTitle>\n            <AlertDescription>\n              Start by adding your first property, then add tenants and create leases to manage your rentals efficiently.\n            </AlertDescription>\n          </Alert>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\n// Main dashboard statistics component\nexport function DashboardStats() {\n  const { data: stats, isLoading, error } = useDashboardStats()\n  const { data: properties } = useProperties()\n  \n  if (isLoading) {\n    return (\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardHeader className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-24\" />\n              <Skeleton className=\"h-8 w-32\" />\n            </CardHeader>\n          </Card>\n        ))}\n      </div>\n    )\n  }\n  \n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertTriangle className=\"h-4 w-4\" />\n        <AlertTitle>Error loading dashboard</AlertTitle>\n        <AlertDescription>\n          There was a problem loading your dashboard data. Please try refreshing the page.\n        </AlertDescription>\n      </Alert>\n    )\n  }\n  \n  const statCards = [\n    {\n      title: 'Total Properties',\n      value: stats?.properties?.totalProperties || 0,\n      description: `${stats?.properties?.occupancyRate || 0}% occupied`,\n      icon: Building2,\n      href: '/properties',\n      color: 'text-blue-600'\n    },\n    {\n      title: 'Active Tenants',\n      value: stats?.tenants?.totalTenants || 0,\n      description: 'Current tenants',\n      icon: Users,\n      href: '/tenants',\n      color: 'text-green-600'\n    },\n    {\n      title: 'Active Leases',\n      value: stats?.leases?.activeLeases || 0,\n      description: `${stats?.leases?.expiredLeases || 0} expired`,\n      icon: FileText,\n      href: '/leases',\n      color: 'text-purple-600'\n    },\n    {\n      title: 'Maintenance',\n      value: stats?.maintenanceRequests?.open || 0,\n      description: 'Open requests',\n      icon: Wrench,\n      href: '/maintenance',\n      color: 'text-orange-600'\n    }\n  ]\n  \n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      {statCards.map((stat) => {\n        const Icon = stat.icon\n        return (\n          <Link key={stat.title} href={stat.href}>\n            <Card className=\"transition-all hover:shadow-lg hover:border-primary/50 cursor-pointer\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">\n                  {stat.title}\n                </CardTitle>\n                <Icon className={cn(\"h-4 w-4\", stat.color)} />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{stat.value}</div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {stat.description}\n                </p>\n              </CardContent>\n            </Card>\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n\n// Recent properties component\nexport function RecentProperties() {\n  const { data: properties, isLoading } = useProperties({ limit: 5 })\n  \n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Properties</CardTitle>\n          <CardDescription>Your recently added properties</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"flex items-center gap-4\">\n              <Skeleton className=\"h-12 w-12 rounded-lg\" />\n              <div className=\"flex-1 space-y-2\">\n                <Skeleton className=\"h-4 w-32\" />\n                <Skeleton className=\"h-3 w-24\" />\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  if (!properties?.length) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Properties</CardTitle>\n          <CardDescription>Your recently added properties</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n            <Home className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              No properties added yet\n            </p>\n            <Link href=\"/properties/new\">\n              <Button size=\"sm\">\n                <Building2 className=\"h-4 w-4 mr-2\" />\n                Add First Property\n              </Button>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>Recent Properties</CardTitle>\n            <CardDescription>Your recently added properties</CardDescription>\n          </div>\n          <Link href=\"/properties\">\n            <Button variant=\"ghost\" size=\"sm\">\n              View all\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {properties.map((property: Property) => (\n            <Link\n              key={property.id}\n              href={`/properties/${property.id}`}\n              className=\"flex items-center gap-4 rounded-lg p-3 transition-colors hover:bg-accent\"\n            >\n              <div className=\"flex h-12 w-12 items-center justify-center rounded-lg bg-primary/10\">\n                <Building2 className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div className=\"flex-1 space-y-1\">\n                <p className=\"text-sm font-medium leading-none\">\n                  {property.name}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {property.address}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-sm font-medium\">\n                  {property.units?.length || 0} units\n                </p>\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {property.propertyType}\n                </Badge>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\n// Quick actions component\nexport function QuickActions() {\n  const actions = [\n    {\n      label: 'Add Property',\n      icon: Building2,\n      href: '/properties/new',\n      color: 'bg-blue-500',\n      description: 'Register a new property'\n    },\n    {\n      label: 'Add Tenant',\n      icon: Users,\n      href: '/tenants/new',\n      color: 'bg-green-500',\n      description: 'Add a new tenant'\n    },\n    {\n      label: 'Create Lease',\n      icon: FileText,\n      href: '/leases/new',\n      color: 'bg-purple-500',\n      description: 'Create a new lease'\n    },\n    {\n      label: 'New Request',\n      icon: Wrench,\n      href: '/maintenance/new',\n      color: 'bg-orange-500',\n      description: 'Submit maintenance request'\n    }\n  ]\n  \n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n        <CardDescription>Common tasks and actions</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-2 sm:grid-cols-2\">\n          {actions.map((action) => {\n            const Icon = action.icon\n            return (\n              <Link\n                key={action.label}\n                href={action.href}\n                className=\"group flex items-center gap-3 rounded-lg border p-3 transition-all hover:border-primary/50 hover:bg-accent\"\n              >\n                <div className={cn(\n                  \"flex h-10 w-10 items-center justify-center rounded-lg text-white transition-transform group-hover:scale-110\",\n                  action.color\n                )}>\n                  <Icon className=\"h-5 w-5\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">{action.label}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {action.description}\n                  </p>\n                </div>\n                <ArrowRight className=\"h-4 w-4 text-muted-foreground opacity-0 transition-opacity group-hover:opacity-100\" />\n              </Link>\n            )\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}"],"names":[],"mappings":"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","debugId":null}}]
}