import type { Meta, StoryObj } from '@storybook/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { PropertiesDataTable } from '../../frontend/src/components/properties/properties-data-table';
import type { Property } from '@repo/shared';
import { UNIT_STATUS, PROPERTY_TYPE } from '@repo/shared';

// Mock data generator for properties
const createMockProperty = (overrides: Partial<Property> = {}): Property => ({
  id: 'prop-1',
  name: 'Sunset Gardens Apartments',
  address: '123 Main Street',
  city: 'San Francisco',
  state: 'CA',
  zipCode: '94102',
  propertyType: PROPERTY_TYPE.APARTMENT,
  orgId: 'org-1',
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z',
  units: [
    {
      id: 'unit-1',
      unitNumber: '101',
      bedrooms: 2,
      bathrooms: 1,
      rent: 1200,
      deposit: 1200,
      status: UNIT_STATUS.OCCUPIED,
      propertyId: 'prop-1',
      orgId: 'org-1',
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    },
    {
      id: 'unit-2',
      unitNumber: '102',
      bedrooms: 1,
      bathrooms: 1,
      rent: 950,
      deposit: 950,
      status: UNIT_STATUS.OCCUPIED,
      propertyId: 'prop-1',
      orgId: 'org-1',
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    },
    {
      id: 'unit-3',
      unitNumber: '201',
      bedrooms: 2,
      bathrooms: 2,
      rent: 1400,
      deposit: 1400,
      status: UNIT_STATUS.VACANT,
      propertyId: 'prop-1',
      orgId: 'org-1',
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    },
    {
      id: 'unit-4',
      unitNumber: '202',
      bedrooms: 3,
      bathrooms: 2,
      rent: 1800,
      deposit: 1800,
      status: UNIT_STATUS.OCCUPIED,
      propertyId: 'prop-1',
      orgId: 'org-1',
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    },
  ],
  ...overrides,
});

// Mock hook for different states
const mockUseProperties = (mockData: {
  data?: Property[];
  isLoading?: boolean;
  error?: Error | null;
}) => ({
  data: mockData.data ?? [],
  isLoading: mockData.isLoading ?? false,
  error: mockData.error ?? null,
});

// Create a wrapper component that can mock the hook
const PropertiesDataTableWrapper = ({ 
  mockData,
  ...props
}: { 
  mockData: Parameters<typeof mockUseProperties>[0] 
} & React.ComponentProps<typeof PropertiesDataTable>) => {
  // Mock the hook at module level
  const originalModule = require('../../frontend/src/hooks/api/use-properties');
  originalModule.useProperties = () => mockUseProperties(mockData);
  
  return <PropertiesDataTable {...props} />;
};

// Wrap with QueryClient provider
const StoryWrapper = ({ children }: { children: React.ReactNode }) => {
  const queryClient = new QueryClient({
    defaultOptions: {
      queries: { retry: false, refetchOnWindowFocus: false },
    },
  });
  
  return (
    <QueryClientProvider client={queryClient}>
      <div className="p-6 bg-background min-h-screen">
        {children}
      </div>
    </QueryClientProvider>
  );
};

const meta: Meta<typeof PropertiesDataTableWrapper> = {
  title: 'TenantFlow/Properties/DataTable',
  component: PropertiesDataTableWrapper,
  decorators: [(Story) => <StoryWrapper><Story /></StoryWrapper>],
  parameters: {
    layout: 'fullscreen',
    docs: {
      description: {
        component: 'Comprehensive properties management table displaying property information, occupancy rates, unit counts, and management actions. Features search, filtering, loading states, and responsive design.',
      },
    },
  },
  tags: ['autodocs'],
  argTypes: {
    searchQuery: {
      control: { type: 'text' },
      description: 'Search query to filter properties by name or address',
    },
    propertyType: {
      control: { type: 'select' },
      options: Object.values(PROPERTY_TYPE),
      description: 'Filter properties by type',
    },
    onViewProperty: { action: 'view-property' },
    onEditProperty: { action: 'edit-property' },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

// Sample property data for different scenarios
const mockProperties: Property[] = [
  createMockProperty({
    id: 'prop-1',
    name: 'Sunset Gardens Apartments',
    propertyType: PROPERTY_TYPE.APARTMENT,
  }),
  createMockProperty({
    id: 'prop-2',
    name: 'Downtown Luxury Lofts',
    address: '456 Oak Avenue',
    city: 'San Francisco',
    propertyType: PROPERTY_TYPE.CONDO,
    units: [
      {
        id: 'unit-1',
        unitNumber: '301',
        bedrooms: 1,
        bathrooms: 1,
        rent: 2200,
        deposit: 2200,
        status: UNIT_STATUS.OCCUPIED,
        propertyId: 'prop-2',
        orgId: 'org-1',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
      },
      {
        id: 'unit-2',
        unitNumber: '302',
        bedrooms: 2,
        bathrooms: 1,
        rent: 2800,
        deposit: 2800,
        status: UNIT_STATUS.VACANT,
        propertyId: 'prop-2',
        orgId: 'org-1',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
      },
    ],
  }),
  createMockProperty({
    id: 'prop-3',
    name: 'Suburban Family Homes',
    address: '789 Pine Street',
    city: 'Palo Alto',
    propertyType: PROPERTY_TYPE.HOUSE,
    units: [
      {
        id: 'unit-1',
        unitNumber: '1',
        bedrooms: 4,
        bathrooms: 3,
        rent: 3500,
        deposit: 3500,
        status: UNIT_STATUS.OCCUPIED,
        propertyId: 'prop-3',
        orgId: 'org-1',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
      },
    ],
  }),
  createMockProperty({
    id: 'prop-4',
    name: 'Riverside Commercial Plaza',
    address: '321 River Drive',
    city: 'San Francisco',
    propertyType: PROPERTY_TYPE.COMMERCIAL,
    units: [
      {
        id: 'unit-1',
        unitNumber: 'Suite A',
        bedrooms: 0,
        bathrooms: 2,
        rent: 4500,
        deposit: 4500,
        status: UNIT_STATUS.VACANT,
        propertyId: 'prop-4',
        orgId: 'org-1',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
      },
      {
        id: 'unit-2',
        unitNumber: 'Suite B',
        bedrooms: 0,
        bathrooms: 1,
        rent: 3200,
        deposit: 3200,
        status: UNIT_STATUS.OCCUPIED,
        propertyId: 'prop-4',
        orgId: 'org-1',
        createdAt: '2024-01-01T00:00:00Z',
        updatedAt: '2024-01-01T00:00:00Z',
      },
    ],
  }),
  createMockProperty({
    id: 'prop-5',
    name: 'Affordable Housing Complex',
    address: '555 Community Lane',
    city: 'Oakland',
    propertyType: PROPERTY_TYPE.APARTMENT,
    units: Array.from({ length: 8 }, (_, i) => ({
      id: `unit-${i + 1}`,
      unitNumber: `${i + 101}`,
      bedrooms: i % 3 + 1,
      bathrooms: 1,
      rent: 800 + (i * 50),
      deposit: 800 + (i * 50),
      status: i < 6 ? UNIT_STATUS.OCCUPIED : UNIT_STATUS.VACANT,
      propertyId: 'prop-5',
      orgId: 'org-1',
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    })),
  }),
];

// Default story with mixed property portfolio
export const Default: Story = {
  args: {
    mockData: { data: mockProperties },
  },
};

// Single property
export const SingleProperty: Story = {
  args: {
    mockData: { data: [mockProperties[0]] },
  },
};

// Large property portfolio
export const LargePortfolio: Story = {
  args: {
    mockData: { 
      data: Array.from({ length: 15 }, (_, i) => 
        createMockProperty({
          id: `prop-${i + 1}`,
          name: `Property ${i + 1}`,
          address: `${100 + i} Street Name`,
          city: i % 3 === 0 ? 'San Francisco' : i % 3 === 1 ? 'Oakland' : 'Palo Alto',
          propertyType: Object.values(PROPERTY_TYPE)[i % Object.values(PROPERTY_TYPE).length] as any,
        })
      )
    },
  },
};

// Fully occupied properties
export const FullyOccupied: Story = {
  args: {
    mockData: { 
      data: mockProperties.map(property => ({
        ...property,
        units: property.units?.map(unit => ({
          ...unit,
          status: UNIT_STATUS.OCCUPIED,
        })),
      }))
    },
  },
};

// High vacancy properties
export const HighVacancy: Story = {
  args: {
    mockData: { 
      data: mockProperties.map(property => ({
        ...property,
        units: property.units?.map(unit => ({
          ...unit,
          status: UNIT_STATUS.VACANT,
        })),
      }))
    },
  },
};

// Filtered by apartment type
export const ApartmentsOnly: Story = {
  args: {
    mockData: { data: mockProperties },
    propertyType: PROPERTY_TYPE.APARTMENT,
  },
};

// Search filtered results
export const SearchResults: Story = {
  args: {
    mockData: { data: mockProperties },
    searchQuery: 'sunset',
  },
};

// No search results
export const NoSearchResults: Story = {
  args: {
    mockData: { data: mockProperties },
    searchQuery: 'nonexistent property',
  },
};

// Empty state - no properties
export const EmptyState: Story = {
  args: {
    mockData: { data: [] },
  },
};

// Loading state
export const Loading: Story = {
  args: {
    mockData: { isLoading: true },
  },
};

// Error state
export const Error: Story = {
  args: {
    mockData: { error: new Error('Failed to load properties') },
  },
};

// Interactive actions demonstration
export const WithInteractions: Story = {
  args: {
    mockData: { data: mockProperties.slice(0, 3) },
    onViewProperty: (property) => alert(`Viewing: ${property.name}`),
    onEditProperty: (property) => alert(`Editing: ${property.name}`),
  },
};

// Different property types showcase
export const PropertyTypeShowcase: Story = {
  args: {
    mockData: { 
      data: [
        createMockProperty({
          id: 'apt-1',
          name: 'Modern Apartments',
          propertyType: PROPERTY_TYPE.APARTMENT,
          units: Array.from({ length: 6 }, (_, i) => ({
            id: `apt-unit-${i + 1}`,
            unitNumber: `${i + 101}`,
            bedrooms: 2,
            bathrooms: 1,
            rent: 1200,
            deposit: 1200,
            status: i < 5 ? UNIT_STATUS.OCCUPIED : UNIT_STATUS.VACANT,
            propertyId: 'apt-1',
            orgId: 'org-1',
            createdAt: '2024-01-01T00:00:00Z',
            updatedAt: '2024-01-01T00:00:00Z',
          })),
        }),
        createMockProperty({
          id: 'house-1',
          name: 'Family Houses',
          propertyType: PROPERTY_TYPE.HOUSE,
          units: [
            {
              id: 'house-unit-1',
              unitNumber: '1',
              bedrooms: 4,
              bathrooms: 3,
              rent: 3500,
              deposit: 3500,
              status: UNIT_STATUS.OCCUPIED,
              propertyId: 'house-1',
              orgId: 'org-1',
              createdAt: '2024-01-01T00:00:00Z',
              updatedAt: '2024-01-01T00:00:00Z',
            },
          ],
        }),
        createMockProperty({
          id: 'condo-1',
          name: 'Luxury Condos',
          propertyType: PROPERTY_TYPE.CONDO,
          units: Array.from({ length: 3 }, (_, i) => ({
            id: `condo-unit-${i + 1}`,
            unitNumber: `${i + 301}`,
            bedrooms: 2,
            bathrooms: 2,
            rent: 2500,
            deposit: 2500,
            status: UNIT_STATUS.OCCUPIED,
            propertyId: 'condo-1',
            orgId: 'org-1',
            createdAt: '2024-01-01T00:00:00Z',
            updatedAt: '2024-01-01T00:00:00Z',
          })),
        }),
        createMockProperty({
          id: 'commercial-1',
          name: 'Office Spaces',
          propertyType: PROPERTY_TYPE.COMMERCIAL,
          units: [
            {
              id: 'commercial-unit-1',
              unitNumber: 'Suite 100',
              bedrooms: 0,
              bathrooms: 2,
              rent: 5000,
              deposit: 5000,
              status: UNIT_STATUS.VACANT,
              propertyId: 'commercial-1',
              orgId: 'org-1',
              createdAt: '2024-01-01T00:00:00Z',
              updatedAt: '2024-01-01T00:00:00Z',
            },
          ],
        }),
      ]
    },
  },
};