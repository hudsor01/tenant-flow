import type { Meta, StoryObj } from '@storybook/react';
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Input } from '@/components/ui/input';
import Link from 'next/link';
import { Menu, Building, Search, Command, Bell, User, Settings, LogOut, WifiOff } from 'lucide-react';

// Self-contained Navigation component for Storybook (matches the real component)
interface NavigationProps {
  className?: string;
  user?: {
    id: string;
    email?: string;
    name?: string;
    avatarUrl?: string;
  } | null;
  showOfflineIndicator?: boolean;
  isMobile?: boolean;
}

function Navigation({ className, user, showOfflineIndicator = false, isMobile = false }: NavigationProps) {
  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);
  const [isLoggingOut, setIsLoggingOut] = useState(false);

  const handleLogout = () => {
    setIsLoggingOut(true);
    console.log('Logout clicked - mock action');
    setTimeout(() => setIsLoggingOut(false), 2000);
  };

  const handleSearchClick = () => {
    console.log('Command palette opened - mock action');
  };

  return (
    <>
      <header
        className={`bg-card flex items-center justify-between border-b p-3 sm:p-4 ${className || ''}`}
      >
        {/* Mobile Menu Button & Logo */}
        <div className="flex items-center gap-3 md:hidden">
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsMobileSidebarOpen(true)}
            className="h-8 w-8 p-0"
            aria-label="Open navigation menu"
          >
            <Menu className="h-5 w-5" />
          </Button>
          <Link
            href="/dashboard"
            className="flex items-center gap-2 transition-all hover:scale-105"
          >
            <div className="i-lucide-building text-primary h-6 w-6" />
            <span className="text-lg font-bold">TenantFlow</span>
          </Link>
        </div>

        {/* Desktop Search - Command Palette Trigger */}
        <div className="hidden max-w-md flex-1 items-center gap-4 md:flex">
          <div className="relative flex-1">
            <div className="i-lucide-search text-muted-foreground absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 transform" />
            <Input
              placeholder="Search properties, tenants... (⌘K)"
              className="cursor-pointer pl-10"
              readOnly
              onClick={handleSearchClick}
              onFocus={handleSearchClick}
            />
          </div>
          <Button
            variant="ghost"
            size="sm"
            onClick={handleSearchClick}
            className="hidden items-center gap-2 lg:flex"
          >
            <div className="i-lucide-command h-4 w-4" />
            <span className="text-muted-foreground text-xs">
              ⌘K
            </span>
          </Button>
        </div>

        {/* Actions */}
        <div className="flex items-center gap-2 sm:gap-4">
          {/* Mobile Search Button */}
          <Button
            variant="ghost"
            size="sm"
            onClick={handleSearchClick}
            className="h-8 w-8 p-0 md:hidden"
            aria-label="Search"
          >
            <div className="i-lucide-search h-4 w-4" />
          </Button>

          {/* Offline Indicator */}
          {showOfflineIndicator && (
            <div className="flex items-center gap-2 rounded-md bg-yellow-100 px-2 py-1 text-xs text-yellow-800">
              <div className="i-lucide-wifi-off h-3 w-3" />
              <span>Offline</span>
            </div>
          )}

          {/* Notifications */}
          <Button
            variant="ghost"
            size="sm"
            className="h-8 w-8 p-0"
            aria-label="Notifications"
          >
            <div className="i-lucide-bell h-4 w-4 sm:h-5 sm:w-5" />
          </Button>

          {/* User Menu */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button
                variant="ghost"
                className="relative h-8 w-8 rounded-full"
                aria-label="User menu"
              >
                <Avatar className="h-8 w-8">
                  <AvatarImage
                    src={user?.avatarUrl || undefined}
                    alt={user?.name || user?.email}
                  />
                  <AvatarFallback>
                    {user?.name
                      ? user.name.charAt(0).toUpperCase()
                      : user?.email
                          ?.charAt(0)
                          .toUpperCase() || 'U'}
                  </AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent
              className="w-56"
              align="end"
              forceMount
            >
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">
                    {user?.name || 'User'}
                  </p>
                  <p className="text-muted-foreground text-xs leading-none">
                    {user?.email}
                  </p>
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem asChild>
                <Link
                  href="/profile"
                  className="cursor-pointer"
                >
                  <div className="i-lucide-user mr-2 h-4 w-4" />
                  <span>Profile</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <Link
                  href="/settings"
                  className="cursor-pointer"
                >
                  <div className="i-lucide-settings mr-2 h-4 w-4" />
                  <span>Settings</span>
                </Link>
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                className="cursor-pointer"
                onClick={handleLogout}
                disabled={isLoggingOut}
              >
                <div className="i-lucide-log-out mr-2 h-4 w-4" />
                <span>
                  {isLoggingOut
                    ? 'Signing out...'
                    : 'Sign out'}
                </span>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </header>

      {/* Mobile Sidebar - replaced with simpler navigation */}
      {isMobileSidebarOpen && (
        <div className="fixed inset-0 z-50 bg-black bg-opacity-50 md:hidden">
          <div className="h-full w-64 bg-white p-4">
            <button
              onClick={() => setIsMobileSidebarOpen(false)}
              className="mb-4"
            >
              Close
            </button>
            <p className="text-gray-5">Navigation menu</p>
          </div>
        </div>
      )}
    </>
  );
}

// Mock user data for different scenarios
const mockUsers = {
  fullProfile: {
    id: 'user-1',
    email: 'john.doe@tenantflow.com',
    name: 'John Doe',
    avatarUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',
  },
  nameOnly: {
    id: 'user-2',
    email: 'jane.smith@tenantflow.com',
    name: 'Jane Smith',
    avatarUrl: undefined,
  },
  emailOnly: {
    id: 'user-3',
    email: 'noprofile@tenantflow.com',
    name: undefined,
    avatarUrl: undefined,
  },
};

const meta: Meta<typeof Navigation> = {
  title: 'Dashboard/Navigation',
  component: Navigation,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
  argTypes: {
    user: {
      control: 'object',
      description: 'User object with profile information',
    },
    showOfflineIndicator: {
      control: 'boolean',
      description: 'Show offline status indicator',
      defaultValue: false,
    },
    isMobile: {
      control: 'boolean',
      description: 'Render in mobile mode',
      defaultValue: false,
    },
    className: {
      control: 'text',
      description: 'Additional CSS classes',
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

// Default navigation with full user profile
export const Default: Story = {
  args: {
    user: mockUsers.fullProfile,
    showOfflineIndicator: false,
  },
};

// Navigation without user avatar
export const NoAvatar: Story = {
  args: {
    user: mockUsers.nameOnly,
    showOfflineIndicator: false,
  },
};

// Navigation with email only (no name or avatar)
export const EmailOnly: Story = {
  args: {
    user: mockUsers.emailOnly,
    showOfflineIndicator: false,
  },
};

// Navigation with offline indicator
export const OfflineState: Story = {
  args: {
    user: mockUsers.fullProfile,
    showOfflineIndicator: true,
  },
};

// Navigation with loading logout state
export const LoggingOut: Story = {
  args: {
    user: mockUsers.fullProfile,
    showOfflineIndicator: false,
  },
  play: async ({ canvasElement }) => {
    // Auto-trigger logout to show loading state
    const avatarButton = canvasElement.querySelector('[aria-label="User menu"]');
    if (avatarButton) {
      console.log('Simulating logout state - check dropdown menu');
    }
  },
};

// Navigation in dashboard context
export const InDashboard: Story = {
  args: {
    user: mockUsers.fullProfile,
  },
  decorators: [
    (Story) => (
      <div className="min-h-screen bg-background">
        <Story />
        <div className="container py-6">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <div className="rounded-lg border bg-card p-6">
              <h3 className="text-lg font-semibold">Dashboard Content</h3>
              <p className="text-sm text-muted-foreground">
                This shows how the navigation looks in the dashboard context.
              </p>
            </div>
            <div className="rounded-lg border bg-card p-6">
              <h3 className="text-lg font-semibold">Properties</h3>
              <p className="text-sm text-muted-foreground">
                Manage your property portfolio.
              </p>
            </div>
            <div className="rounded-lg border bg-card p-6">
              <h3 className="text-lg font-semibold">Tenants</h3>
              <p className="text-sm text-muted-foreground">
                Track tenant information and leases.
              </p>
            </div>
            <div className="rounded-lg border bg-card p-6">
              <h3 className="text-lg font-semibold">Reports</h3>
              <p className="text-sm text-muted-foreground">
                View financial and operational reports.
              </p>
            </div>
          </div>
        </div>
      </div>
    ),
  ],
};

// Mobile responsive view with sidebar
export const Mobile: Story = {
  args: {
    user: mockUsers.fullProfile,
    isMobile: true,
  },
  parameters: {
    viewport: {
      defaultViewport: 'mobile1',
    },
  },
};

// Tablet responsive view
export const Tablet: Story = {
  args: {
    user: mockUsers.fullProfile,
    showOfflineIndicator: false,
  },
  parameters: {
    viewport: {
      defaultViewport: 'tablet',
    },
  },
};

// Different user roles demonstration
export const DifferentUsers: Story = {
  render: () => (
    <div className="space-y-4">
      <div>
        <h3 className="mb-2 text-sm font-medium">Landlord User</h3>
        <Navigation user={mockUsers.fullProfile} />
      </div>
      <div>
        <h3 className="mb-2 text-sm font-medium">Property Manager</h3>
        <Navigation user={mockUsers.nameOnly} />
      </div>
      <div>
        <h3 className="mb-2 text-sm font-medium">Basic User</h3>
        <Navigation user={mockUsers.emailOnly} />
      </div>
    </div>
  ),
};

// Interactive state demonstration
export const InteractiveStates: Story = {
  args: {
    user: mockUsers.fullProfile,
    showOfflineIndicator: false,
  },
  decorators: [
    (Story) => (
      <div className="space-y-4">
        <div>
          <p className="mb-4 text-sm text-muted-foreground">
            Click the buttons to see console logs of mock actions:
          </p>
          <Story />
        </div>
        <div className="rounded-lg bg-muted p-4">
          <h4 className="font-medium">Interactive Elements:</h4>
          <ul className="mt-2 list-disc list-inside text-sm text-muted-foreground">
            <li>Menu button (mobile) - Opens sidebar navigation</li>
            <li>Search input - Opens command palette (⌘K)</li>
            <li>Command button - Quick access to command palette</li>
            <li>Bell icon - Notifications (mock)</li>
            <li>User avatar - User menu with profile options</li>
            <li>Logout - Shows loading state then completes</li>
          </ul>
        </div>
      </div>
    ),
  ],
};

// Dark theme demonstration
export const DarkTheme: Story = {
  args: {
    user: mockUsers.fullProfile,
  },
  parameters: {
    themes: {
      default: 'dark',
    },
  },
  decorators: [
    (Story) => (
      <div className="dark">
        <Story />
      </div>
    ),
  ],
};

// Command palette integration example
export const CommandPaletteIntegration: Story = {
  args: {
    user: mockUsers.fullProfile,
  },
  decorators: [
    (Story) => (
      <div className="space-y-4">
        <Story />
        <div className="container">
          <div className="rounded-lg border bg-card p-6">
            <h3 className="text-lg font-semibold mb-2">Command Palette Integration</h3>
            <p className="text-sm text-muted-foreground mb-4">
              The search button and ⌘K keyboard shortcut both trigger the command palette.
              This provides quick access to:
            </p>
            <ul className="list-disc list-inside text-sm text-muted-foreground space-y-1">
              <li>Property search and navigation</li>
              <li>Tenant lookup and management</li>
              <li>Quick actions (add property, create lease, etc.)</li>
              <li>Settings and configuration</li>
              <li>Help and documentation</li>
            </ul>
          </div>
        </div>
      </div>
    ),
  ],
};