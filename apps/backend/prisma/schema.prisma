generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BlogArticle {
  id            String           @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  slug          String           @unique
  description   String
  content       String
  excerpt       String?
  
  // Author information
  authorId      String?
  authorName    String 
  
  // SEO and metadata
  metaTitle     String?
  metaDescription String?
  ogImage       String?
  
  // Content organization
  category      BlogCategory     @default(PROPERTY_MANAGEMENT)
  tags          BlogTag[]        @relation("BlogArticleToBlogTag")
  
  // Publishing
  status        BlogStatus       @default(DRAFT)
  featured      Boolean          @default(false)
  publishedAt   DateTime?        @db.Timestamptz(6)
  
  // Engagement tracking
  viewCount     Int              @default(0)
  readTime      Int?
  
  // SEO and performance
  searchKeywords String[]
  lastIndexed   DateTime?        @db.Timestamptz(6)
  
  // Timestamps
  createdAt     DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime         @default(now()) @db.Timestamptz(6)
  
  // Relations
  author        User?            @relation(fields: [authorId], references: [id], onDelete: SetNull)
  
  @@index([authorId], map: "idx_blog_article_author_id")
  @@index([slug], map: "idx_blog_article_slug")
  @@index([status, publishedAt], map: "idx_blog_article_published")
  @@index([category], map: "idx_blog_article_category")
  @@index([featured], map: "idx_blog_article_featured")
  @@index([createdAt], map: "idx_blog_article_created")
}

model BlogTag {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  name      String        @unique
  slug      String        @unique
  color     String?
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  
  // Relations
  articles  BlogArticle[] @relation("BlogArticleToBlogTag")
  
  @@index([slug], map: "idx_blog_tag_slug")
}

/// Separate from subscription invoices - these are customer invoices
model CustomerInvoice {
  id              String               @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNumber   String               @unique
  status          CustomerInvoiceStatus @default(DRAFT)
  
  // Business Information
  businessName    String
  businessEmail   String
  businessAddress String?
  businessCity    String?
  businessState   String?
  businessZip     String?
  businessPhone   String?
  businessLogo    String?
  
  // Client Information
  clientName      String
  clientEmail     String
  clientAddress   String?
  clientCity      String?
  clientState     String?
  clientZip       String?
  
  // Invoice Details
  issueDate       DateTime             @default(now()) @db.Timestamptz(6)
  dueDate         DateTime             @db.Timestamptz(6)
  
  // Financial
  subtotal        Decimal              @db.Decimal(10,2) @default(0)
  taxRate         Decimal              @db.Decimal(5,2) @default(0)
  taxAmount       Decimal              @db.Decimal(10,2) @default(0)
  total           Decimal              @db.Decimal(10,2) @default(0)
  
  // Additional Info
  notes           String?
  terms           String?
  
  // Lead Magnet Features
  emailCaptured   String?
  downloadCount   Int                  @default(0)
  isProVersion    Boolean              @default(false)
  userAgent       String?
  ipAddress       String?
  
  // Timestamps
  createdAt       DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime             @default(now()) @db.Timestamptz(6)
  
  // Relations
  items           CustomerInvoiceItem[]
  
  @@index([emailCaptured], map: "idx_customer_invoice_email")
  @@index([status], map: "idx_customer_invoice_status")
  @@index([createdAt], map: "idx_customer_invoice_created")
}

model CustomerInvoiceItem {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  invoiceId     String
  description   String
  quantity      Decimal         @db.Decimal(10,2)
  unitPrice     Decimal         @db.Decimal(10,2)
  total         Decimal         @db.Decimal(10,2)
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  
  // Relations
  invoice       CustomerInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId], map: "idx_customer_invoice_item_invoice")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Document {
  id            String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String
  filename      String?
  url           String
  type          DocumentType
  mimeType      String?
  size          BigInt?
  propertyId    String?
  leaseId       String?
  createdAt     DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?    @default(now()) @db.Timestamp(6)
  fileSizeBytes BigInt       @default(0)
  Lease         Lease?       @relation(fields: [leaseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Property      Property?    @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([leaseId], map: "idx_document_lease_id")
  @@index([propertyId], map: "idx_document_property_id")
  @@index([type], map: "idx_document_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Expense {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  propertyId         String
  maintenanceId      String?
  amount             Float
  category           String
  description        String
  date               DateTime            @db.Timestamp(6)
  receiptUrl         String?
  vendorName         String?
  vendorContact      String?
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @db.Timestamp(6)
  MaintenanceRequest MaintenanceRequest? @relation(fields: [maintenanceId], references: [id], onUpdate: NoAction)
  Property           Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([maintenanceId], map: "idx_expense_maintenance_id")
  @@index([category], map: "idx_expense_category")
  @@index([date], map: "idx_expense_date")
  @@index([propertyId], map: "idx_expense_property_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Inspection {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  propertyId    String
  unitId        String?
  inspectorId   String
  type          String    @default("ROUTINE")
  scheduledDate DateTime  @db.Timestamp(6)
  completedDate DateTime? @db.Timestamp(6)
  status        String    @default("SCHEDULED")
  notes         String?
  reportUrl     String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
  User          User      @relation(fields: [inspectorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Property      Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Unit          Unit?     @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([inspectorId], map: "idx_inspection_inspector_id")
  @@index([propertyId], map: "idx_inspection_property_id")
  @@index([scheduledDate], map: "idx_inspection_scheduled_date")
  @@index([unitId], map: "idx_inspection_unit_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Invoice {
  id              String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId          String
  subscriptionId  String?
  stripeInvoiceId String        @unique
  amountPaid      Int
  amountDue       Int
  currency        String        @default("usd")
  status          String
  invoiceDate     DateTime      @db.Timestamptz(6)
  dueDate         DateTime?     @db.Timestamptz(6)
  paidAt          DateTime?     @db.Timestamptz(6)
  invoiceUrl      String?
  invoicePdf      String?
  description     String?
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @default(now()) @db.Timestamptz(6)
  Subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onUpdate: NoAction)
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@index([subscriptionId], map: "idx_invoice_subscription_id")
  @@index([userId], map: "idx_invoice_user_id")
}

/// Lead capture tracking for marketing automation
model InvoiceLeadCapture {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  email           String
  invoiceId       String?
  firstName       String?
  lastName        String?
  company         String?
  source          String?
  medium          String?
  campaign        String?
  emailSent       Boolean   @default(false)
  emailOpened     Boolean   @default(false)
  linkClicked     Boolean   @default(false)
  converted       Boolean   @default(false)
  
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @db.Timestamptz(6)
  
  @@index([email], map: "idx_invoice_lead_email")
  @@index([source], map: "idx_invoice_lead_source")
  @@index([createdAt], map: "idx_invoice_lead_created")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lease {
  id              String      @id @default(dbgenerated("gen_random_uuid()"))
  unitId          String
  tenantId        String
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  terms           String?
  status          LeaseStatus @default(DRAFT)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
  Document        Document[]
  Tenant          Tenant      @relation(fields: [tenantId], references: [id])
  Unit            Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reminders       ReminderLog[] @relation("LeaseReminders")

  @@index([startDate, endDate], map: "idx_lease_dates")
  @@index([status], map: "idx_lease_status")
  @@index([tenantId], map: "idx_lease_tenant_id")
  @@index([unitId], map: "idx_lease_unit_id")
  @@index([unitId, status], map: "idx_lease_unit_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LeaseGeneratorUsage {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  userId           String?
  email            String
  ipAddress        String?
  userAgent        String?
  usageCount       Int?      @default(0)
  paymentStatus    String?   @default("unpaid")
  stripeSessionId  String?
  stripeCustomerId String?
  amountPaid       Int?
  currency         String?
  paymentDate      DateTime? @db.Timestamptz(6)
  accessExpiresAt  DateTime? @db.Timestamptz(6)
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  User             User?     @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([userId])
  @@index([userId, createdAt], map: "idx_lease_generator_user_created")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MaintenanceRequest {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  unitId        String
  title         String
  description   String
  category      String?
  priority      Priority      @default(MEDIUM)
  status        RequestStatus @default(OPEN)
  preferredDate DateTime?     @db.Timestamp(6)
  allowEntry    Boolean       @default(true)
  contactPhone  String?
  requestedBy   String?
  notes         String?
  photos        String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  completedAt   DateTime?     @db.Timestamp(6)
  assignedTo    String?
  estimatedCost Float?
  actualCost    Float?
  Expense       Expense[]
  Unit          Unit          @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([createdAt], map: "idx_maintenance_created_at")
  @@index([priority], map: "idx_maintenance_priority")
  @@index([status], map: "idx_maintenance_status")
  @@index([unitId], map: "idx_maintenance_unit_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Message {
  id                            String    @id @default(dbgenerated("gen_random_uuid()"))
  threadId                      String
  senderId                      String
  receiverId                    String
  content                       String
  readAt                        DateTime? @db.Timestamp(6)
  attachmentUrl                 String?
  createdAt                     DateTime  @default(now()) @db.Timestamp(6)
  User_Message_receiverIdToUser User      @relation("Message_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_Message_senderIdToUser   User      @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@index([receiverId], map: "idx_message_receiver_id")
  @@index([senderId], map: "idx_message_sender_id")
}


/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Property {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  address      String
  city         String
  state        String
  zipCode      String
  description  String?
  imageUrl     String?
  ownerId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  propertyType PropertyType   @default(SINGLE_FAMILY)
  Document     Document[]
  Expense      Expense[]
  Inspection   Inspection[]
  User         User           @relation(fields: [ownerId], references: [id])
  Unit         Unit[]

  @@index([ownerId], map: "idx_property_owner_id")
}

/// SUBSCRIPTION MODEL - Uses String fields to match database reality
/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subscription {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  userId               String    @unique
  status               String
  startDate            DateTime  @default(now())
  endDate              DateTime?
  cancelledAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  stripeCustomerId     String?
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  planId               String?
  planType             String?
  billingPeriod        String?
  currentPeriodStart   DateTime? @db.Timestamptz(6)
  currentPeriodEnd     DateTime? @db.Timestamptz(6)
  trialStart           DateTime? @db.Timestamptz(6)
  trialEnd             DateTime? @db.Timestamptz(6)
  cancelAtPeriodEnd    Boolean?  @default(false)
  canceledAt           DateTime? @db.Timestamptz(6)
  Invoice              Invoice[]
  User                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Tenant {
  id               String           @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  email            String           @unique(map: "tenant_email_unique")
  phone            String?
  emergencyContact String?
  avatarUrl        String?
  userId           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  Lease            Lease[]
  User             User?            @relation(fields: [userId], references: [id])

  @@index([userId], map: "idx_tenant_user_id")
  @@index([userId], map: "idx_tenant_user_id_v2")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Unit {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  unitNumber         String
  propertyId         String
  bedrooms           Int                  @default(1)
  bathrooms          Float                @default(1)
  squareFeet         Int?
  rent               Float
  status             UnitStatus           @default(VACANT)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  lastInspectionDate DateTime?            @db.Timestamp(6)
  Inspection         Inspection[]
  Lease              Lease[]
  MaintenanceRequest MaintenanceRequest[]
  Property           Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([unitNumber, propertyId], map: "unit_number_per_property_unique")
  @@index([propertyId], map: "idx_unit_property_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                               String                @id
  supabaseId                       String                @unique
  stripeCustomerId                 String?
  email                            String                @unique
  name                             String?
  phone                            String?
  bio                              String?
  avatarUrl                        String?
  role                             UserRole              @default(OWNER)
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @default(now())
  BlogArticle                      BlogArticle[]
  Inspection                       Inspection[]
  Invoice                          Invoice[]
  LeaseGeneratorUsage              LeaseGeneratorUsage[]
  Message_Message_receiverIdToUser Message[]             @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]             @relation("Message_senderIdToUser")
  Property                         Property[]
  Subscription                     Subscription[]
  Tenant                           Tenant[]
  activities                       Activity[]            @relation("UserActivities")
  reminders                        ReminderLog[]         @relation("UserReminders")
  preferences                      UserPreferences?      @relation("UserPreferences")
  sessions                         UserSession[]         @relation("UserSessions")
}

model UserSession {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  refreshTokenId String
  expiresAt      DateTime  @db.Timestamptz(6)
  lastActivity   DateTime  @default(now()) @db.Timestamptz(6)
  userAgent      String?
  ipAddress      String?
  isActive       Boolean   @default(true)
  invalidatedAt  DateTime? @db.Timestamptz(6)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @db.Timestamptz(6)
  
  // Relations
  user           User      @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([refreshTokenId])
  @@index([expiresAt])
  @@index([isActive])
}

model SecurityAuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  eventType String
  severity  String
  userId    String?
  email     String?
  ipAddress String?
  userAgent String?
  resource  String?
  action    String?
  details   Json     @default("{}")
  timestamp DateTime @default(now()) @db.Timestamptz(6)
  
  @@index([eventType])
  @@index([severity])
  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
  @@index([eventType, timestamp])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model wrappers_fdw_stats {
  fdw_name     String   @id
  create_times BigInt?
  rows_in      BigInt?
  rows_out     BigInt?
  bytes_in     BigInt?
  bytes_out    BigInt?
  metadata     Json?
  created_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

// ENUMS (Alphabetically Ordered)
// NOTE: These are the actual enums that exist in the database

enum BlogCategory {
  PROPERTY_MANAGEMENT
  LEGAL_COMPLIANCE
  FINANCIAL_MANAGEMENT
  PROPERTY_MAINTENANCE
  SOFTWARE_REVIEWS
  TENANT_RELATIONS
  MARKETING
  REAL_ESTATE_INVESTMENT
  TAX_PLANNING
  AUTOMATION
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum CustomerInvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum DocumentType {
  LEASE
  INVOICE
  RECEIPT
  PROPERTY_PHOTO
  INSPECTION
  MAINTENANCE
  OTHER
}


enum LeaseStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
}

enum PlanType {
  FREE
  STARTER
  GROWTH
  ENTERPRISE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum PropertyType {
  SINGLE_FAMILY
  MULTI_UNIT
  APARTMENT
  COMMERCIAL
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELED
  ON_HOLD
}

// NOTE: Database only has SubStatus enum, not SubscriptionStatus
enum SubStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum UserRole {
  OWNER
  MANAGER
  TENANT
  ADMIN
}

enum ActivityEntityType {
  property
  tenant
  maintenance
  payment
  lease
  unit
}

model Activity {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  action     String
  entityType ActivityEntityType
  entityId   String
  entityName String?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  User       User     @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_activity_user_id")
  @@index([entityType], map: "idx_activity_entity_type")
  @@index([entityId], map: "idx_activity_entity_id")
  @@index([createdAt], map: "idx_activity_created_at")
}

model WebhookEvent {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  stripeEventId   String   @unique
  eventType       String 
  processed       Boolean  @default(true)
  processingTime  Int?
  errorMessage    String?
  retryCount      Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @db.Timestamptz(6)

  @@index([stripeEventId], map: "idx_webhook_event_stripe_id")
  @@index([eventType], map: "idx_webhook_event_type")
  @@index([processed], map: "idx_webhook_event_processed")
  @@index([createdAt], map: "idx_webhook_event_created")
}

enum ReminderType {
  RENT_REMINDER
  LEASE_EXPIRATION
  MAINTENANCE_DUE
  PAYMENT_OVERDUE
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  OPENED
}

model ReminderLog {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  leaseId         String?
  userId          String
  type            ReminderType
  status          ReminderStatus @default(PENDING)
  recipientEmail  String
  recipientName   String?
  subject         String?
  content         String?
  sentAt          DateTime?      @db.Timestamptz(6)
  deliveredAt     DateTime?      @db.Timestamptz(6)
  openedAt        DateTime?      @db.Timestamptz(6)
  errorMessage    String?
  retryCount      Int            @default(0)
  createdAt       DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(6)

  // Relations
  User            User           @relation("UserReminders", fields: [userId], references: [id], onDelete: Cascade)
  Lease           Lease?         @relation("LeaseReminders", fields: [leaseId], references: [id], onDelete: SetNull)

  @@index([userId], map: "idx_reminder_log_user_id")
  @@index([leaseId], map: "idx_reminder_log_lease_id")
  @@index([type], map: "idx_reminder_log_type")
  @@index([status], map: "idx_reminder_log_status")
  @@index([sentAt], map: "idx_reminder_log_sent_at")
}

model UserPreferences {
  id                       String   @id @default(dbgenerated("gen_random_uuid()"))
  userId                   String   @unique
  
  // Reminder settings
  enableReminders          Boolean  @default(true)
  daysBeforeDue            Int      @default(3)
  enableOverdueReminders   Boolean  @default(true)
  overdueGracePeriod       Int      @default(5)
  autoSendReminders        Boolean  @default(false)
  
  // Notification preferences
  emailNotifications       Boolean  @default(true)
  smsNotifications         Boolean  @default(false)
  pushNotifications        Boolean  @default(true)
  
  // Dashboard preferences
  defaultDashboardView     String   @default("overview")
  showWelcomeMessage       Boolean  @default(true)
  
  createdAt                DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  User                     User     @relation("UserPreferences", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_preferences_user_id")
}
