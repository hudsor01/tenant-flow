# Production-validated multi-stage Dockerfile for NestJS backend
# Optimized for security, performance, and minimal attack surface

# Stage 1: Base image with dependencies
FROM node:22-alpine AS base

# Install only essential dependencies for native modules
# dumb-init for proper signal handling in containers
RUN apk add --no-cache libc6-compat python3 make g++ dumb-init && \
    rm -rf /var/cache/apk/*

WORKDIR /app

# Create non-root user early for better layer caching
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy dependency files with specific permissions
COPY --chown=nodejs:nodejs package*.json turbo.json ./
COPY --chown=nodejs:nodejs apps/backend/package*.json ./apps/backend/
COPY --chown=nodejs:nodejs packages/shared/package*.json ./packages/shared/
COPY --chown=nodejs:nodejs packages/typescript-config/package*.json ./packages/typescript-config/

# Stage 2: Install all dependencies (including dev)
FROM base AS deps

# Use npm ci for reproducible builds
# Add progress bar for better CI visibility
RUN npm ci --include=dev --progress=false && \
    npm cache clean --force

# Stage 3: Builder stage
FROM base AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=deps --chown=nodejs:nodejs /app/apps/backend/node_modules ./apps/backend/node_modules
COPY --from=deps --chown=nodejs:nodejs /app/packages/shared/node_modules ./packages/shared/node_modules

# Copy source code
COPY --chown=nodejs:nodejs . .

# Set build environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Build application with error handling
RUN cd apps/backend && \
    npm run generate && \
    cd ../.. && \
    npx turbo run build --filter=@tenantflow/backend... --no-daemon || \
    (echo "Build failed" && exit 1)

# Remove source maps and unnecessary files for production
RUN find ./apps/backend/dist -name "*.map" -type f -delete && \
    find ./packages/shared/dist -name "*.map" -type f -delete

# Stage 4: Production dependencies only
FROM base AS prod-deps

# Install only production dependencies
ENV NODE_ENV=production
RUN npm ci --omit=dev --progress=false && \
    npm cache clean --force && \
    # Remove unnecessary files from node_modules
    find node_modules -name "*.md" -type f -delete && \
    find node_modules -name "*.yml" -type f -delete && \
    find node_modules -name ".github" -type d -exec rm -rf {} + 2>/dev/null || true

# Stage 5: Final production image
FROM node:22-alpine AS runner

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init && \
    rm -rf /var/cache/apk/*

# Create app directory and non-root user
WORKDIR /app
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files for runtime reference
COPY --from=builder --chown=nodejs:nodejs /app/package*.json ./
COPY --from=builder --chown=nodejs:nodejs /app/apps/backend/package*.json ./apps/backend/
COPY --from=builder --chown=nodejs:nodejs /app/packages/shared/package*.json ./packages/shared/

# Copy production dependencies
COPY --from=prod-deps --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=prod-deps --chown=nodejs:nodejs /app/apps/backend/node_modules ./apps/backend/node_modules
COPY --from=prod-deps --chown=nodejs:nodejs /app/packages/shared/node_modules ./packages/shared/node_modules

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/apps/backend/dist ./apps/backend/dist
COPY --from=builder --chown=nodejs:nodejs /app/packages/shared/dist ./packages/shared/dist

# Copy Prisma files
COPY --from=builder --chown=nodejs:nodejs /app/apps/backend/prisma ./apps/backend/prisma
COPY --from=builder --chown=nodejs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nodejs:nodejs /app/node_modules/@prisma ./node_modules/@prisma

# Create necessary directories with correct permissions
RUN mkdir -p /app/logs /app/tmp && \
    chown -R nodejs:nodejs /app/logs /app/tmp

# Set production environment
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Security: Drop all capabilities and run as non-root
USER nodejs

# Expose port (informational only)
EXPOSE 4600

# Health check with proper timeout and startup period
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4600/health', (r) => { \
    if (r.statusCode === 200) process.exit(0); \
    else process.exit(1); \
  }).on('error', () => process.exit(1));"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application with migration deployment
CMD ["sh", "-c", "cd /app/apps/backend && npx prisma migrate deploy --schema=./prisma/schema.prisma && exec node dist/main.js"]

# Labels for better container management
LABEL maintainer="TenantFlow Team"
LABEL version="1.0.0"
LABEL description="TenantFlow Backend Production Container"