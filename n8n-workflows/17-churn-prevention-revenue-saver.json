{
  "name": "Churn Prevention Revenue Saver",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 7,
              "triggerAtMinute": 30
            }
          ]
        }
      },
      "id": "1",
      "name": "Daily Churn Risk Analysis",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "filePathType": "absolute",
        "fileName": "/home/user/tenantflow-content/data/user-behavior.json"
      },
      "id": "2",
      "name": "Load User Behavior Data",
      "type": "n8n-nodes-base.files",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "const users = JSON.parse($input.first().data);\n\n// Define churn risk indicators and retention strategies\nconst churnIndicators = {\n  'low_engagement': {\n    weight: 0.3,\n    threshold: 'loginFrequency < 3 per week',\n    riskLevel: 'medium'\n  },\n  'feature_underutilization': {\n    weight: 0.25,\n    threshold: 'featuresUsed < 30%',\n    riskLevel: 'medium'\n  },\n  'support_tickets': {\n    weight: 0.2,\n    threshold: 'unresolved tickets > 1',\n    riskLevel: 'high'\n  },\n  'billing_issues': {\n    weight: 0.4,\n    threshold: 'payment failures > 0',\n    riskLevel: 'critical'\n  },\n  'competitor_activity': {\n    weight: 0.15,\n    threshold: 'viewed competitor sites',\n    riskLevel: 'medium'\n  },\n  'subscription_downgrade': {\n    weight: 0.35,\n    threshold: 'attempted downgrade',\n    riskLevel: 'high'\n  },\n  'negative_feedback': {\n    weight: 0.3,\n    threshold: 'satisfaction score < 6',\n    riskLevel: 'high'\n  }\n};\n\n// Retention strategies with revenue impact\nconst retentionStrategies = {\n  'critical': {\n    discount: 60,\n    offer: 'Personal success manager + 60% off next 3 months',\n    urgency: 'immediate',\n    value: '$141 saved',\n    revenueImpact: 47 * 0.7, // 70% retention probability\n    cost: 20 // cost of discount + manager time\n  },\n  'high': {\n    discount: 40,\n    offer: 'Free feature upgrade + 40% off next 2 months',\n    urgency: 'within 24 hours',\n    value: '$94 saved',\n    revenueImpact: 47 * 0.6,\n    cost: 15\n  },\n  'medium': {\n    discount: 25,\n    offer: 'Premium training session + 25% off next month',\n    urgency: 'within 3 days',\n    value: '$47 saved',\n    revenueImpact: 47 * 0.5,\n    cost: 10\n  },\n  'low': {\n    discount: 15,\n    offer: 'Exclusive tips newsletter + 15% off renewal',\n    urgency: 'this week',\n    value: '$28 saved',\n    revenueImpact: 47 * 0.3,\n    cost: 5\n  }\n};\n\n// Calculate churn risk for each user\nconst churnRiskUsers = [];\n\nusers.forEach(user => {\n  let churnScore = 0;\n  let triggeredIndicators = [];\n  \n  // Calculate churn score based on indicators\n  if (user.loginFrequency < 3) {\n    churnScore += churnIndicators.low_engagement.weight;\n    triggeredIndicators.push('low_engagement');\n  }\n  \n  if (user.featuresUsedPercentage < 30) {\n    churnScore += churnIndicators.feature_underutilization.weight;\n    triggeredIndicators.push('feature_underutilization');\n  }\n  \n  if (user.unresolvedTickets > 1) {\n    churnScore += churnIndicators.support_tickets.weight;\n    triggeredIndicators.push('support_tickets');\n  }\n  \n  if (user.paymentFailures > 0) {\n    churnScore += churnIndicators.billing_issues.weight;\n    triggeredIndicators.push('billing_issues');\n  }\n  \n  if (user.viewedCompetitors) {\n    churnScore += churnIndicators.competitor_activity.weight;\n    triggeredIndicators.push('competitor_activity');\n  }\n  \n  if (user.attemptedDowngrade) {\n    churnScore += churnIndicators.subscription_downgrade.weight;\n    triggeredIndicators.push('subscription_downgrade');\n  }\n  \n  if (user.satisfactionScore < 6) {\n    churnScore += churnIndicators.negative_feedback.weight;\n    triggeredIndicators.push('negative_feedback');\n  }\n  \n  // Determine risk level and strategy\n  let riskLevel, strategy;\n  if (churnScore >= 0.7) {\n    riskLevel = 'critical';\n  } else if (churnScore >= 0.5) {\n    riskLevel = 'high';\n  } else if (churnScore >= 0.3) {\n    riskLevel = 'medium';\n  } else if (churnScore >= 0.15) {\n    riskLevel = 'low';\n  }\n  \n  if (riskLevel) {\n    strategy = retentionStrategies[riskLevel];\n    \n    // Calculate potential revenue saved\n    const monthlyValue = user.planPrice || 47;\n    const annualValue = monthlyValue * 12;\n    const potentialSavings = strategy.revenueImpact * 12 - strategy.cost;\n    \n    churnRiskUsers.push({\n      userId: user.id,\n      email: user.email,\n      name: user.name,\n      planPrice: monthlyValue,\n      churnScore: churnScore,\n      riskLevel: riskLevel,\n      triggeredIndicators: triggeredIndicators,\n      strategy: strategy,\n      potentialRevenueLoss: annualValue,\n      potentialSavings: potentialSavings,\n      roi: potentialSavings / strategy.cost,\n      urgency: strategy.urgency,\n      daysUntilCancel: user.daysUntilCancel || null\n    });\n  }\n});\n\n// Sort by revenue impact and urgency\nchurnRiskUsers.sort((a, b) => {\n  if (a.riskLevel === 'critical' && b.riskLevel !== 'critical') return -1;\n  if (b.riskLevel === 'critical' && a.riskLevel !== 'critical') return 1;\n  return b.potentialSavings - a.potentialSavings;\n});\n\nreturn churnRiskUsers.slice(0, 12).map(user => ({ json: user }));"
      },
      "id": "3",
      "name": "Calculate Churn Risk & ROI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama3.2"
            },
            {
              "name": "prompt",
              "value": "Create a personalized churn prevention email for this TenantFlow user:\n\nUser Details:\nName: {{ $json.name }}\nEmail: {{ $json.email }}\nPlan Price: ${{ $json.planPrice }}/month\nChurn Score: {{ ($json.churnScore * 100).toFixed(1) }}%\nRisk Level: {{ $json.riskLevel }}\nTriggered Issues: {{ $json.triggeredIndicators.join(', ') }}\nPotential Revenue Loss: ${{ $json.potentialRevenueLoss }}/year\n\nRetention Strategy:\nOffer: {{ $json.strategy.offer }}\nDiscount: {{ $json.strategy.discount }}%\nValue: {{ $json.strategy.value }}\nUrgency: {{ $json.strategy.urgency }}\nROI: {{ $json.roi.toFixed(2) }}x\n\nWrite a compelling retention email that:\n1. Acknowledges their specific pain points without being intrusive\n2. Provides immediate value and solutions\n3. Presents the retention offer as exclusive and valuable\n4. Creates appropriate urgency based on risk level\n5. Includes personalized success tips\n6. Offers direct access to support/success manager\n7. Shows genuine care for their success\n8. Provides clear next steps\n9. Includes testimonials from similar users\n10. Has a strong, benefit-focused CTA\n\nMake it feel like a helping hand, not a desperate sales pitch. Focus on their property management success."
            },
            {
              "name": "stream",
              "value": false
            }
          ]
        }
      },
      "id": "4",
      "name": "Generate Retention Email",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "llama3.2"
            },
            {
              "name": "prompt",
              "value": "Create a comprehensive churn prevention action plan for this user:\n\nUser: {{ $('Calculate Churn Risk & ROI').item.json.name }}\nRisk Level: {{ $('Calculate Churn Risk & ROI').item.json.riskLevel }}\nIssues: {{ $('Calculate Churn Risk & ROI').item.json.triggeredIndicators.join(', ') }}\nRevenue at Risk: ${{ $('Calculate Churn Risk & ROI').item.json.potentialRevenueLoss }}\nROI of Retention: {{ $('Calculate Churn Risk & ROI').item.json.roi.toFixed(2) }}x\n\nCreate a detailed action plan including:\n1. Immediate interventions (within 24 hours)\n2. Short-term tactics (1-7 days)\n3. Long-term relationship building (1-4 weeks)\n4. Success metrics to track\n5. Escalation procedures if initial efforts fail\n6. Personalized onboarding/training recommendations\n7. Feature recommendations to increase stickiness\n8. Timeline with specific deadlines\n9. Team assignments (support, success, sales)\n10. Follow-up schedule\n\nMake it actionable with specific steps, deadlines, and success criteria. Focus on addressing root causes, not just symptoms."
            },
            {
              "name": "stream",
              "value": false
            }
          ]
        }
      },
      "id": "5",
      "name": "Generate Action Plan",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// Create comprehensive retention campaign\nconst retentionData = {\n  userId: $('Calculate Churn Risk & ROI').item.json.userId,\n  email: $('Calculate Churn Risk & ROI').item.json.email,\n  name: $('Calculate Churn Risk & ROI').item.json.name,\n  riskLevel: $('Calculate Churn Risk & ROI').item.json.riskLevel,\n  churnScore: $('Calculate Churn Risk & ROI').item.json.churnScore,\n  potentialRevenueLoss: $('Calculate Churn Risk & ROI').item.json.potentialRevenueLoss,\n  potentialSavings: $('Calculate Churn Risk & ROI').item.json.potentialSavings,\n  roi: $('Calculate Churn Risk & ROI').item.json.roi,\n  \n  campaign: {\n    id: 'retention_' + Date.now(),\n    type: 'churn_prevention',\n    createdAt: new Date().toISOString(),\n    status: 'active',\n    priority: $('Calculate Churn Risk & ROI').item.json.riskLevel,\n    \n    communications: {\n      email: {\n        subject: `We want to help you succeed with TenantFlow - ${$('Calculate Churn Risk & ROI').item.json.strategy.value}`,\n        content: $('Generate Retention Email').item.json.response,\n        sentAt: new Date().toISOString()\n      },\n      \n      followUp: {\n        hour6: {\n          type: 'in_app_notification',\n          message: 'Check your email for exclusive savings!',\n          scheduledFor: new Date(Date.now() + 6 * 60 * 60 * 1000).toISOString()\n        },\n        day1: {\n          type: 'personal_call',\n          assigned: 'success_manager',\n          scheduledFor: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\n        },\n        day3: {\n          type: 'enhanced_offer',\n          discount: $('Calculate Churn Risk & ROI').item.json.strategy.discount + 10,\n          scheduledFor: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString()\n        }\n      }\n    },\n    \n    actionPlan: $('Generate Action Plan').item.json.response,\n    \n    tracking: {\n      emailOpened: false,\n      emailClicked: false,\n      offerViewed: false,\n      callCompleted: false,\n      issuesResolved: [],\n      satisfactionImprovement: 0,\n      engagementIncrease: 0\n    },\n    \n    success_metrics: {\n      targetEngagementIncrease: '50%',\n      targetSatisfactionScore: '8+',\n      retentionProbability: $('Calculate Churn Risk & ROI').item.json.strategy.revenueImpact / 47,\n      expectedRevenueSaved: $('Calculate Churn Risk & ROI').item.json.potentialSavings\n    }\n  }\n};\n\nreturn { json: retentionData };"
      },
      "id": "6",
      "name": "Create Retention Campaign",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "filePathType": "absolute",
        "fileName": "/home/user/tenantflow-content/retention-campaigns/{{ $json.campaign.id }}.json",
        "data": "{{ JSON.stringify($json, null, 2) }}"
      },
      "id": "7",
      "name": "Save Retention Campaign",
      "type": "n8n-nodes-base.files",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 18,
              "triggerAtMinute": 0
            }
          ]
        }
      },
      "id": "8",
      "name": "Track Retention Success",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 600]
    },
    {
      "parameters": {
        "operation": "read",
        "filePathType": "absolute",
        "fileName": "/home/user/tenantflow-content/data/retention-results.json"
      },
      "id": "9",
      "name": "Load Retention Results",
      "type": "n8n-nodes-base.files",
      "typeVersion": 1,
      "position": [460, 600]
    },
    {
      "parameters": {
        "jsCode": "const retentionResults = JSON.parse($input.first().data || '[]');\n\n// Calculate retention performance metrics\nconst today = new Date();\nconst last30Days = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString();\nconst last7Days = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString();\n\n// Filter recent retention campaigns\nconst recentCampaigns = retentionResults.filter(r => r.campaignDate >= last30Days);\nconst weeklyRetentions = retentionResults.filter(r => r.campaignDate >= last7Days);\n\n// Calculate success rates by risk level\nconst successByRisk = {\n  critical: { attempted: 0, successful: 0, revenue: 0 },\n  high: { attempted: 0, successful: 0, revenue: 0 },\n  medium: { attempted: 0, successful: 0, revenue: 0 },\n  low: { attempted: 0, successful: 0, revenue: 0 }\n};\n\nrecentCampaigns.forEach(campaign => {\n  const risk = campaign.riskLevel;\n  if (successByRisk[risk]) {\n    successByRisk[risk].attempted += 1;\n    if (campaign.retained) {\n      successByRisk[risk].successful += 1;\n      successByRisk[risk].revenue += campaign.monthlyValue * 12; // Annual value\n    }\n  }\n});\n\n// Calculate ROI of retention efforts\nconst totalInvestment = recentCampaigns.reduce((sum, c) => sum + (c.retentionCost || 20), 0);\nconst totalRevenueSaved = recentCampaigns\n  .filter(c => c.retained)\n  .reduce((sum, c) => sum + (c.monthlyValue * 12), 0);\n\nconst retentionROI = totalInvestment > 0 ? (totalRevenueSaved - totalInvestment) / totalInvestment : 0;\n\n// Success rates\nconst overallSuccessRate = recentCampaigns.length > 0 ? \n  recentCampaigns.filter(c => c.retained).length / recentCampaigns.length * 100 : 0;\n\n// Average time to retention (success)\nconst successfulCampaigns = recentCampaigns.filter(c => c.retained);\nconst avgTimeToRetention = successfulCampaigns.length > 0 ?\n  successfulCampaigns.reduce((sum, c) => sum + (c.daysToRetention || 3), 0) / successfulCampaigns.length : 0;\n\n// Most effective strategies\nconst strategyEffectiveness = {};\nrecentCampaigns.forEach(c => {\n  const strategy = c.strategy || 'unknown';\n  if (!strategyEffectiveness[strategy]) {\n    strategyEffectiveness[strategy] = { attempted: 0, successful: 0, rate: 0 };\n  }\n  strategyEffectiveness[strategy].attempted += 1;\n  if (c.retained) {\n    strategyEffectiveness[strategy].successful += 1;\n  }\n  strategyEffectiveness[strategy].rate = \n    strategyEffectiveness[strategy].successful / strategyEffectiveness[strategy].attempted * 100;\n});\n\n// Revenue impact projections\nconst monthlyRevenueSaved = totalRevenueSaved / 12;\nconst projectedQuarterlySavings = monthlyRevenueSaved * 3;\nconst projectedAnnualSavings = totalRevenueSaved;\n\nreturn {\n  json: {\n    performance: {\n      last30Days: {\n        campaigns: recentCampaigns.length,\n        successful: recentCampaigns.filter(c => c.retained).length,\n        successRate: overallSuccessRate,\n        revenueSaved: totalRevenueSaved\n      },\n      last7Days: {\n        campaigns: weeklyRetentions.length,\n        successful: weeklyRetentions.filter(c => c.retained).length,\n        revenueSaved: weeklyRetentions.filter(c => c.retained).reduce((sum, c) => sum + (c.monthlyValue * 12), 0)\n      }\n    },\n    financials: {\n      totalInvestment: totalInvestment,\n      totalRevenueSaved: totalRevenueSaved,\n      roi: retentionROI,\n      monthlyRevenueSaved: monthlyRevenueSaved,\n      netBenefit: totalRevenueSaved - totalInvestment\n    },\n    insights: {\n      successByRiskLevel: successByRisk,\n      strategyEffectiveness: strategyEffectiveness,\n      avgTimeToRetention: avgTimeToRetention,\n      topStrategies: Object.entries(strategyEffectiveness)\n        .sort(([,a], [,b]) => b.rate - a.rate)\n        .slice(0, 3)\n    },\n    projections: {\n      quarterly: projectedQuarterlySavings,\n      annual: projectedAnnualSavings,\n      churnReductionRate: overallSuccessRate\n    },\n    reportDate: new Date().toISOString()\n  }\n};"
      },
      "id": "10",
      "name": "Calculate Retention ROI",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 600]
    },
    {
      "parameters": {
        "operation": "write",
        "filePathType": "absolute",
        "fileName": "/home/user/tenantflow-content/reports/retention-roi-{{ new Date().toISOString().split('T')[0] }}.json",
        "data": "{{ JSON.stringify($json, null, 2) }}"
      },
      "id": "11",
      "name": "Save ROI Report",
      "type": "n8n-nodes-base.files",
      "typeVersion": 1,
      "position": [900, 600]
    }
  ],
  "connections": {
    "Daily Churn Risk Analysis": {
      "main": [
        [
          {
            "node": "Load User Behavior Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load User Behavior Data": {
      "main": [
        [
          {
            "node": "Calculate Churn Risk & ROI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Churn Risk & ROI": {
      "main": [
        [
          {
            "node": "Generate Retention Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Retention Email": {
      "main": [
        [
          {
            "node": "Generate Action Plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Action Plan": {
      "main": [
        [
          {
            "node": "Create Retention Campaign",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Retention Campaign": {
      "main": [
        [
          {
            "node": "Save Retention Campaign",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Track Retention Success": {
      "main": [
        [
          {
            "node": "Load Retention Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Retention Results": {
      "main": [
        [
          {
            "node": "Calculate Retention ROI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Retention ROI": {
      "main": [
        [
          {
            "node": "Save ROI Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "meta": {
    "description": "Identifies users at risk of churning and automatically deploys personalized retention campaigns to save revenue",
    "tags": ["churn", "retention", "revenue", "customer-success", "automation"]
  }
}