{
  "name": "Competitor Content Analysis Automation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 6,
              "triggerAtMinute": 0
            }
          ]
        }
      },
      "id": "1",
      "name": "Daily Analysis Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "read",
        "filePathType": "absolute",
        "fileName": "/home/user/tenantflow-content/data/competitor-urls.json"
      },
      "id": "2",
      "name": "Load Competitor URLs",
      "type": "n8n-nodes-base.files",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "const competitors = JSON.parse($input.first().data);\nconst randomCompetitor = competitors[Math.floor(Math.random() * competitors.length)];\n\n// Select random blog/content page\nconst contentPages = [\n  '/blog/',\n  '/resources/',\n  '/guides/',\n  '/articles/',\n  '/news/'\n];\n\nconst selectedPage = contentPages[Math.floor(Math.random() * contentPages.length)];\nconst targetUrl = randomCompetitor.baseUrl + selectedPage;\n\nreturn {\n  json: {\n    competitor: randomCompetitor,\n    targetUrl: targetUrl,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "3",
      "name": "Select Random Competitor",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "{{ $json.targetUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (compatible; TenantFlowBot/1.0)"
            }
          ]
        }
      },
      "id": "4",
      "name": "Scrape Competitor Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "const html = $input.first().data;\n\n// Extract content using simple regex patterns\nconst titleMatch = html.match(/<title[^>]*>([^<]+)<\\/title>/i);\nconst h1Match = html.match(/<h1[^>]*>([^<]+)<\\/h1>/i);\nconst metaDescMatch = html.match(/<meta[^>]*name=[\"']description[\"'][^>]*content=[\"']([^\"']+)[\"']/i);\n\n// Extract article content (simplified)\nconst articleMatch = html.match(/<article[^>]*>([\\s\\S]*?)<\\/article>/i) || \n                   html.match(/<main[^>]*>([\\s\\S]*?)<\\/main>/i) ||\n                   html.match(/<div[^>]*class=[\"'][^\"']*content[^\"']*[\"'][^>]*>([\\s\\S]*?)<\\/div>/i);\n\n// Clean HTML tags from content\nconst cleanText = (text) => {\n  if (!text) return '';\n  return text.replace(/<[^>]*>/g, ' ')\n             .replace(/\\s+/g, ' ')\n             .trim()\n             .substring(0, 2000);\n};\n\nconst extractedContent = {\n  title: titleMatch ? titleMatch[1] : 'No title found',\n  h1: h1Match ? h1Match[1] : 'No H1 found',\n  metaDescription: metaDescMatch ? metaDescMatch[1] : 'No meta description',\n  content: cleanText(articleMatch ? articleMatch[1] : ''),\n  url: $('Select Random Competitor').item.json.targetUrl,\n  competitor: $('Select Random Competitor').item.json.competitor.name,\n  scrapedAt: new Date().toISOString()\n};\n\nreturn { json: extractedContent };"
      },
      "id": "5",
      "name": "Extract Content Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.0.177:11434/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "qwen3:8b"
            },
            {
              "name": "prompt",
              "value": "Analyze this competitor content and provide insights for TenantFlow:\n\nCompetitor: {{ $json.competitor }}\nTitle: {{ $json.title }}\nH1: {{ $json.h1 }}\nMeta Description: {{ $json.metaDescription }}\nContent Sample: {{ $json.content }}\nURL: {{ $json.url }}\n\nProvide analysis on:\n1. Content strategy and approach\n2. Key topics and keywords they're targeting\n3. Content gaps we could exploit\n4. Better content ideas for TenantFlow\n5. SEO opportunities\n6. Content format innovations\n\nFormat as actionable insights for content creation."
            },
            {
              "name": "stream",
              "value": false
            }
          ]
        }
      },
      "id": "6",
      "name": "Analyze with Local LLM",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "filePathType": "absolute",
        "fileName": "/home/user/tenantflow-content/competitor-analysis/{{ $('Select Random Competitor').item.json.competitor.name.toLowerCase().replace(/[^a-z0-9]/g, '-') }}-{{ new Date().toISOString().split('T')[0] }}.json",
        "data": "{\n  \"competitor\": \"{{ $('Extract Content Data').item.json.competitor }}\",\n  \"analyzedAt\": \"{{ new Date().toISOString() }}\",\n  \"url\": \"{{ $('Extract Content Data').item.json.url }}\",\n  \"extractedData\": {{ JSON.stringify($('Extract Content Data').item.json, null, 2) }},\n  \"aiInsights\": \"{{ $('Analyze with Local LLM').item.json.response }}\",\n  \"actionItems\": {\n    \"contentIdeas\": [],\n    \"keywordOpportunities\": [],\n    \"strategicInsights\": []\n  }\n}"
      },
      "id": "7",
      "name": "Save Analysis Report",
      "type": "n8n-nodes-base.files",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "Daily Analysis Trigger": {
      "main": [
        [
          {
            "node": "Load Competitor URLs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Competitor URLs": {
      "main": [
        [
          {
            "node": "Select Random Competitor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Random Competitor": {
      "main": [
        [
          {
            "node": "Scrape Competitor Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Competitor Content": {
      "main": [
        [
          {
            "node": "Extract Content Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Content Data": {
      "main": [
        [
          {
            "node": "Analyze with Local LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze with Local LLM": {
      "main": [
        [
          {
            "node": "Save Analysis Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "meta": {
    "description": "Analyzes competitor content daily to identify opportunities and content gaps for TenantFlow",
    "tags": ["competitor", "analysis", "scraping", "content", "strategy"]
  }
}