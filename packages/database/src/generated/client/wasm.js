
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BlogArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  content: 'content',
  excerpt: 'excerpt',
  authorId: 'authorId',
  authorName: 'authorName',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  ogImage: 'ogImage',
  category: 'category',
  status: 'status',
  featured: 'featured',
  publishedAt: 'publishedAt',
  viewCount: 'viewCount',
  readTime: 'readTime',
  searchKeywords: 'searchKeywords',
  lastIndexed: 'lastIndexed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  color: 'color',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerInvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  status: 'status',
  businessName: 'businessName',
  businessEmail: 'businessEmail',
  businessAddress: 'businessAddress',
  businessCity: 'businessCity',
  businessState: 'businessState',
  businessZip: 'businessZip',
  businessPhone: 'businessPhone',
  businessLogo: 'businessLogo',
  clientName: 'clientName',
  clientEmail: 'clientEmail',
  clientAddress: 'clientAddress',
  clientCity: 'clientCity',
  clientState: 'clientState',
  clientZip: 'clientZip',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  subtotal: 'subtotal',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  total: 'total',
  notes: 'notes',
  terms: 'terms',
  emailCaptured: 'emailCaptured',
  downloadCount: 'downloadCount',
  isProVersion: 'isProVersion',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerInvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  total: 'total',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  filename: 'filename',
  url: 'url',
  type: 'type',
  mimeType: 'mimeType',
  size: 'size',
  propertyId: 'propertyId',
  leaseId: 'leaseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  fileSizeBytes: 'fileSizeBytes'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  maintenanceId: 'maintenanceId',
  amount: 'amount',
  category: 'category',
  description: 'description',
  date: 'date',
  receiptUrl: 'receiptUrl',
  vendorName: 'vendorName',
  vendorContact: 'vendorContact',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InspectionScalarFieldEnum = {
  id: 'id',
  propertyId: 'propertyId',
  unitId: 'unitId',
  inspectorId: 'inspectorId',
  type: 'type',
  scheduledDate: 'scheduledDate',
  completedDate: 'completedDate',
  status: 'status',
  notes: 'notes',
  reportUrl: 'reportUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subscriptionId: 'subscriptionId',
  stripeInvoiceId: 'stripeInvoiceId',
  amountPaid: 'amountPaid',
  amountDue: 'amountDue',
  currency: 'currency',
  status: 'status',
  invoiceDate: 'invoiceDate',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  invoiceUrl: 'invoiceUrl',
  invoicePdf: 'invoicePdf',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceLeadCaptureScalarFieldEnum = {
  id: 'id',
  email: 'email',
  invoiceId: 'invoiceId',
  firstName: 'firstName',
  lastName: 'lastName',
  company: 'company',
  source: 'source',
  medium: 'medium',
  campaign: 'campaign',
  emailSent: 'emailSent',
  emailOpened: 'emailOpened',
  linkClicked: 'linkClicked',
  converted: 'converted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseScalarFieldEnum = {
  id: 'id',
  unitId: 'unitId',
  tenantId: 'tenantId',
  startDate: 'startDate',
  endDate: 'endDate',
  rentAmount: 'rentAmount',
  securityDeposit: 'securityDeposit',
  terms: 'terms',
  status: 'status',
  templateId: 'templateId',
  documentUrl: 'documentUrl',
  signatureStatus: 'signatureStatus',
  lateFeeDays: 'lateFeeDays',
  lateFeeAmount: 'lateFeeAmount',
  leaseTerms: 'leaseTerms',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseGeneratorUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  usageCount: 'usageCount',
  paymentStatus: 'paymentStatus',
  stripeSessionId: 'stripeSessionId',
  stripeCustomerId: 'stripeCustomerId',
  amountPaid: 'amountPaid',
  currency: 'currency',
  paymentDate: 'paymentDate',
  accessExpiresAt: 'accessExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MaintenanceRequestScalarFieldEnum = {
  id: 'id',
  unitId: 'unitId',
  title: 'title',
  description: 'description',
  category: 'category',
  priority: 'priority',
  status: 'status',
  preferredDate: 'preferredDate',
  allowEntry: 'allowEntry',
  contactPhone: 'contactPhone',
  requestedBy: 'requestedBy',
  notes: 'notes',
  photos: 'photos',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  assignedTo: 'assignedTo',
  estimatedCost: 'estimatedCost',
  actualCost: 'actualCost'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  threadId: 'threadId',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  readAt: 'readAt',
  attachmentUrl: 'attachmentUrl',
  createdAt: 'createdAt'
};

exports.Prisma.PropertyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  description: 'description',
  imageUrl: 'imageUrl',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  propertyType: 'propertyType'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  stripeCustomerId: 'stripeCustomerId',
  stripeSubscriptionId: 'stripeSubscriptionId',
  stripePriceId: 'stripePriceId',
  planId: 'planId',
  planType: 'planType',
  billingPeriod: 'billingPeriod',
  currentPeriodStart: 'currentPeriodStart',
  currentPeriodEnd: 'currentPeriodEnd',
  trialStart: 'trialStart',
  trialEnd: 'trialEnd',
  cancelAtPeriodEnd: 'cancelAtPeriodEnd',
  canceledAt: 'canceledAt'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  emergencyContact: 'emergencyContact',
  avatarUrl: 'avatarUrl',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  unitNumber: 'unitNumber',
  propertyId: 'propertyId',
  bedrooms: 'bedrooms',
  bathrooms: 'bathrooms',
  squareFeet: 'squareFeet',
  rent: 'rent',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastInspectionDate: 'lastInspectionDate'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  supabaseId: 'supabaseId',
  stripeCustomerId: 'stripeCustomerId',
  email: 'email',
  name: 'name',
  phone: 'phone',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  mfaEnabled: 'mfaEnabled',
  mfaSecret: 'mfaSecret',
  mfaBackupCodes: 'mfaBackupCodes',
  mfaEnrolledAt: 'mfaEnrolledAt',
  smsPhoneVerified: 'smsPhoneVerified',
  smsBackupEnabled: 'smsBackupEnabled',
  lastPasswordChange: 'lastPasswordChange',
  failedLoginAttempts: 'failedLoginAttempts',
  lastFailedLoginAt: 'lastFailedLoginAt',
  accountLockedAt: 'accountLockedAt',
  lockoutReason: 'lockoutReason',
  passwordChangeRequired: 'passwordChangeRequired',
  suspiciousActivityDetected: 'suspiciousActivityDetected',
  lastSuspiciousActivityAt: 'lastSuspiciousActivityAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  refreshTokenId: 'refreshTokenId',
  expiresAt: 'expiresAt',
  lastActivity: 'lastActivity',
  userAgent: 'userAgent',
  ipAddress: 'ipAddress',
  isActive: 'isActive',
  invalidatedAt: 'invalidatedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SecurityAuditLogScalarFieldEnum = {
  id: 'id',
  eventType: 'eventType',
  severity: 'severity',
  userId: 'userId',
  email: 'email',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  resource: 'resource',
  action: 'action',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.Wrappers_fdw_statsScalarFieldEnum = {
  fdw_name: 'fdw_name',
  create_times: 'create_times',
  rows_in: 'rows_in',
  rows_out: 'rows_out',
  bytes_in: 'bytes_in',
  bytes_out: 'bytes_out',
  metadata: 'metadata',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  entityName: 'entityName',
  createdAt: 'createdAt'
};

exports.Prisma.WebhookEventScalarFieldEnum = {
  id: 'id',
  stripeEventId: 'stripeEventId',
  eventType: 'eventType',
  processed: 'processed',
  processingTime: 'processingTime',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReminderLogScalarFieldEnum = {
  id: 'id',
  leaseId: 'leaseId',
  userId: 'userId',
  type: 'type',
  status: 'status',
  recipientEmail: 'recipientEmail',
  recipientName: 'recipientName',
  subject: 'subject',
  content: 'content',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  openedAt: 'openedAt',
  errorMessage: 'errorMessage',
  retryCount: 'retryCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  enableReminders: 'enableReminders',
  daysBeforeDue: 'daysBeforeDue',
  enableOverdueReminders: 'enableOverdueReminders',
  overdueGracePeriod: 'overdueGracePeriod',
  autoSendReminders: 'autoSendReminders',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  pushNotifications: 'pushNotifications',
  defaultDashboardView: 'defaultDashboardView',
  showWelcomeMessage: 'showWelcomeMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserFeatureAccessScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  canExportData: 'canExportData',
  canAccessAdvancedAnalytics: 'canAccessAdvancedAnalytics',
  canUseBulkOperations: 'canUseBulkOperations',
  canAccessAPI: 'canAccessAPI',
  canInviteTeamMembers: 'canInviteTeamMembers',
  maxProperties: 'maxProperties',
  maxUnitsPerProperty: 'maxUnitsPerProperty',
  maxStorageGB: 'maxStorageGB',
  hasPrioritySupport: 'hasPrioritySupport',
  canUsePremiumIntegrations: 'canUsePremiumIntegrations',
  lastUpdated: 'lastUpdated',
  updateReason: 'updateReason',
  createdAt: 'createdAt'
};

exports.Prisma.UserAccessLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  subscriptionStatus: 'subscriptionStatus',
  planType: 'planType',
  reason: 'reason',
  accessGranted: 'accessGranted',
  timestamp: 'timestamp'
};

exports.Prisma.NotificationLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  subscriptionId: 'subscriptionId',
  metadata: 'metadata',
  sentAt: 'sentAt',
  createdAt: 'createdAt'
};

exports.Prisma.InAppNotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  content: 'content',
  priority: 'priority',
  isRead: 'isRead',
  readAt: 'readAt',
  metadata: 'metadata',
  organizationId: 'organizationId',
  propertyId: 'propertyId',
  tenantId: 'tenantId',
  leaseId: 'leaseId',
  maintenanceRequestId: 'maintenanceRequestId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FailedWebhookEventScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  eventType: 'eventType',
  payload: 'payload',
  signature: 'signature',
  failureReason: 'failureReason',
  failureCount: 'failureCount',
  firstFailedAt: 'firstFailedAt',
  lastRetryAt: 'lastRetryAt',
  nextRetryAt: 'nextRetryAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FileScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  size: 'size',
  url: 'url',
  uploadedById: 'uploadedById',
  propertyId: 'propertyId',
  maintenanceRequestId: 'maintenanceRequestId',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentFailureScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  stripeInvoiceId: 'stripeInvoiceId',
  amount: 'amount',
  currency: 'currency',
  attemptCount: 'attemptCount',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  nextRetryAt: 'nextRetryAt',
  resolved: 'resolved',
  resolvedAt: 'resolvedAt',
  finalAttempt: 'finalAttempt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentMethodScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  stripePaymentMethodId: 'stripePaymentMethodId',
  type: 'type',
  isDefault: 'isDefault',
  lastFour: 'lastFour',
  brand: 'brand',
  expiryMonth: 'expiryMonth',
  expiryYear: 'expiryYear',
  fingerprint: 'fingerprint',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.RentChargeScalarFieldEnum = {
  id: 'id',
  leaseId: 'leaseId',
  tenantId: 'tenantId',
  unitId: 'unitId',
  amount: 'amount',
  currency: 'currency',
  dueDate: 'dueDate',
  status: 'status',
  lateFee: 'lateFee',
  lateFeeAppliedAt: 'lateFeeAppliedAt',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.RentPaymentScalarFieldEnum = {
  id: 'id',
  rentChargeId: 'rentChargeId',
  tenantId: 'tenantId',
  paymentMethodId: 'paymentMethodId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  amount: 'amount',
  currency: 'currency',
  processingFee: 'processingFee',
  netAmount: 'netAmount',
  status: 'status',
  paidAt: 'paidAt',
  failureReason: 'failureReason',
  receiptUrl: 'receiptUrl',
  stripeChargeId: 'stripeChargeId',
  stripeReceiptUrl: 'stripeReceiptUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.RentCollectionSettingsScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  unitId: 'unitId',
  propertyId: 'propertyId',
  dueDay: 'dueDay',
  gracePeriodDays: 'gracePeriodDays',
  lateFeeType: 'lateFeeType',
  lateFeeAmount: 'lateFeeAmount',
  maxLateFeeAmount: 'maxLateFeeAmount',
  allowedPaymentMethods: 'allowedPaymentMethods',
  autoChargeEnabled: 'autoChargeEnabled',
  reminderDaysBefore: 'reminderDaysBefore',
  sendPaymentReminders: 'sendPaymentReminders',
  sendReceiptEmails: 'sendReceiptEmails',
  sendLateNotices: 'sendLateNotices',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId'
};

exports.Prisma.PaymentAttemptScalarFieldEnum = {
  id: 'id',
  rentPaymentId: 'rentPaymentId',
  attemptNumber: 'attemptNumber',
  stripePaymentIntentId: 'stripePaymentIntentId',
  status: 'status',
  failureCode: 'failureCode',
  failureMessage: 'failureMessage',
  attemptedAt: 'attemptedAt',
  organizationId: 'organizationId'
};

exports.Prisma.PropertyOwnerInvoiceScalarFieldEnum = {
  id: 'id',
  invoiceNumber: 'invoiceNumber',
  status: 'status',
  customerId: 'customerId',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerAddress: 'customerAddress',
  customerCity: 'customerCity',
  customerState: 'customerState',
  customerZip: 'customerZip',
  customerPhone: 'customerPhone',
  businessName: 'businessName',
  businessAddress: 'businessAddress',
  businessCity: 'businessCity',
  businessState: 'businessState',
  businessZip: 'businessZip',
  businessPhone: 'businessPhone',
  businessEmail: 'businessEmail',
  businessLogo: 'businessLogo',
  businessTaxId: 'businessTaxId',
  issueDate: 'issueDate',
  dueDate: 'dueDate',
  subtotal: 'subtotal',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  total: 'total',
  amountPaid: 'amountPaid',
  balanceDue: 'balanceDue',
  templateId: 'templateId',
  notes: 'notes',
  terms: 'terms',
  paymentInstructions: 'paymentInstructions',
  pdfUrl: 'pdfUrl',
  pdfGeneratedAt: 'pdfGeneratedAt',
  sentAt: 'sentAt',
  viewedAt: 'viewedAt',
  lastReminderSentAt: 'lastReminderSentAt',
  reminderCount: 'reminderCount',
  stripeInvoiceId: 'stripeInvoiceId',
  stripePaymentIntentId: 'stripePaymentIntentId',
  recurringScheduleId: 'recurringScheduleId',
  isRecurring: 'isRecurring',
  organizationId: 'organizationId',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyInvoiceLineItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  total: 'total',
  taxable: 'taxable',
  taxRate: 'taxRate',
  taxAmount: 'taxAmount',
  serviceType: 'serviceType',
  serviceCategory: 'serviceCategory',
  servicePeriodStart: 'servicePeriodStart',
  servicePeriodEnd: 'servicePeriodEnd',
  propertyId: 'propertyId',
  unitId: 'unitId',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyInvoiceTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  templateType: 'templateType',
  isDefault: 'isDefault',
  isActive: 'isActive',
  businessName: 'businessName',
  businessAddress: 'businessAddress',
  businessCity: 'businessCity',
  businessState: 'businessState',
  businessZip: 'businessZip',
  businessPhone: 'businessPhone',
  businessEmail: 'businessEmail',
  businessLogo: 'businessLogo',
  businessTaxId: 'businessTaxId',
  defaultTerms: 'defaultTerms',
  defaultPaymentInstructions: 'defaultPaymentInstructions',
  defaultNotes: 'defaultNotes',
  dueDays: 'dueDays',
  colorScheme: 'colorScheme',
  logoPosition: 'logoPosition',
  showTaxId: 'showTaxId',
  showPaymentInstructions: 'showPaymentInstructions',
  organizationId: 'organizationId',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PropertyInvoicePaymentScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  status: 'status',
  stripePaymentIntentId: 'stripePaymentIntentId',
  stripeChargeId: 'stripeChargeId',
  transactionId: 'transactionId',
  paidAt: 'paidAt',
  failureReason: 'failureReason',
  receiptUrl: 'receiptUrl',
  payerName: 'payerName',
  payerEmail: 'payerEmail',
  organizationId: 'organizationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecurringInvoiceScheduleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  frequency: 'frequency',
  interval: 'interval',
  templateId: 'templateId',
  isActive: 'isActive',
  customerName: 'customerName',
  customerEmail: 'customerEmail',
  customerAddress: 'customerAddress',
  customerCity: 'customerCity',
  customerState: 'customerState',
  customerZip: 'customerZip',
  customerPhone: 'customerPhone',
  startDate: 'startDate',
  endDate: 'endDate',
  nextInvoiceDate: 'nextInvoiceDate',
  lastInvoiceDate: 'lastInvoiceDate',
  dueDays: 'dueDays',
  autoSend: 'autoSend',
  lineItemsTemplate: 'lineItemsTemplate',
  organizationId: 'organizationId',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  state: 'state',
  type: 'type',
  content: 'content',
  variables: 'variables',
  isActive: 'isActive',
  isSystemTemplate: 'isSystemTemplate',
  version: 'version',
  parentTemplateId: 'parentTemplateId',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseClauseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  category: 'category',
  state: 'state',
  isRequired: 'isRequired',
  isSystemClause: 'isSystemClause',
  ownerId: 'ownerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseTemplateClausesScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  clauseId: 'clauseId',
  order: 'order',
  isRequired: 'isRequired',
  customContent: 'customContent'
};

exports.Prisma.LeaseDocumentScalarFieldEnum = {
  id: 'id',
  leaseId: 'leaseId',
  templateId: 'templateId',
  documentUrl: 'documentUrl',
  status: 'status',
  version: 'version',
  generatedAt: 'generatedAt',
  signatureProvider: 'signatureProvider',
  signatureEnvelopeId: 'signatureEnvelopeId',
  variables: 'variables',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseSignatureScalarFieldEnum = {
  id: 'id',
  leaseDocumentId: 'leaseDocumentId',
  signerType: 'signerType',
  signerName: 'signerName',
  signerEmail: 'signerEmail',
  signerId: 'signerId',
  status: 'status',
  signedAt: 'signedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  signatureImageUrl: 'signatureImageUrl',
  providerSignatureId: 'providerSignatureId',
  auditTrail: 'auditTrail',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseAmendmentScalarFieldEnum = {
  id: 'id',
  leaseId: 'leaseId',
  title: 'title',
  description: 'description',
  type: 'type',
  content: 'content',
  effectiveDate: 'effectiveDate',
  status: 'status',
  documentUrl: 'documentUrl',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeaseRenewalScalarFieldEnum = {
  id: 'id',
  originalLeaseId: 'originalLeaseId',
  newLeaseId: 'newLeaseId',
  status: 'status',
  proposedStartDate: 'proposedStartDate',
  proposedEndDate: 'proposedEndDate',
  proposedRentAmount: 'proposedRentAmount',
  notes: 'notes',
  offerExpiresAt: 'offerExpiresAt',
  respondedAt: 'respondedAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MfaSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  type: 'type',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt'
};

exports.Prisma.OAuthAccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerId: 'providerId',
  providerEmail: 'providerEmail',
  providerData: 'providerData',
  linkedAt: 'linkedAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.SecurityEventScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventType: 'eventType',
  severity: 'severity',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  resource: 'resource',
  action: 'action',
  success: 'success',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.PasswordHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  passwordHash: 'passwordHash',
  createdAt: 'createdAt'
};

exports.Prisma.LoginAttemptScalarFieldEnum = {
  id: 'id',
  email: 'email',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  failureReason: 'failureReason',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.BlogCategory = exports.$Enums.BlogCategory = {
  PROPERTY_MANAGEMENT: 'PROPERTY_MANAGEMENT',
  LEGAL_COMPLIANCE: 'LEGAL_COMPLIANCE',
  FINANCIAL_MANAGEMENT: 'FINANCIAL_MANAGEMENT',
  PROPERTY_MAINTENANCE: 'PROPERTY_MAINTENANCE',
  SOFTWARE_REVIEWS: 'SOFTWARE_REVIEWS',
  TENANT_RELATIONS: 'TENANT_RELATIONS',
  MARKETING: 'MARKETING',
  REAL_ESTATE_INVESTMENT: 'REAL_ESTATE_INVESTMENT',
  TAX_PLANNING: 'TAX_PLANNING',
  AUTOMATION: 'AUTOMATION'
};

exports.BlogStatus = exports.$Enums.BlogStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  SCHEDULED: 'SCHEDULED'
};

exports.CustomerInvoiceStatus = exports.$Enums.CustomerInvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  VIEWED: 'VIEWED',
  PAID: 'PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  LEASE: 'LEASE',
  INVOICE: 'INVOICE',
  RECEIPT: 'RECEIPT',
  PROPERTY_PHOTO: 'PROPERTY_PHOTO',
  INSPECTION: 'INSPECTION',
  MAINTENANCE: 'MAINTENANCE',
  OTHER: 'OTHER'
};

exports.LeaseStatus = exports.$Enums.LeaseStatus = {
  DRAFT: 'DRAFT',
  PENDING_REVIEW: 'PENDING_REVIEW',
  PENDING_SIGNATURES: 'PENDING_SIGNATURES',
  SIGNED: 'SIGNED',
  ACTIVE: 'ACTIVE',
  EXPIRED: 'EXPIRED',
  TERMINATED: 'TERMINATED',
  PENDING_RENEWAL: 'PENDING_RENEWAL'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  EMERGENCY: 'EMERGENCY'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  ON_HOLD: 'ON_HOLD'
};

exports.PropertyType = exports.$Enums.PropertyType = {
  SINGLE_FAMILY: 'SINGLE_FAMILY',
  MULTI_UNIT: 'MULTI_UNIT',
  APARTMENT: 'APARTMENT',
  COMMERCIAL: 'COMMERCIAL'
};

exports.SubStatus = exports.$Enums.SubStatus = {
  ACTIVE: 'ACTIVE',
  TRIALING: 'TRIALING',
  PAST_DUE: 'PAST_DUE',
  CANCELED: 'CANCELED',
  UNPAID: 'UNPAID',
  INCOMPLETE: 'INCOMPLETE',
  INCOMPLETE_EXPIRED: 'INCOMPLETE_EXPIRED'
};

exports.PlanType = exports.$Enums.PlanType = {
  FREETRIAL: 'FREETRIAL',
  STARTER: 'STARTER',
  GROWTH: 'GROWTH',
  TENANTFLOW_MAX: 'TENANTFLOW_MAX'
};

exports.UnitStatus = exports.$Enums.UnitStatus = {
  VACANT: 'VACANT',
  OCCUPIED: 'OCCUPIED',
  MAINTENANCE: 'MAINTENANCE',
  RESERVED: 'RESERVED'
};

exports.UserRole = exports.$Enums.UserRole = {
  OWNER: 'OWNER',
  MANAGER: 'MANAGER',
  TENANT: 'TENANT',
  ADMIN: 'ADMIN'
};

exports.ActivityEntityType = exports.$Enums.ActivityEntityType = {
  property: 'property',
  tenant: 'tenant',
  maintenance: 'maintenance',
  payment: 'payment',
  lease: 'lease',
  unit: 'unit'
};

exports.ReminderType = exports.$Enums.ReminderType = {
  RENT_REMINDER: 'RENT_REMINDER',
  LEASE_EXPIRATION: 'LEASE_EXPIRATION',
  MAINTENANCE_DUE: 'MAINTENANCE_DUE',
  PAYMENT_OVERDUE: 'PAYMENT_OVERDUE'
};

exports.ReminderStatus = exports.$Enums.ReminderStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  DELIVERED: 'DELIVERED',
  OPENED: 'OPENED'
};

exports.RentChargeStatus = exports.$Enums.RentChargeStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  PARTIAL: 'PARTIAL',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.RentPaymentStatus = exports.$Enums.RentPaymentStatus = {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REQUIRES_ACTION: 'REQUIRES_ACTION'
};

exports.LateFeeType = exports.$Enums.LateFeeType = {
  FIXED: 'FIXED',
  PERCENTAGE: 'PERCENTAGE'
};

exports.PropertyInvoiceStatus = exports.$Enums.PropertyInvoiceStatus = {
  DRAFT: 'DRAFT',
  SENT: 'SENT',
  VIEWED: 'VIEWED',
  PAID: 'PAID',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED',
  VOID: 'VOID'
};

exports.PropertyPaymentStatus = exports.$Enums.PropertyPaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SUCCEEDED: 'SUCCEEDED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.RecurringFrequency = exports.$Enums.RecurringFrequency = {
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  QUARTERLY: 'QUARTERLY',
  SEMI_ANNUALLY: 'SEMI_ANNUALLY',
  ANNUALLY: 'ANNUALLY'
};

exports.Prisma.ModelName = {
  BlogArticle: 'BlogArticle',
  BlogTag: 'BlogTag',
  CustomerInvoice: 'CustomerInvoice',
  CustomerInvoiceItem: 'CustomerInvoiceItem',
  Document: 'Document',
  Expense: 'Expense',
  Inspection: 'Inspection',
  Invoice: 'Invoice',
  InvoiceLeadCapture: 'InvoiceLeadCapture',
  Lease: 'Lease',
  LeaseGeneratorUsage: 'LeaseGeneratorUsage',
  MaintenanceRequest: 'MaintenanceRequest',
  Message: 'Message',
  Property: 'Property',
  Subscription: 'Subscription',
  Tenant: 'Tenant',
  Unit: 'Unit',
  User: 'User',
  UserSession: 'UserSession',
  SecurityAuditLog: 'SecurityAuditLog',
  wrappers_fdw_stats: 'wrappers_fdw_stats',
  Activity: 'Activity',
  WebhookEvent: 'WebhookEvent',
  ReminderLog: 'ReminderLog',
  UserPreferences: 'UserPreferences',
  UserFeatureAccess: 'UserFeatureAccess',
  UserAccessLog: 'UserAccessLog',
  NotificationLog: 'NotificationLog',
  InAppNotification: 'InAppNotification',
  FailedWebhookEvent: 'FailedWebhookEvent',
  File: 'File',
  PaymentFailure: 'PaymentFailure',
  PaymentMethod: 'PaymentMethod',
  RentCharge: 'RentCharge',
  RentPayment: 'RentPayment',
  RentCollectionSettings: 'RentCollectionSettings',
  PaymentAttempt: 'PaymentAttempt',
  PropertyOwnerInvoice: 'PropertyOwnerInvoice',
  PropertyInvoiceLineItem: 'PropertyInvoiceLineItem',
  PropertyInvoiceTemplate: 'PropertyInvoiceTemplate',
  PropertyInvoicePayment: 'PropertyInvoicePayment',
  RecurringInvoiceSchedule: 'RecurringInvoiceSchedule',
  LeaseTemplate: 'LeaseTemplate',
  LeaseClause: 'LeaseClause',
  LeaseTemplateClauses: 'LeaseTemplateClauses',
  LeaseDocument: 'LeaseDocument',
  LeaseSignature: 'LeaseSignature',
  LeaseAmendment: 'LeaseAmendment',
  LeaseRenewal: 'LeaseRenewal',
  MfaSession: 'MfaSession',
  OAuthAccount: 'OAuthAccount',
  SecurityEvent: 'SecurityEvent',
  PasswordHistory: 'PasswordHistory',
  LoginAttempt: 'LoginAttempt'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
