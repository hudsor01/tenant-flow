generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model BlogArticle {
  id            String           @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  slug          String           @unique
  description   String
  content       String
  excerpt       String?
  authorId      String?
  authorName    String 
  metaTitle     String?
  metaDescription String?
  ogImage       String?
  category      BlogCategory     @default(PROPERTY_MANAGEMENT)
  tags          BlogTag[]        @relation("BlogArticleToBlogTag")
  status        BlogStatus       @default(DRAFT)
  featured      Boolean          @default(false)
  publishedAt   DateTime?        @db.Timestamptz(6)
  viewCount     Int              @default(0)
  readTime      Int?
  searchKeywords String[]
  lastIndexed   DateTime?        @db.Timestamptz(6)
  createdAt     DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime         @default(now()) @db.Timestamptz(6)
  
  // Relations
  author        User?            @relation(fields: [authorId], references: [id], onDelete: SetNull)
  
  @@index([authorId], map: "idx_blog_article_author_id")
  @@index([slug], map: "idx_blog_article_slug")
  @@index([status, publishedAt], map: "idx_blog_article_published")
  @@index([category], map: "idx_blog_article_category")
  @@index([featured], map: "idx_blog_article_featured")
  @@index([createdAt], map: "idx_blog_article_created")
}

model BlogTag {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  name      String        @unique
  slug      String        @unique
  color     String?
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  articles  BlogArticle[] @relation("BlogArticleToBlogTag")

  @@index([slug], map: "idx_blog_tag_slug")
}

/// Separate from subscription invoices - these are customer invoices
model CustomerInvoice {
  id              String               @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNumber   String               @unique
  status          CustomerInvoiceStatus @default(DRAFT)
  businessName    String
  businessEmail   String
  businessAddress String?
  businessCity    String?
  businessState   String?
  businessZip     String?
  businessPhone   String?
  businessLogo    String?
  clientName      String
  clientEmail     String
  clientAddress   String?
  clientCity      String?
  clientState     String?
  clientZip       String?
  issueDate       DateTime             @default(now()) @db.Timestamptz(6)
  dueDate         DateTime             @db.Timestamptz(6)
  subtotal        Decimal              @db.Decimal(10,2) @default(0)
  taxRate         Decimal              @db.Decimal(5,2) @default(0)
  taxAmount       Decimal              @db.Decimal(10,2) @default(0)
  total           Decimal              @db.Decimal(10,2) @default(0)
  notes           String?
  terms           String?
  emailCaptured   String?
  downloadCount   Int                  @default(0)
  isProVersion    Boolean              @default(false)
  userAgent       String?
  ipAddress       String?
  createdAt       DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime             @default(now()) @db.Timestamptz(6)
  
  // Relations
  items           CustomerInvoiceItem[]
  
  @@index([emailCaptured], map: "idx_customer_invoice_email")
  @@index([status], map: "idx_customer_invoice_status")
  @@index([createdAt], map: "idx_customer_invoice_created")
}

model CustomerInvoiceItem {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  invoiceId     String
  description   String
  quantity      Decimal         @db.Decimal(10,2)
  unitPrice     Decimal         @db.Decimal(10,2)
  total         Decimal         @db.Decimal(10,2)
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
  
  // Relations
  invoice       CustomerInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId], map: "idx_customer_invoice_item_invoice")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Document {
  id            String       @id @default(dbgenerated("(gen_random_uuid())::text"))
  name          String
  filename      String?
  url           String
  type          DocumentType
  mimeType      String?
  size          BigInt?
  propertyId    String?
  leaseId       String?
  createdAt     DateTime?    @default(now()) @db.Timestamp(6)
  updatedAt     DateTime?    @default(now()) @db.Timestamp(6)
  fileSizeBytes BigInt       @default(0)
  Lease         Lease?       @relation(fields: [leaseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Property      Property?    @relation(fields: [propertyId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([leaseId], map: "idx_document_lease_id")
  @@index([propertyId], map: "idx_document_property_id")
  @@index([type], map: "idx_document_type")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Expense {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  propertyId         String
  maintenanceId      String?
  amount             Float
  category           String
  description        String
  date               DateTime            @db.Timestamp(6)
  receiptUrl         String?
  vendorName         String?
  vendorContact      String?
  createdAt          DateTime            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime            @default(now()) @db.Timestamp(6)
  MaintenanceRequest MaintenanceRequest? @relation(fields: [maintenanceId], references: [id], onUpdate: NoAction)
  Property           Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([maintenanceId], map: "idx_expense_maintenance_id")
  @@index([category], map: "idx_expense_category")
  @@index([date], map: "idx_expense_date")
  @@index([propertyId], map: "idx_expense_property_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Inspection {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  propertyId    String
  unitId        String?
  inspectorId   String
  type          String    @default("ROUTINE")
  scheduledDate DateTime  @db.Timestamp(6)
  completedDate DateTime? @db.Timestamp(6)
  status        String    @default("SCHEDULED")
  notes         String?
  reportUrl     String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @default(now()) @db.Timestamp(6)
  User          User      @relation(fields: [inspectorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Property      Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Unit          Unit?     @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([inspectorId], map: "idx_inspection_inspector_id")
  @@index([propertyId], map: "idx_inspection_property_id")
  @@index([scheduledDate], map: "idx_inspection_scheduled_date")
  @@index([unitId], map: "idx_inspection_unit_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Invoice {
  id              String        @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId          String
  subscriptionId  String?
  stripeInvoiceId String        @unique
  amountPaid      Int
  amountDue       Int
  currency        String        @default("usd")
  status          String
  invoiceDate     DateTime      @db.Timestamptz(6)
  dueDate         DateTime?     @db.Timestamptz(6)
  paidAt          DateTime?     @db.Timestamptz(6)
  invoiceUrl      String?
  invoicePdf      String?
  description     String?
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @default(now()) @db.Timestamptz(6)
  Subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onUpdate: NoAction)
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@index([subscriptionId], map: "idx_invoice_subscription_id")
  @@index([userId], map: "idx_invoice_user_id")
}

/// Lead capture tracking for marketing automation
model InvoiceLeadCapture {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  email           String
  invoiceId       String?
  firstName       String?
  lastName        String?
  company         String?
  source          String?
  medium          String?
  campaign        String?
  emailSent       Boolean   @default(false)
  emailOpened     Boolean   @default(false)
  linkClicked     Boolean   @default(false)
  converted       Boolean   @default(false)
  
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @db.Timestamptz(6)
  
  @@index([email], map: "idx_invoice_lead_email")
  @@index([source], map: "idx_invoice_lead_source")
  @@index([createdAt], map: "idx_invoice_lead_created")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Lease {
  id              String      @id @default(dbgenerated("gen_random_uuid()"))
  unitId          String
  tenantId        String
  startDate       DateTime
  endDate         DateTime
  rentAmount      Float
  securityDeposit Float
  terms           String?
  status          LeaseStatus @default(DRAFT)
  templateId      String?
  documentUrl     String?
  signatureStatus String      @default("UNSIGNED")
  lateFeeDays     Int?        @default(5)
  lateFeeAmount   Float?      @default(0)
  leaseTerms      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
  
  // Relations
  Document        Document[]
  Tenant          Tenant      @relation(fields: [tenantId], references: [id])
  Unit            Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  reminders       ReminderLog[] @relation("LeaseReminders")
  template        LeaseTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  
  // Enhanced lease management relations
  leaseDocuments  LeaseDocument[]
  amendments      LeaseAmendment[]
  renewalsAsOriginal LeaseRenewal[] @relation("OriginalLease")
  renewalsAsNew   LeaseRenewal[] @relation("NewLease")
  
  // Rent Payment System Relations
  rentCharges     RentCharge[]

  @@index([startDate, endDate], map: "idx_lease_dates")
  @@index([status], map: "idx_lease_status")
  @@index([tenantId], map: "idx_lease_tenant_id")
  @@index([unitId], map: "idx_lease_unit_id")
  @@index([unitId, status], map: "idx_lease_unit_status")
  @@index([templateId], map: "idx_lease_template_id")
  @@index([signatureStatus], map: "idx_lease_sig_status")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model LeaseGeneratorUsage {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  userId           String?
  email            String
  ipAddress        String?
  userAgent        String?
  usageCount       Int?      @default(0)
  paymentStatus    String?   @default("unpaid")
  stripeSessionId  String?
  stripeCustomerId String?
  amountPaid       Int?
  currency         String?
  paymentDate      DateTime? @db.Timestamptz(6)
  accessExpiresAt  DateTime? @db.Timestamptz(6)
  createdAt        DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime? @default(now()) @db.Timestamptz(6)
  User             User?     @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@index([userId])
  @@index([userId, createdAt], map: "idx_lease_generator_user_created")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MaintenanceRequest {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  unitId        String
  title         String
  description   String
  category      String?
  priority      Priority      @default(MEDIUM)
  status        RequestStatus @default(OPEN)
  preferredDate DateTime?     @db.Timestamp(6)
  allowEntry    Boolean       @default(true)
  contactPhone  String?
  requestedBy   String?
  notes         String?
  photos        String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  completedAt   DateTime?     @db.Timestamp(6)
  assignedTo    String?
  estimatedCost Float?
  actualCost    Float?
  Expense       Expense[]
  Unit          Unit          @relation(fields: [unitId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  files         File[]
  // Future: workOrder     WorkOrder?    // One-to-one relationship with work order

  @@index([createdAt], map: "idx_maintenance_created_at")
  @@index([priority], map: "idx_maintenance_priority")
  @@index([status], map: "idx_maintenance_status")
  @@index([unitId], map: "idx_maintenance_unit_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Message {
  id                            String    @id @default(dbgenerated("gen_random_uuid()"))
  threadId                      String
  senderId                      String
  receiverId                    String
  content                       String
  readAt                        DateTime? @db.Timestamp(6)
  attachmentUrl                 String?
  createdAt                     DateTime  @default(now()) @db.Timestamp(6)
  User_Message_receiverIdToUser User      @relation("Message_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_Message_senderIdToUser   User      @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@index([receiverId], map: "idx_message_receiver_id")
  @@index([senderId], map: "idx_message_sender_id")
}


/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Property {
  id           String         @id @default(dbgenerated("gen_random_uuid()"))
  name         String
  address      String
  city         String
  state        String
  zipCode      String
  description  String?
  imageUrl     String?
  ownerId      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  propertyType PropertyType   @default(SINGLE_FAMILY)
  Document     Document[]
  Expense      Expense[]
  Inspection   Inspection[]
  User         User           @relation(fields: [ownerId], references: [id])
  Unit         Unit[]
  files        File[]
  // Future: recurringSchedules RecurringMaintenanceSchedule[]
  // Rent Payment System Relations
  collectionSettings RentCollectionSettings[]
  
  // Invoice Management Relations
  invoiceLineItems PropertyInvoiceLineItem[] @relation("InvoiceLineItemProperty")

  @@index([ownerId], map: "idx_property_owner_id")
}

/// SUBSCRIPTION MODEL - Uses String fields to match database reality
/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Subscription {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  userId               String    @unique
  status               SubStatus
  startDate            DateTime  @default(now())
  endDate              DateTime?
  cancelledAt          DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @default(now())
  stripeCustomerId     String?
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  planId               String?
  planType             PlanType?
  billingPeriod        String?
  currentPeriodStart   DateTime? @db.Timestamptz(6)
  currentPeriodEnd     DateTime? @db.Timestamptz(6)
  trialStart           DateTime? @db.Timestamptz(6)
  trialEnd             DateTime? @db.Timestamptz(6)
  cancelAtPeriodEnd    Boolean?  @default(false)
  canceledAt           DateTime? @db.Timestamptz(6)
  Invoice              Invoice[]
  User                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentFailures      PaymentFailure[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Tenant {
  id               String           @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  email            String           @unique(map: "tenant_email_unique")
  phone            String?
  emergencyContact String?
  avatarUrl        String?
  userId           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
  Lease            Lease[]
  User             User?            @relation(fields: [userId], references: [id])
  paymentMethods   PaymentMethod[]
  // Rent Payment System Relations
  rentCharges      RentCharge[]
  rentPayments     RentPayment[]
  collectionSettings RentCollectionSettings[]

  @@index([userId], map: "idx_tenant_user_id")
  @@index([userId], map: "idx_tenant_user_id_v2")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Unit {
  id                 String               @id @default(dbgenerated("gen_random_uuid()"))
  unitNumber         String
  propertyId         String
  bedrooms           Int                  @default(1)
  bathrooms          Float                @default(1)
  squareFeet         Int?
  rent               Float
  status             UnitStatus           @default(VACANT)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now())
  lastInspectionDate DateTime?            @db.Timestamp(6)
  Inspection         Inspection[]
  Lease              Lease[]
  MaintenanceRequest MaintenanceRequest[]
  Property           Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // Future: recurringSchedules RecurringMaintenanceSchedule[]
  // Rent Payment System Relations
  rentCharges        RentCharge[]
  collectionSettings RentCollectionSettings[]
  
  // Invoice Management Relations
  invoiceLineItems   PropertyInvoiceLineItem[] @relation("InvoiceLineItemUnit")

  @@unique([unitNumber, propertyId], map: "unit_number_per_property_unique")
  @@index([propertyId], map: "idx_unit_property_id")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                               String                @id
  supabaseId                       String                @unique
  stripeCustomerId                 String?
  email                            String                @unique
  name                             String?
  phone                            String?
  bio                              String?
  avatarUrl                        String?
  role                             UserRole              @default(OWNER)
  createdAt                        DateTime              @default(now())
  updatedAt                        DateTime              @default(now())
  
  // MFA and Security Fields
  mfaEnabled                       Boolean               @default(false)
  mfaSecret                        String?
  mfaBackupCodes                   String[]              @default([])
  mfaEnrolledAt                    DateTime?
  smsPhoneVerified                 Boolean               @default(false)
  smsBackupEnabled                 Boolean               @default(false)
  
  // Security Tracking
  lastPasswordChange               DateTime?
  failedLoginAttempts              Int                   @default(0)
  lastFailedLoginAt                DateTime?
  accountLockedAt                  DateTime?
  lockoutReason                    String?
  passwordChangeRequired           Boolean               @default(false)
  suspiciousActivityDetected       Boolean               @default(false)
  lastSuspiciousActivityAt         DateTime?
  
  BlogArticle                      BlogArticle[]
  Inspection                       Inspection[]
  Invoice                          Invoice[]
  LeaseGeneratorUsage              LeaseGeneratorUsage[]
  Message_Message_receiverIdToUser Message[]             @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[]             @relation("Message_senderIdToUser")
  Property                         Property[]
  Subscription                     Subscription[]
  Tenant                           Tenant[]
  activities                       Activity[]            @relation("UserActivities")
  reminders                        ReminderLog[]         @relation("UserReminders")
  preferences                      UserPreferences?      @relation("UserPreferences")
  sessions                         UserSession[]         @relation("UserSessions")
  featureAccess                    UserFeatureAccess?    @relation("UserFeatureAccess")
  accessLogs                       UserAccessLog[]       @relation("UserAccessLogs")
  notificationLogs                 NotificationLog[]     @relation("UserNotificationLogs")
  inAppNotifications               InAppNotification[]   @relation("UserInAppNotifications")
  uploadedFiles                    File[]
  
  // Enhanced lease management relations
  leaseTemplates                   LeaseTemplate[]       @relation("UserLeaseTemplates")
  leaseClauses                     LeaseClause[]         @relation("UserLeaseClauses")
  leaseSignatures                  LeaseSignature[]      @relation("LeaseSignatures")
  createdAmendments               LeaseAmendment[]       @relation("LeaseAmendmentCreator")
  createdRenewals                 LeaseRenewal[]         @relation("LeaseRenewalCreator")
  
  // Property Owner Invoice Management relations
  propertyOwnerInvoices           PropertyOwnerInvoice[] @relation("PropertyOwnerInvoices")
  invoiceTemplates                PropertyInvoiceTemplate[] @relation("PropertyInvoiceTemplates")
  recurringInvoiceSchedules       RecurringInvoiceSchedule[] @relation("RecurringInvoiceSchedules")
  
  // Security and MFA relations
  mfaSessions                      MfaSession[]          @relation("UserMfaSessions")
  oauthAccounts                    OAuthAccount[]        @relation("UserOAuthAccounts")
  securityEvents                   SecurityEvent[]       @relation("UserSecurityEvents")
  passwordHistory                  PasswordHistory[]     @relation("UserPasswordHistory")
}

model UserSession {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  refreshTokenId String
  expiresAt      DateTime  @db.Timestamptz(6)
  lastActivity   DateTime  @default(now()) @db.Timestamptz(6)
  userAgent      String?
  ipAddress      String?
  isActive       Boolean   @default(true)
  invalidatedAt  DateTime? @db.Timestamptz(6)
  createdAt      DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @db.Timestamptz(6)
  
  // Relations
  user           User      @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([refreshTokenId])
  @@index([expiresAt])
  @@index([isActive])
}

model SecurityAuditLog {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  eventType String
  severity  String
  userId    String?
  email     String?
  ipAddress String?
  userAgent String?
  resource  String?
  action    String?
  details   Json     @default("{}")
  timestamp DateTime @default(now()) @db.Timestamptz(6)
  
  @@index([eventType])
  @@index([severity])
  @@index([userId])
  @@index([ipAddress])
  @@index([timestamp])
  @@index([eventType, timestamp])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model wrappers_fdw_stats {
  fdw_name     String   @id
  create_times BigInt?
  rows_in      BigInt?
  rows_out     BigInt?
  bytes_in     BigInt?
  bytes_out    BigInt?
  metadata     Json?
  created_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  updated_at   DateTime @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
}

// ENUMS
// NOTE: These are the actual enums that exist in the database

enum BlogCategory {
  PROPERTY_MANAGEMENT
  LEGAL_COMPLIANCE
  FINANCIAL_MANAGEMENT
  PROPERTY_MAINTENANCE
  SOFTWARE_REVIEWS
  TENANT_RELATIONS
  MARKETING
  REAL_ESTATE_INVESTMENT
  TAX_PLANNING
  AUTOMATION
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SCHEDULED
}

enum CustomerInvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  OVERDUE
  CANCELLED
}

enum DocumentType {
  LEASE
  INVOICE
  RECEIPT
  PROPERTY_PHOTO
  INSPECTION
  MAINTENANCE
  OTHER
}


enum LeaseStatus {
  DRAFT
  PENDING_REVIEW
  PENDING_SIGNATURES
  SIGNED
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING_RENEWAL
}

enum PlanType {
  FREETRIAL
  STARTER
  GROWTH
  TENANTFLOW_MAX
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  EMERGENCY
}

enum PropertyType {
  SINGLE_FAMILY
  MULTI_UNIT
  APARTMENT
  COMMERCIAL
}

enum RequestStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELED
  ON_HOLD
}

// NOTE: Database only has SubStatus enum, not SubscriptionStatus
enum SubStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum UserRole {
  OWNER
  MANAGER
  TENANT
  ADMIN
}

// Property Owner Invoice Management Enums
enum PropertyInvoiceStatus {
  DRAFT
  SENT
  VIEWED
  PAID
  PARTIALLY_PAID
  OVERDUE
  CANCELLED
  VOID
}

enum PropertyPaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

enum RecurringFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
}

// Rent Payment System Enums

enum LateFeeType {
  FIXED
  PERCENTAGE
}

enum ActivityEntityType {
  property
  tenant
  maintenance
  payment
  lease
  unit
}

model Activity {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  action     String
  entityType ActivityEntityType
  entityId   String
  entityName String?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  User       User     @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_activity_user_id")
  @@index([entityType], map: "idx_activity_entity_type")
  @@index([entityId], map: "idx_activity_entity_id")
  @@index([createdAt], map: "idx_activity_created_at")
}

model WebhookEvent {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  stripeEventId   String   @unique
  eventType       String 
  processed       Boolean  @default(true)
  processingTime  Int?
  errorMessage    String?
  retryCount      Int      @default(0)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @db.Timestamptz(6)

  @@index([stripeEventId], map: "idx_webhook_event_stripe_id")
  @@index([eventType], map: "idx_webhook_event_type")
  @@index([processed], map: "idx_webhook_event_processed")
  @@index([createdAt], map: "idx_webhook_event_created")
}

enum ReminderType {
  RENT_REMINDER
  LEASE_EXPIRATION
  MAINTENANCE_DUE
  PAYMENT_OVERDUE
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
  OPENED
}

model ReminderLog {
  id              String         @id @default(dbgenerated("gen_random_uuid()"))
  leaseId         String?
  userId          String
  type            ReminderType
  status          ReminderStatus @default(PENDING)
  recipientEmail  String
  recipientName   String?
  subject         String?
  content         String?
  sentAt          DateTime?      @db.Timestamptz(6)
  deliveredAt     DateTime?      @db.Timestamptz(6)
  openedAt        DateTime?      @db.Timestamptz(6)
  errorMessage    String?
  retryCount      Int            @default(0)
  createdAt       DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime       @default(now()) @db.Timestamptz(6)

  // Relations
  User            User           @relation("UserReminders", fields: [userId], references: [id], onDelete: Cascade)
  Lease           Lease?         @relation("LeaseReminders", fields: [leaseId], references: [id], onDelete: SetNull)

  @@index([userId], map: "idx_reminder_log_user_id")
  @@index([leaseId], map: "idx_reminder_log_lease_id")
  @@index([type], map: "idx_reminder_log_type")
  @@index([status], map: "idx_reminder_log_status")
  @@index([sentAt], map: "idx_reminder_log_sent_at")
}

model UserPreferences {
  id                       String   @id @default(dbgenerated("gen_random_uuid()"))
  userId                   String   @unique
  enableReminders          Boolean  @default(true)
  daysBeforeDue            Int      @default(3)
  enableOverdueReminders   Boolean  @default(true)
  overdueGracePeriod       Int      @default(5)
  autoSendReminders        Boolean  @default(false)
  emailNotifications       Boolean  @default(true)
  smsNotifications         Boolean  @default(false)
  pushNotifications        Boolean  @default(true)
  defaultDashboardView     String   @default("overview")
  showWelcomeMessage       Boolean  @default(true)
  createdAt                DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  User                     User     @relation("UserPreferences", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_preferences_user_id")
}

// Subscription Feature Access Management
model UserFeatureAccess {
  id                          String   @id @default(dbgenerated("gen_random_uuid()"))
  userId                      String   @unique
  canExportData               Boolean  @default(false)
  canAccessAdvancedAnalytics  Boolean  @default(false)
  canUseBulkOperations        Boolean  @default(false)
  canAccessAPI                Boolean  @default(false)
  canInviteTeamMembers        Boolean  @default(false)
  maxProperties               Int      @default(1)
  maxUnitsPerProperty         Int      @default(5)
  maxStorageGB                Float    @default(0.1)
  hasPrioritySupport          Boolean  @default(false)
  canUsePremiumIntegrations   Boolean  @default(false)
  lastUpdated                 DateTime @default(now()) @db.Timestamptz(6)
  updateReason                String?
  createdAt                   DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  User                        User     @relation("UserFeatureAccess", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_feature_access_user_id")
}

// User Access Change Audit Log
model UserAccessLog {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  userId             String
  subscriptionStatus String
  planType           String
  reason             String
  accessGranted      Json
  timestamp          DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  User               User      @relation("UserAccessLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_user_access_log_user_id")
  @@index([timestamp], map: "idx_user_access_log_timestamp")
  @@index([reason], map: "idx_user_access_log_reason")
}

// Notification/Email Tracking
model NotificationLog {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  type           String   // TRIAL_ENDING_WARNING, PAYMENT_METHOD_REQUIRED, etc.
  subscriptionId String?
  metadata       Json     @default("{}")
  sentAt         DateTime @default(now()) @db.Timestamptz(6)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  User           User     @relation("UserNotificationLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_notification_log_user_id")
  @@index([type], map: "idx_notification_log_type")
  @@index([subscriptionId], map: "idx_notification_log_subscription_id")
  @@index([sentAt], map: "idx_notification_log_sent_at")
}

// In-app notifications for real-time notification center
model InAppNotification {
  id                   String    @id @default(dbgenerated("gen_random_uuid()"))
  userId               String
  type                 String    // RENT_DUE_REMINDER, MAINTENANCE_REQUEST_SUBMITTED, etc.
  title                String
  content              String
  priority             String    @default("normal") // low, normal, high, urgent
  isRead               Boolean   @default(false)
  readAt               DateTime? @db.Timestamptz(6)
  metadata             Json      @default("{}")
  organizationId       String?
  propertyId           String?
  tenantId             String?
  leaseId              String?
  maintenanceRequestId String?
  createdAt            DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  User                 User      @relation("UserInAppNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_in_app_notification_user_id")
  @@index([userId, isRead], map: "idx_in_app_notification_user_read")
  @@index([priority], map: "idx_in_app_notification_priority")
  @@index([createdAt], map: "idx_in_app_notification_created")
  @@index([type], map: "idx_in_app_notification_type")
}

// Failed webhook events for retry processing
model FailedWebhookEvent {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  eventId         String    @unique
  eventType       String
  payload         String    // JSON string of the original event
  signature       String
  failureReason   String
  failureCount    Int       @default(1)
  firstFailedAt   DateTime  @default(now()) @db.Timestamptz(6)
  lastRetryAt     DateTime? @db.Timestamptz(6)
  nextRetryAt     DateTime? @db.Timestamptz(6)
  createdAt       DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime  @default(now()) @db.Timestamptz(6)

  @@index([eventId], map: "idx_failed_webhook_event_id")
  @@index([eventType], map: "idx_failed_webhook_event_type")
  @@index([nextRetryAt], map: "idx_failed_webhook_next_retry")
  @@index([failureCount], map: "idx_failed_webhook_failure_count")
}

// File storage tracking (for storage limits)
model File {
  id                   String               @id @default(dbgenerated("gen_random_uuid()"))
  filename             String
  originalName         String
  mimeType             String
  size                 Int?                 // bytes
  url                  String
  uploadedById         String?
  propertyId           String?
  maintenanceRequestId String?
  createdAt            DateTime             @default(now()) @db.Timestamptz(6)

  // Relations
  UploadedBy           User?                @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  Property             Property?            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  MaintenanceRequest   MaintenanceRequest?  @relation(fields: [maintenanceRequestId], references: [id], onDelete: Cascade)

  @@index([uploadedById], map: "idx_file_uploaded_by")
  @@index([propertyId], map: "idx_file_property_id")
  @@index([maintenanceRequestId], map: "idx_file_maintenance_request_id")
  @@index([createdAt], map: "idx_file_created_at")
}

// Payment failure tracking for subscription retries
model PaymentFailure {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  subscriptionId    String
  stripeInvoiceId   String    @unique
  amount            Int       // Amount in cents
  currency          String
  attemptCount      Int       @default(1)
  errorCode         String?
  errorMessage      String?
  nextRetryAt       DateTime? @db.Timestamptz(6)
  resolved          Boolean   @default(false)
  resolvedAt        DateTime? @db.Timestamptz(6)
  finalAttempt      Boolean   @default(false)
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @db.Timestamptz(6)

  // Relations
  Subscription      Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId], map: "idx_payment_failure_subscription")
  @@index([stripeInvoiceId], map: "idx_payment_failure_invoice")
  @@index([resolved], map: "idx_payment_failure_resolved")
  @@index([nextRetryAt], map: "idx_payment_failure_next_retry")
}

// ========================================
// RENT PAYMENT SYSTEM
// ========================================

/// Payment Methods (PCI compliant via Stripe)
/// This table stores references to Stripe payment methods, not actual card data
model PaymentMethod {
  id                    String    @id @default(dbgenerated("gen_random_uuid()"))
  tenantId              String
  stripePaymentMethodId String    @unique
  type                  String    // 'card' or 'ach_debit'
  isDefault             Boolean   @default(false)
  lastFour              String?   // Last 4 digits for display
  brand                 String?   // For cards: visa, mastercard, etc. For ACH: bank name
  expiryMonth           Int?      // For cards only
  expiryYear            Int?      // For cards only
  fingerprint           String?   // Stripe fingerprint for duplicate detection
  active                Boolean   @default(true)
  createdAt             DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @db.Timestamptz(6)
  
  // Multi-tenant RLS
  organizationId        String
  
  // Relations
  tenant                Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  rentPayments          RentPayment[]
  
  @@index([tenantId], map: "idx_payment_method_tenant_id")
  @@index([organizationId], map: "idx_payment_method_organization_id")
  @@index([active], map: "idx_payment_method_active")
}

/// Rent Charges (monthly rent amounts due)
model RentCharge {
  id                    String            @id @default(dbgenerated("gen_random_uuid()"))
  leaseId               String
  tenantId              String
  unitId                String
  amount                Int               // Amount in cents
  currency              String            @default("usd")
  dueDate               DateTime          @db.Timestamptz(6)
  status                RentChargeStatus  @default(PENDING)
  lateFee               Int?              // Late fee in cents
  lateFeeAppliedAt      DateTime?         @db.Timestamptz(6)
  description           String?
  createdAt             DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime          @default(now()) @db.Timestamptz(6)
  
  // Multi-tenant RLS
  organizationId        String
  
  // Relations
  lease                 Lease             @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  tenant                Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unit                  Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade)
  payments              RentPayment[]
  
  @@index([leaseId], map: "idx_rent_charge_lease_id")
  @@index([tenantId], map: "idx_rent_charge_tenant_id")
  @@index([unitId], map: "idx_rent_charge_unit_id")
  @@index([organizationId], map: "idx_rent_charge_organization_id")
  @@index([dueDate], map: "idx_rent_charge_due_date")
  @@index([status], map: "idx_rent_charge_status")
}

/// Rent Payments (actual payment transactions)
model RentPayment {
  id                    String            @id @default(dbgenerated("gen_random_uuid()"))
  rentChargeId          String
  tenantId              String
  paymentMethodId       String?           
  stripePaymentIntentId String            @unique
  amount                Int               // Amount in cents
  currency              String            @default("usd")
  processingFee         Int               @default(0) // Processing fee in cents
  netAmount             Int               // Net amount after fees
  status                RentPaymentStatus @default(PENDING)
  paidAt                DateTime?         @db.Timestamptz(6)
  failureReason         String?
  receiptUrl            String?
  
  // Stripe metadata
  stripeChargeId        String?
  stripeReceiptUrl      String?
  
  createdAt             DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime          @default(now()) @db.Timestamptz(6)
  
  // Multi-tenant RLS
  organizationId        String
  
  // Relations
  rentCharge            RentCharge        @relation(fields: [rentChargeId], references: [id], onDelete: Cascade)
  tenant                Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  paymentMethod         PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  paymentAttempts       PaymentAttempt[]
  
  @@index([rentChargeId], map: "idx_rent_payment_charge_id")
  @@index([tenantId], map: "idx_rent_payment_tenant_id")
  @@index([paymentMethodId], map: "idx_rent_payment_method_id")
  @@index([organizationId], map: "idx_rent_payment_organization_id")
  @@index([status], map: "idx_rent_payment_status")
  @@index([paidAt], map: "idx_rent_payment_paid_at")
}

/// Collection Settings per tenant/unit
model RentCollectionSettings {
  id                    String     @id @default(dbgenerated("gen_random_uuid()"))
  tenantId              String?    // NULL for property-wide defaults
  unitId                String?    // NULL for property-wide defaults
  propertyId            String
  
  // Collection scheduling
  dueDay                Int        @default(1) // Day of month rent is due (1-31)
  gracePeriodDays       Int        @default(5) // Grace period before late fees
  
  // Late fee configuration
  lateFeeType           LateFeeType @default(FIXED)
  lateFeeAmount         Int        @default(0) // Flat fee or percentage (in basis points)
  maxLateFeeAmount      Int?       // Maximum late fee cap (for percentage type)
  
  // Payment processing
  allowedPaymentMethods String[]   @default(["card", "ach_debit"]) // Array of allowed payment types
  autoChargeEnabled     Boolean    @default(false) // Auto-charge on due date
  reminderDaysBefore    Int[]      @default([7, 3, 1]) // Days before due date to send reminders
  
  // Notification settings
  sendPaymentReminders  Boolean    @default(true)
  sendReceiptEmails     Boolean    @default(true)
  sendLateNotices       Boolean    @default(true)
  
  createdAt             DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime   @default(now()) @db.Timestamptz(6)
  
  // Multi-tenant RLS
  organizationId        String
  
  // Relations
  tenant                Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unit                  Unit?      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  property              Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, unitId, propertyId])
  @@index([propertyId], map: "idx_rent_collection_property_id")
  @@index([tenantId], map: "idx_rent_collection_tenant_id")
  @@index([unitId], map: "idx_rent_collection_unit_id")
  @@index([organizationId], map: "idx_rent_collection_organization_id")
}

/// Payment attempt tracking for retry logic
model PaymentAttempt {
  id                    String     @id @default(dbgenerated("gen_random_uuid()"))
  rentPaymentId         String
  attemptNumber         Int        // 1, 2, 3, etc.
  stripePaymentIntentId String
  status                String     // Stripe PaymentIntent status
  failureCode           String?    // Stripe failure code
  failureMessage        String?    // Human-readable failure message
  attemptedAt           DateTime   @default(now()) @db.Timestamptz(6)
  
  // Multi-tenant RLS
  organizationId        String
  
  // Relations
  rentPayment           RentPayment @relation(fields: [rentPaymentId], references: [id], onDelete: Cascade)
  
  @@index([rentPaymentId], map: "idx_payment_attempt_payment_id")
  @@index([organizationId], map: "idx_payment_attempt_organization_id")
  @@index([attemptedAt], map: "idx_payment_attempt_attempted_at")
}

// ========================================
// RENT PAYMENT ENUMS
// ========================================

enum RentChargeStatus {
  PENDING      // Rent charge created, payment not yet attempted
  PAID         // Fully paid
  PARTIAL      // Partially paid (if partial payments allowed)
  OVERDUE      // Past due date
  CANCELLED    // Charge cancelled (e.g., tenant moved out)
}

enum RentPaymentStatus {
  PENDING           // Payment initiated, processing
  SUCCEEDED         // Payment succeeded
  FAILED            // Payment failed
  CANCELLED         // Payment cancelled
  REQUIRES_ACTION   // Requires additional authentication (3D Secure)
}

// ========================================
// PROPERTY OWNER INVOICE MANAGEMENT SYSTEM
// ========================================

/// Property Owner Invoices (separate from CustomerInvoice marketing tool)
model PropertyOwnerInvoice {
  id                     String                    @id @default(dbgenerated("gen_random_uuid()"))
  invoiceNumber          String                    @unique
  status                 PropertyInvoiceStatus     @default(DRAFT)
  
  // Customer Information
  customerId             String?                   // Optional reference to tenant/property owner
  customerName           String
  customerEmail          String
  customerAddress        String?
  customerCity           String?
  customerState          String?
  customerZip            String?
  customerPhone          String?
  
  // Business Information (from template or manual)
  businessName           String
  businessAddress        String?
  businessCity           String?
  businessState          String?
  businessZip            String?
  businessPhone          String?
  businessEmail          String?
  businessLogo           String?
  businessTaxId          String?
  
  // Invoice Details
  issueDate              DateTime                  @default(now()) @db.Timestamptz(6)
  dueDate                DateTime                  @db.Timestamptz(6)
  subtotal               Decimal                   @db.Decimal(12,2) @default(0)
  taxRate                Decimal                   @db.Decimal(5,4) @default(0)
  taxAmount              Decimal                   @db.Decimal(12,2) @default(0)
  total                  Decimal                   @db.Decimal(12,2) @default(0)
  
  // Payment Information
  amountPaid             Decimal                   @db.Decimal(12,2) @default(0)
  balanceDue             Decimal                   @db.Decimal(12,2) @default(0)
  
  // Template and Content
  templateId             String?
  notes                  String?
  terms                  String?
  paymentInstructions    String?
  
  // Document Generation
  pdfUrl                 String?                   // Generated PDF URL
  pdfGeneratedAt         DateTime?                 @db.Timestamptz(6)
  
  // Email Tracking
  sentAt                 DateTime?                 @db.Timestamptz(6)
  viewedAt               DateTime?                 @db.Timestamptz(6)
  lastReminderSentAt     DateTime?                 @db.Timestamptz(6)
  reminderCount          Int                       @default(0)
  
  // Stripe Integration
  stripeInvoiceId        String?                   @unique
  stripePaymentIntentId  String?
  
  // Recurring Invoice Configuration
  recurringScheduleId    String?
  isRecurring            Boolean                   @default(false)
  
  // Multi-tenant RLS
  organizationId         String
  ownerId                String
  
  createdAt              DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                  @default(now()) @db.Timestamptz(6)
  
  // Relations
  owner                  User                      @relation("PropertyOwnerInvoices", fields: [ownerId], references: [id], onDelete: Cascade)
  template               PropertyInvoiceTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)
  lineItems              PropertyInvoiceLineItem[]
  payments               PropertyInvoicePayment[]
  recurringSchedule      RecurringInvoiceSchedule? @relation(fields: [recurringScheduleId], references: [id], onDelete: SetNull)
  
  @@index([organizationId], map: "idx_property_invoice_organization")
  @@index([ownerId], map: "idx_property_invoice_owner")
  @@index([status], map: "idx_property_invoice_status")
  @@index([dueDate], map: "idx_property_invoice_due_date")
  @@index([issueDate], map: "idx_property_invoice_issue_date")
  @@index([customerEmail], map: "idx_property_invoice_customer_email")
  @@index([invoiceNumber], map: "idx_property_invoice_number")
}

/// Invoice Line Items
model PropertyInvoiceLineItem {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()"))
  invoiceId              String
  
  // Line Item Details
  description            String
  quantity               Decimal                 @db.Decimal(10,2) @default(1)
  unitPrice              Decimal                 @db.Decimal(12,2)
  total                  Decimal                 @db.Decimal(12,2)
  
  // Tax Information
  taxable                Boolean                 @default(true)
  taxRate                Decimal?                @db.Decimal(5,4)
  taxAmount              Decimal?                @db.Decimal(12,2)
  
  // Service Details
  serviceType            String?                 // MANAGEMENT_FEE, MAINTENANCE, INSPECTION, etc.
  serviceCategory        String?
  servicePeriodStart     DateTime?               @db.Timestamptz(6)
  servicePeriodEnd       DateTime?               @db.Timestamptz(6)
  
  // Property/Unit Reference
  propertyId             String?
  unitId                 String?
  
  // Multi-tenant RLS
  organizationId         String
  
  createdAt              DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                @default(now()) @db.Timestamptz(6)
  
  // Relations
  invoice                PropertyOwnerInvoice    @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  property               Property?               @relation("InvoiceLineItemProperty", fields: [propertyId], references: [id], onDelete: SetNull)
  unit                   Unit?                   @relation("InvoiceLineItemUnit", fields: [unitId], references: [id], onDelete: SetNull)
  
  @@index([invoiceId], map: "idx_property_invoice_line_item_invoice")
  @@index([organizationId], map: "idx_property_invoice_line_item_organization")
  @@index([serviceType], map: "idx_property_invoice_line_item_service_type")
  @@index([propertyId], map: "idx_property_invoice_line_item_property")
}

/// Invoice Templates for consistent branding and layout
model PropertyInvoiceTemplate {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()"))
  name                   String
  description            String?
  
  // Template Content
  templateType           String                  @default("STANDARD") // STANDARD, MANAGEMENT_FEE, SERVICE_INVOICE
  isDefault              Boolean                 @default(false)
  isActive               Boolean                 @default(true)
  
  // Business Information Defaults
  businessName           String
  businessAddress        String?
  businessCity           String?
  businessState          String?
  businessZip            String?
  businessPhone          String?
  businessEmail          String?
  businessLogo           String?
  businessTaxId          String?
  
  // Template Settings
  defaultTerms           String?
  defaultPaymentInstructions String?
  defaultNotes           String?
  dueDays                Int                     @default(30) // Default days until due
  
  // Styling and Layout
  colorScheme            String                  @default("blue") // Color theme
  logoPosition           String                  @default("top-left")
  showTaxId              Boolean                 @default(true)
  showPaymentInstructions Boolean                @default(true)
  
  // Multi-tenant RLS  
  organizationId         String
  ownerId                String
  
  createdAt              DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                @default(now()) @db.Timestamptz(6)
  
  // Relations
  owner                  User                    @relation("PropertyInvoiceTemplates", fields: [ownerId], references: [id], onDelete: Cascade)
  invoices               PropertyOwnerInvoice[]
  recurringSchedules     RecurringInvoiceSchedule[]
  
  @@index([organizationId], map: "idx_property_invoice_template_organization")
  @@index([ownerId], map: "idx_property_invoice_template_owner")
  @@index([isDefault], map: "idx_property_invoice_template_default")
  @@index([templateType], map: "idx_property_invoice_template_type")
}

/// Payment Tracking for Property Owner Invoices
model PropertyInvoicePayment {
  id                     String                   @id @default(dbgenerated("gen_random_uuid()"))
  invoiceId              String
  
  // Payment Details
  amount                 Decimal                  @db.Decimal(12,2)
  currency               String                   @default("usd")
  paymentMethod          String                   // STRIPE, CHECK, CASH, BANK_TRANSFER
  status                 PropertyPaymentStatus    @default(PENDING)
  
  // Payment Processing
  stripePaymentIntentId  String?                  @unique
  stripeChargeId         String?
  transactionId          String?                  // External transaction ID
  
  // Payment Information
  paidAt                 DateTime?                @db.Timestamptz(6)
  failureReason          String?
  receiptUrl             String?
  
  // Customer Information
  payerName              String?
  payerEmail             String?
  
  // Multi-tenant RLS
  organizationId         String
  
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                 @default(now()) @db.Timestamptz(6)
  
  // Relations
  invoice                PropertyOwnerInvoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId], map: "idx_property_invoice_payment_invoice")
  @@index([organizationId], map: "idx_property_invoice_payment_organization")
  @@index([status], map: "idx_property_invoice_payment_status")
  @@index([paidAt], map: "idx_property_invoice_payment_paid_at")
}

/// Recurring Invoice Scheduling
model RecurringInvoiceSchedule {
  id                     String                  @id @default(dbgenerated("gen_random_uuid()"))
  
  // Schedule Configuration
  name                   String
  description            String?
  frequency              RecurringFrequency      // MONTHLY, QUARTERLY, ANNUALLY
  interval               Int                     @default(1) // Every N periods
  
  // Template and Content
  templateId             String
  isActive               Boolean                 @default(true)
  
  // Customer Information (copied to each generated invoice)
  customerName           String
  customerEmail          String
  customerAddress        String?
  customerCity           String?
  customerState          String?
  customerZip            String?
  customerPhone          String?
  
  // Schedule Timing
  startDate              DateTime                @db.Timestamptz(6)
  endDate                DateTime?               @db.Timestamptz(6) // NULL for indefinite
  nextInvoiceDate        DateTime                @db.Timestamptz(6)
  lastInvoiceDate        DateTime?               @db.Timestamptz(6)
  
  // Invoice Configuration
  dueDays                Int                     @default(30)
  autoSend               Boolean                 @default(false)
  
  // Line Items Template (JSON structure)
  lineItemsTemplate      Json                    @default("[]")
  
  // Multi-tenant RLS
  organizationId         String
  ownerId                String
  
  createdAt              DateTime                @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime                @default(now()) @db.Timestamptz(6)
  
  // Relations
  owner                  User                    @relation("RecurringInvoiceSchedules", fields: [ownerId], references: [id], onDelete: Cascade)
  template               PropertyInvoiceTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  generatedInvoices      PropertyOwnerInvoice[]
  
  @@index([organizationId], map: "idx_recurring_invoice_organization")
  @@index([ownerId], map: "idx_recurring_invoice_owner")
  @@index([isActive], map: "idx_recurring_invoice_active")
  @@index([nextInvoiceDate], map: "idx_recurring_invoice_next_date")
  @@index([frequency], map: "idx_recurring_invoice_frequency")
}

// ========================================
// ENHANCED LEASE MANAGEMENT MODELS
// ========================================

/// Lease Templates for multi-state compliance
model LeaseTemplate {
  id              String    @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  description     String?
  state           String?   // US state code for legal compliance
  type            String    @default("STANDARD") // STANDARD, COMMERCIAL, MONTH_TO_MONTH
  content         String    // HTML/Markdown template content
  variables       Json      @default("{}")  // Template variables definition
  isActive        Boolean   @default(true)
  isSystemTemplate Boolean  @default(false) // System vs custom templates
  version         Int       @default(1)
  parentTemplateId String?  // For template versioning
  ownerId         String?   // NULL for system templates
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
  
  // Relations
  parentTemplate  LeaseTemplate? @relation("TemplateVersions", fields: [parentTemplateId], references: [id], onDelete: SetNull)
  childTemplates  LeaseTemplate[] @relation("TemplateVersions")
  owner           User?      @relation("UserLeaseTemplates", fields: [ownerId], references: [id], onDelete: Cascade)
  leases          Lease[]
  clauses         LeaseTemplateClauses[]
  documents       LeaseDocument[]
  
  @@index([state], map: "idx_lease_template_state")
  @@index([type], map: "idx_lease_template_type")
  @@index([ownerId], map: "idx_lease_template_owner")
  @@index([isActive], map: "idx_lease_template_active")
}

/// Reusable lease clauses
model LeaseClause {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  title         String
  content       String
  category      String    // RENT, MAINTENANCE, PETS, UTILITIES, etc.
  state         String?   // Legal compliance by state
  isRequired    Boolean   @default(false)
  isSystemClause Boolean  @default(false)
  ownerId       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  
  // Relations
  owner         User?     @relation("UserLeaseClauses", fields: [ownerId], references: [id], onDelete: Cascade)
  templates     LeaseTemplateClauses[]
  
  @@index([category], map: "idx_lease_clause_category")
  @@index([state], map: "idx_lease_clause_state")
  @@index([ownerId], map: "idx_lease_clause_owner")
}

/// Template-Clause relationship (many-to-many)
model LeaseTemplateClauses {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  templateId    String
  clauseId      String
  order         Int       @default(0)
  isRequired    Boolean   @default(true)
  customContent String?   // Override clause content for this template
  
  // Relations
  template      LeaseTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  clause        LeaseClause   @relation(fields: [clauseId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, clauseId], name: "unique_template_clause")
}

/// Lease Document Generation and Storage
model LeaseDocument {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  leaseId           String
  templateId        String?
  documentUrl       String?   // Generated PDF URL
  status            String    @default("DRAFT") // DRAFT, GENERATED, SENT_FOR_SIGNATURE, SIGNED, CANCELLED
  version           Int       @default(1)
  generatedAt       DateTime?
  signatureProvider String?   // DOCUSIGN, HELLOSIGN, ADOBE_SIGN
  signatureEnvelopeId String? // Provider's envelope/document ID
  variables         Json      @default("{}")  // Template variables used for generation
  metadata          Json      @default("{}")  // Additional document metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  
  // Relations
  lease            Lease           @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  template         LeaseTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)
  signatures       LeaseSignature[]
  
  @@index([leaseId], map: "idx_lease_document_lease")
  @@index([status], map: "idx_lease_document_status")
  @@index([generatedAt], map: "idx_lease_document_generated")
}

/// Digital Signatures Tracking
model LeaseSignature {
  id                  String    @id @default(dbgenerated("gen_random_uuid()"))
  leaseDocumentId     String
  signerType          String    // LANDLORD, TENANT, GUARANTOR, WITNESS
  signerName          String
  signerEmail         String
  signerId            String?   // User ID if internal user
  status              String    @default("PENDING") // PENDING, SENT, VIEWED, SIGNED, DECLINED, EXPIRED
  signedAt            DateTime?
  ipAddress           String?
  userAgent           String?
  signatureImageUrl   String?
  providerSignatureId String?   // Provider's signature ID
  auditTrail          Json      @default("[]")  // Signature audit trail
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
  
  // Relations
  document            LeaseDocument @relation(fields: [leaseDocumentId], references: [id], onDelete: Cascade)
  signer              User?         @relation("LeaseSignatures", fields: [signerId], references: [id], onDelete: SetNull)
  
  @@index([leaseDocumentId], map: "idx_lease_signature_document")
  @@index([status], map: "idx_lease_signature_stat")
  @@index([signerEmail], map: "idx_lease_signature_signer")
}

/// Lease Amendments and Addendums
model LeaseAmendment {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  leaseId       String
  title         String
  description   String
  type          String    @default("AMENDMENT") // AMENDMENT, ADDENDUM, RIDER
  content       String
  effectiveDate DateTime
  status        String    @default("DRAFT") // DRAFT, PENDING_SIGNATURES, SIGNED, ACTIVE
  documentUrl   String?
  createdBy     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  
  // Relations
  lease         Lease     @relation(fields: [leaseId], references: [id], onDelete: Cascade)
  creator       User      @relation("LeaseAmendmentCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([leaseId], map: "idx_lease_amendment_lease")
  @@index([status], map: "idx_lease_amendment_status")
  @@index([effectiveDate], map: "idx_lease_amendment_effective")
}

/// Lease Renewals
model LeaseRenewal {
  id                String    @id @default(dbgenerated("gen_random_uuid()"))
  originalLeaseId   String
  newLeaseId        String?
  status            String    @default("PENDING") // PENDING, ACCEPTED, DECLINED, EXPIRED
  proposedStartDate DateTime
  proposedEndDate   DateTime
  proposedRentAmount Float
  notes             String?
  offerExpiresAt    DateTime?
  respondedAt       DateTime?
  createdBy         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  
  // Relations
  originalLease     Lease     @relation("OriginalLease", fields: [originalLeaseId], references: [id], onDelete: Cascade)
  newLease          Lease?    @relation("NewLease", fields: [newLeaseId], references: [id], onDelete: SetNull)
  creator           User      @relation("LeaseRenewalCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([originalLeaseId], map: "idx_lease_renewal_original")
  @@index([status], map: "idx_lease_renewal_status")
  @@index([offerExpiresAt], map: "idx_lease_renewal_expires")
}

// MFA and Security Models

model MfaSession {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  token     String
  type      String   // 'TOTP', 'SMS', 'RECOVERY'
  expiresAt DateTime @db.Timestamptz(6)
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations
  user      User     @relation("UserMfaSessions", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId], map: "idx_mfa_session_user_id")
  @@index([token], map: "idx_mfa_session_token")
  @@index([expiresAt], map: "idx_mfa_session_expires")
}

model OAuthAccount {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  userId        String
  provider      String   // 'google', 'github', etc.
  providerId    String   // Provider's user ID
  providerEmail String?
  providerData  Json?    // Store additional provider data
  linkedAt      DateTime @default(now()) @db.Timestamptz(6)
  lastUsedAt    DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations
  user          User     @relation("UserOAuthAccounts", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@unique([userId, provider])
  @@index([userId], map: "idx_oauth_account_user_id")
  @@index([provider], map: "idx_oauth_account_provider")
}

model SecurityEvent {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String?
  eventType String   // 'LOGIN', 'LOGOUT', 'PASSWORD_CHANGE', 'MFA_ENABLED', 'SUSPICIOUS_ACTIVITY', etc.
  severity  String   @default("INFO") // 'INFO', 'WARNING', 'ERROR', 'CRITICAL'
  ipAddress String?
  userAgent String?
  resource  String?
  action    String?
  success   Boolean  @default(true)
  metadata  Json?    // Additional event-specific data
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations
  user      User?    @relation("UserSecurityEvents", fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId], map: "idx_security_event_user_id")
  @@index([eventType], map: "idx_security_event_type")
  @@index([severity], map: "idx_security_event_severity")
  @@index([createdAt], map: "idx_security_event_created")
  @@index([ipAddress], map: "idx_security_event_ip")
}

model PasswordHistory {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  passwordHash String   // Stored as hash for security
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations
  user         User     @relation("UserPasswordHistory", fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId], map: "idx_password_history_user_id")
  @@index([createdAt], map: "idx_password_history_created")
}

model LoginAttempt {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  email         String?
  ipAddress     String
  userAgent     String?
  success       Boolean
  failureReason String?
  createdAt     DateTime @default(now()) @db.Timestamptz(6)
  
  @@index([email], map: "idx_login_attempt_email")
  @@index([ipAddress], map: "idx_login_attempt_ip")
  @@index([success], map: "idx_login_attempt_success")
  @@index([createdAt], map: "idx_login_attempt_created")
}

