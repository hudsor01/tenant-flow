import { defineConfig } from 'tsup'

export default defineConfig({
  entry: {
    'index': 'src/index.ts',
    'constants/index': 'src/constants/index.ts',
    'constants/auth': 'src/constants/auth.ts',
    'constants/leases': 'src/constants/leases.ts',
    'constants/maintenance': 'src/constants/maintenance.ts',
    'constants/properties': 'src/constants/properties.ts',
    'constants/tenants': 'src/constants/tenants.ts',
    'constants/invoices': 'src/constants/invoices.ts',
    'constants/billing': 'src/constants/billing.ts',
    'validation/index': 'src/validation/index.ts',
    'validation/common': 'src/validation/common.ts',
    'validation/leases': 'src/validation/leases.ts',
    'utils/index': 'src/utils/index.ts',
    'utils/errors': 'src/utils/errors.ts',
    'utils/billing': 'src/utils/billing.ts',
    'types/properties': 'src/types/properties.ts',
    'types/billing': 'src/types/billing.ts',
    'types/errors': 'src/types/errors.ts',
    'types/auth': 'src/types/auth.ts',
    'types/security': 'src/types/security.ts',
    'types/tenants': 'src/types/tenants.ts',
    'types/leases': 'src/types/leases.ts',
    'types/maintenance': 'src/types/maintenance.ts',
    'types/notifications': 'src/types/notifications.ts',
    'types/invoices': 'src/types/invoices.ts',
    'types/relations': 'src/types/relations.ts',
    'types/blog': 'src/types/blog.ts',
    'types/activity': 'src/types/activity.ts',
    'types/analytics': 'src/types/analytics.ts',
    'types/queries': 'src/types/queries.ts',
    'types/router': 'src/types/router.ts',
    'types/lease-generator': 'src/types/lease-generator.ts',
    'types/api-inputs': 'src/types/api-inputs.ts',
    'types/api': 'src/types/api.ts',
    'types/backend': 'src/types/backend.ts',
    'types/responses': 'src/types/responses.ts',
    'types/billing-extended': 'src/types/billing-extended.ts',
    'types/invoice-lead': 'src/types/invoice-lead.ts',
    'types/frontend-utils': 'src/types/frontend-utils.ts',
    'types/documents': 'src/types/documents.ts',
    'types/usage': 'src/types/usage.ts',
    'types/websocket': 'src/types/websocket.ts',
    'types/logger': 'src/types/logger.ts',
  },
  format: ['esm', 'cjs'],
  dts: true,
  splitting: false,
  sourcemap: true,
  clean: false,
  outDir: 'dist',
  target: 'es2022',
  skipNodeModulesBundle: true,
  treeshake: true,
  minify: false,
  bundle: true,
  external: ['@nestjs/common', 'zod'],
  esbuildOptions: (options, { format }) => {
    if (format === 'esm') {
      options.conditions = ['module']
      options.mainFields = ['module', 'main']
    }
    return options
  },
})