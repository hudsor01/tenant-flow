#!/usr/bin/env tsx

/**
 * Sync TRPC Types from Backend
 * 
 * This script synchronizes TRPC types from the built backend to avoid circular dependencies.
 * It creates standalone type stubs that avoid importing from the backend package.
 */

import { writeFileSync } from 'fs'
import { join } from 'path'

const BACKEND_TYPES_FILE = join(__dirname, '../src/backend-types.ts')
const TRPC_GENERATED_FILE = join(__dirname, '../src/trpc.generated.ts')

async function syncTRPCTypes() {
  console.log('üîÑ Syncing TRPC types from backend...')
  
  try {
    // Always use standalone type stubs to avoid circular dependencies
    console.log('‚úÖ Using standalone type stubs to avoid circular dependencies')
    generateTypeStubs()
    
    // Update trpc.generated.ts with convenience types
    generateConvenienceTypes()
    
    console.log('‚úÖ TRPC types synchronized successfully')
    console.log('‚ÑπÔ∏è  Type safety is maintained through standalone type definitions')
    console.log('‚ÑπÔ∏è  Runtime types are inferred by TRPC automatically')
  } catch (error) {
    console.error('‚ùå Failed to sync TRPC types:', error)
    // Fallback to type stubs on error
    generateTypeStubs()
  }
}

function generateTypeStubs() {
  const content = `// Backend Types Bridge  
// This file defines standalone type stubs that avoid circular dependencies
// Auto-generated by sync-trpc-types.ts - DO NOT EDIT MANUALLY
// Generated on: ${new Date().toISOString()}

import type { inferRouterInputs, inferRouterOutputs, AnyRouter } from '@trpc/server'

// Minimal AppRouter type stub that avoids circular dependencies
// TRPC will infer the actual types at runtime, this provides build-time type safety
export interface AppRouter extends AnyRouter {
  // Type stub - actual structure inferred at runtime by TRPC
}

// Re-export TRPC type utilities for easy access
export type { inferRouterInputs, inferRouterOutputs }

// Type aliases for easier use in frontend
export type RouterInputs = inferRouterInputs<AppRouter>
export type RouterOutputs = inferRouterOutputs<AppRouter>
`
  
  writeFileSync(BACKEND_TYPES_FILE, content)
}

function generateConvenienceTypes() {
  const content = `// TRPC Types Generated from Backend Router
// Auto-generated by sync-trpc-types.ts - DO NOT EDIT MANUALLY
// Generated on: ${new Date().toISOString()}

import type { AppRouter, RouterInputs, RouterOutputs } from './backend-types'

// Re-export router types for convenience
export type { AppRouter, RouterInputs, RouterOutputs }

// Type aliases for convenience and backward compatibility
export type AppRouterType = AppRouter

// Note: Specific procedure input/output types cannot be defined with type stubs
// Use RouterInputs and RouterOutputs directly with proper type indexing:
// Example: RouterInputs['properties']['add'] for property creation input
// Example: RouterOutputs['auth']['me'] for authentication output
`
  
  writeFileSync(TRPC_GENERATED_FILE, content)
}

// Run the sync if this script is called directly
if (require.main === module) {
  syncTRPCTypes()
}