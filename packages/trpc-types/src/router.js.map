{"version":3,"file":"router.js","sourceRoot":"","sources":["router.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * TRPC Router Types\n * Type-only definitions for TRPC router inference\n */\n\nimport type { \n  AuthUser, \n  Property, \n  Unit, \n  Tenant, \n  Lease, \n  MaintenanceRequest,\n  Subscription,\n  AuthenticatedContext\n} from '@tenantflow/types-core'\n\n// Type-only router structure for inference\n// This mirrors the actual router structure without implementation\nexport interface AppRouterType {\n  auth: {\n    me: {\n      query: () => Promise<AuthUser>\n    }\n    updateProfile: {\n      mutate: (input: { name?: string; phone?: string; bio?: string }) => Promise<AuthUser>\n    }\n    deleteAccount: {\n      mutate: () => Promise<{ success: boolean }>\n    }\n  }\n  \n  properties: {\n    list: {\n      query: (input?: { search?: string; page?: number; limit?: number }) => Promise<{\n        data: Property[]\n        pagination: {\n          totalCount: number\n          totalPages: number\n          currentPage: number\n          hasNextPage: boolean\n          hasPreviousPage: boolean\n        }\n      }>\n    }\n    byId: {\n      query: (input: { id: string }) => Promise<Property & { units: Unit[] }>\n    }\n    create: {\n      mutate: (input: {\n        name: string\n        address: string\n        city: string\n        state: string\n        zipCode: string\n        propertyType: string\n        description?: string\n      }) => Promise<Property>\n    }\n    update: {\n      mutate: (input: {\n        id: string\n        name?: string\n        address?: string\n        city?: string\n        state?: string\n        zipCode?: string\n        propertyType?: string\n        description?: string\n      }) => Promise<Property>\n    }\n    delete: {\n      mutate: (input: { id: string }) => Promise<{ success: boolean }>\n    }\n  }\n  \n  units: {\n    list: {\n      query: (input?: { propertyId?: string; status?: string }) => Promise<Unit[]>\n    }\n    byId: {\n      query: (input: { id: string }) => Promise<Unit & { property: Property }>\n    }\n    create: {\n      mutate: (input: {\n        propertyId: string\n        unitNumber: string\n        bedrooms: number\n        bathrooms: number\n        squareFeet?: number\n        monthlyRent: number\n        securityDeposit: number\n      }) => Promise<Unit>\n    }\n    update: {\n      mutate: (input: {\n        id: string\n        unitNumber?: string\n        bedrooms?: number\n        bathrooms?: number\n        squareFeet?: number\n        monthlyRent?: number\n        securityDeposit?: number\n        status?: string\n      }) => Promise<Unit>\n    }\n    delete: {\n      mutate: (input: { id: string }) => Promise<{ success: boolean }>\n    }\n  }\n  \n  tenants: {\n    list: {\n      query: (input?: { \n        search?: string\n        propertyId?: string\n        unitId?: string\n        isActive?: boolean\n        page?: number\n        limit?: number\n      }) => Promise<{\n        data: Tenant[]\n        pagination: {\n          totalCount: number\n          totalPages: number\n          currentPage: number\n          hasNextPage: boolean\n          hasPreviousPage: boolean\n        }\n      }>\n    }\n    byId: {\n      query: (input: { id: string }) => Promise<Tenant>\n    }\n    create: {\n      mutate: (input: {\n        name: string\n        email: string\n        phone?: string\n        emergencyContact?: string\n        unitId?: string\n        moveInDate?: Date\n      }) => Promise<Tenant>\n    }\n    update: {\n      mutate: (input: {\n        id: string\n        name?: string\n        email?: string\n        phone?: string\n        emergencyContact?: string\n        unitId?: string\n        moveInDate?: Date\n        moveOutDate?: Date\n        isActive?: boolean\n      }) => Promise<Tenant>\n    }\n    delete: {\n      mutate: (input: { id: string }) => Promise<{ success: boolean }>\n    }\n  }\n  \n  leases: {\n    list: {\n      query: (input?: { \n        propertyId?: string\n        unitId?: string\n        tenantId?: string\n        status?: string\n      }) => Promise<Lease[]>\n    }\n    byId: {\n      query: (input: { id: string }) => Promise<Lease>\n    }\n    create: {\n      mutate: (input: {\n        unitId: string\n        tenantId: string\n        startDate: Date\n        endDate: Date\n        monthlyRent: number\n        securityDeposit: number\n        terms?: string\n      }) => Promise<Lease>\n    }\n    update: {\n      mutate: (input: {\n        id: string\n        startDate?: Date\n        endDate?: Date\n        monthlyRent?: number\n        securityDeposit?: number\n        status?: string\n        terms?: string\n      }) => Promise<Lease>\n    }\n    delete: {\n      mutate: (input: { id: string }) => Promise<{ success: boolean }>\n    }\n  }\n  \n  maintenance: {\n    list: {\n      query: (input?: { \n        propertyId?: string\n        unitId?: string\n        status?: string\n        priority?: string\n      }) => Promise<MaintenanceRequest[]>\n    }\n    byId: {\n      query: (input: { id: string }) => Promise<MaintenanceRequest>\n    }\n    create: {\n      mutate: (input: {\n        unitId: string\n        title: string\n        description: string\n        priority: string\n        allowEntry: boolean\n        contactPhone?: string\n        preferredDate?: Date\n      }) => Promise<MaintenanceRequest>\n    }\n    update: {\n      mutate: (input: {\n        id: string\n        title?: string\n        description?: string\n        priority?: string\n        status?: string\n        assignedTo?: string\n        notes?: string\n        estimatedCost?: number\n        actualCost?: number\n      }) => Promise<MaintenanceRequest>\n    }\n    delete: {\n      mutate: (input: { id: string }) => Promise<{ success: boolean }>\n    }\n  }\n  \n  subscriptions: {\n    current: {\n      query: () => Promise<Subscription | null>\n    }\n    createCheckoutSession: {\n      mutate: (input: {\n        planType: string\n        billingInterval: 'monthly' | 'annual'\n        successUrl: string\n        cancelUrl: string\n      }) => Promise<{ url: string; sessionId: string }>\n    }\n    createPortalSession: {\n      mutate: (input: { returnUrl: string }) => Promise<{ url: string }>\n    }\n    cancel: {\n      mutate: () => Promise<{ success: boolean }>\n    }\n  }\n}\n\n// Export the type as AppRouter for backward compatibility\nexport type AppRouter = AppRouterType\n\n// Type helpers for inferring inputs and outputs\nexport type RouterInputs = {\n  auth: {\n    me: undefined\n    updateProfile: { name?: string; phone?: string; bio?: string }\n    deleteAccount: undefined\n  }\n  properties: {\n    list: { search?: string; page?: number; limit?: number } | undefined\n    byId: { id: string }\n    create: {\n      name: string\n      address: string\n      city: string\n      state: string\n      zipCode: string\n      propertyType: string\n      description?: string\n    }\n    update: {\n      id: string\n      name?: string\n      address?: string\n      city?: string\n      state?: string\n      zipCode?: string\n      propertyType?: string\n      description?: string\n    }\n    delete: { id: string }\n  }\n  units: {\n    list: { propertyId?: string; status?: string } | undefined\n    byId: { id: string }\n    create: {\n      propertyId: string\n      unitNumber: string\n      bedrooms: number\n      bathrooms: number\n      squareFeet?: number\n      monthlyRent: number\n      securityDeposit: number\n    }\n    update: {\n      id: string\n      unitNumber?: string\n      bedrooms?: number\n      bathrooms?: number\n      squareFeet?: number\n      monthlyRent?: number\n      securityDeposit?: number\n      status?: string\n    }\n    delete: { id: string }\n  }\n  tenants: {\n    list: { \n      search?: string\n      propertyId?: string\n      unitId?: string\n      isActive?: boolean\n      page?: number\n      limit?: number\n    } | undefined\n    byId: { id: string }\n    create: {\n      name: string\n      email: string\n      phone?: string\n      emergencyContact?: string\n      unitId?: string\n      moveInDate?: Date\n    }\n    update: {\n      id: string\n      name?: string\n      email?: string\n      phone?: string\n      emergencyContact?: string\n      unitId?: string\n      moveInDate?: Date\n      moveOutDate?: Date\n      isActive?: boolean\n    }\n    delete: { id: string }\n  }\n  leases: {\n    list: { \n      propertyId?: string\n      unitId?: string\n      tenantId?: string\n      status?: string\n    } | undefined\n    byId: { id: string }\n    create: {\n      unitId: string\n      tenantId: string\n      startDate: Date\n      endDate: Date\n      monthlyRent: number\n      securityDeposit: number\n      terms?: string\n    }\n    update: {\n      id: string\n      startDate?: Date\n      endDate?: Date\n      monthlyRent?: number\n      securityDeposit?: number\n      status?: string\n      terms?: string\n    }\n    delete: { id: string }\n  }\n  maintenance: {\n    list: { \n      propertyId?: string\n      unitId?: string\n      status?: string\n      priority?: string\n    } | undefined\n    byId: { id: string }\n    create: {\n      unitId: string\n      title: string\n      description: string\n      priority: string\n      allowEntry: boolean\n      contactPhone?: string\n      preferredDate?: Date\n    }\n    update: {\n      id: string\n      title?: string\n      description?: string\n      priority?: string\n      status?: string\n      assignedTo?: string\n      notes?: string\n      estimatedCost?: number\n      actualCost?: number\n    }\n    delete: { id: string }\n  }\n  subscriptions: {\n    current: undefined\n    createCheckoutSession: {\n      planType: string\n      billingInterval: 'monthly' | 'annual'\n      successUrl: string\n      cancelUrl: string\n    }\n    createPortalSession: { returnUrl: string }\n    cancel: undefined\n  }\n}\n\nexport type RouterOutputs = {\n  auth: {\n    me: AuthUser\n    updateProfile: AuthUser\n    deleteAccount: { success: boolean }\n  }\n  properties: {\n    list: {\n      data: Property[]\n      pagination: {\n        totalCount: number\n        totalPages: number\n        currentPage: number\n        hasNextPage: boolean\n        hasPreviousPage: boolean\n      }\n    }\n    byId: Property & { units: Unit[] }\n    create: Property\n    update: Property\n    delete: { success: boolean }\n  }\n  units: {\n    list: Unit[]\n    byId: Unit & { property: Property }\n    create: Unit\n    update: Unit\n    delete: { success: boolean }\n  }\n  tenants: {\n    list: {\n      data: Tenant[]\n      pagination: {\n        totalCount: number\n        totalPages: number\n        currentPage: number\n        hasNextPage: boolean\n        hasPreviousPage: boolean\n      }\n    }\n    byId: Tenant\n    create: Tenant\n    update: Tenant\n    delete: { success: boolean }\n  }\n  leases: {\n    list: Lease[]\n    byId: Lease\n    create: Lease\n    update: Lease\n    delete: { success: boolean }\n  }\n  maintenance: {\n    list: MaintenanceRequest[]\n    byId: MaintenanceRequest\n    create: MaintenanceRequest\n    update: MaintenanceRequest\n    delete: { success: boolean }\n  }\n  subscriptions: {\n    current: Subscription | null\n    createCheckoutSession: { url: string; sessionId: string }\n    createPortalSession: { url: string }\n    cancel: { success: boolean }\n  }\n}\n\n// Individual router type helpers\nexport type AuthInputs = RouterInputs['auth']\nexport type AuthOutputs = RouterOutputs['auth']\n\nexport type PropertiesInputs = RouterInputs['properties']\nexport type PropertiesOutputs = RouterOutputs['properties']\n\nexport type UnitsInputs = RouterInputs['units']\nexport type UnitsOutputs = RouterOutputs['units']\n\nexport type TenantsInputs = RouterInputs['tenants']\nexport type TenantsOutputs = RouterOutputs['tenants']\n\nexport type LeasesInputs = RouterInputs['leases']\nexport type LeasesOutputs = RouterOutputs['leases']\n\nexport type MaintenanceInputs = RouterInputs['maintenance']\nexport type MaintenanceOutputs = RouterOutputs['maintenance']\n\nexport type SubscriptionsInputs = RouterInputs['subscriptions']\nexport type SubscriptionsOutputs = RouterOutputs['subscriptions']\n\n// Specific output types for common use cases\nexport type PropertyListOutput = PropertiesOutputs['list']\nexport type PropertyOutput = PropertiesOutputs['byId']\nexport type SubscriptionOutput = SubscriptionsOutputs['current']"]}