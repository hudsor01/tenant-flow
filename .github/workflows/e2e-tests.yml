name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      browser:
        description: 'Browser to run tests on'
        required: false
        default: 'chromium'
        type: choice
        options:
        - chromium
        - firefox
        - webkit
        - all
      workers:
        description: 'Number of parallel workers'
        required: false
        default: '2'
        type: string

env:
  NODE_VERSION: '22'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      fail-fast: false
      matrix:
        browser: ${{ fromJSON(github.event_name == 'workflow_dispatch' && (github.event.inputs.browser == 'all' && '["chromium", "firefox", "webkit"]' || format('["{0}"]', github.event.inputs.browser)) || '["chromium"]') }}
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Setup environment variables
      run: |
        cp .env.test.example .env.test
        cp apps/backend/.env.example apps/backend/.env.test || echo "Backend .env.example not found"
        cp apps/frontend/.env.local.example apps/frontend/.env.local.test || echo "Frontend .env.example not found"
        
        # Override with CI-specific values
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> .env.test
        echo "PLAYWRIGHT_BASE_URL=http://localhost:5173" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> apps/backend/.env.test
        echo "JWT_SECRET=ci-test-jwt-secret" >> apps/backend/.env.test
        echo "JWT_REFRESH_SECRET=ci-test-refresh-secret" >> apps/backend/.env.test

    - name: Build applications
      run: |
        npm run build

    - name: Setup test database
      run: |
        cd apps/backend
        npx prisma migrate deploy
        npx prisma generate
        cd ../..

    - name: Seed test data
      run: npm run test:seed

    - name: Run E2E tests
      run: |
        WORKERS=${{ github.event.inputs.workers || '2' }}
        npx playwright test --project=${{ matrix.browser }} --workers=$WORKERS
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:5173

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: test-results/
        retention-days: 30

    - name: Upload Test Videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-videos-${{ matrix.browser }}
        path: test-results/videos/
        retention-days: 7

    - name: Upload Test Screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-screenshots-${{ matrix.browser }}
        path: test-results/screenshots/
        retention-days: 7

    - name: Cleanup test data
      if: always()
      run: npm run test:cleanup

  publish-report:
    # Publish combined test report
    if: always()
    needs: e2e-tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Merge Playwright reports
      run: |
        npx playwright merge-reports --reporter html artifacts/playwright-report-*/
        
    - name: Publish HTML Report
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./playwright-report
        destination_dir: e2e-reports/${{ github.run_number }}

    - name: Comment PR with Report Link
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '📊 E2E Test Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/e2e-reports/${{ github.run_number }}'
          })

  notify-results:
    if: always()
    needs: e2e-tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Determine overall result
      id: result
      run: |
        if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ All E2E tests passed!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ E2E tests failed. Check the report for details." >> $GITHUB_OUTPUT
        fi

    - name: Post to Slack
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.result.outputs.status }}
        text: ${{ steps.result.outputs.message }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}