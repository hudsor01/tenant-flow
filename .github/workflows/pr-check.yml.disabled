name: PR Check (Optimized)

on:
  pull_request:
    branches: 
      - main
    types: 
      - opened
      - synchronize
      - reopened
      - ready_for_review

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

# Global environment variables
env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  FORCE_COLOR: 3
  NODE_VERSION: '20'
  CI: true

jobs:
  # Detect which parts of the codebase changed
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    # Always run on non-draft PRs
    if: github.event.pull_request.draft != true
    outputs:
      frontend: ${{ steps.set-changes.outputs.frontend }}
      backend: ${{ steps.set-changes.outputs.backend }}
      database: ${{ steps.set-changes.outputs.database }}
      shared: ${{ steps.set-changes.outputs.shared }}
      any-change: ${{ steps.set-changes.outputs.any-change }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          # Set initial values to ensure outputs are always defined
          initial-fetch-depth: 0
          # Token with repo scope for better performance (optional)
          token: ${{ github.token }}
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'packages/tailwind-config/**'
            backend:
              - 'apps/backend/**'
            database:
              - 'packages/database/**'
              - 'prisma/**'
            shared:
              - 'packages/shared/**'
            changes:
              - '**/*.ts'
              - '**/*.tsx'
              - '**/*.js'
              - '**/*.jsx'
              - '**/*.json'
              - '**/*.yml'
              - '**/*.yaml'

      - name: Set job outputs
        id: set-changes
        run: |
          echo "frontend=${{ steps.filter.outputs.frontend }}" >> $GITHUB_OUTPUT
          echo "backend=${{ steps.filter.outputs.backend }}" >> $GITHUB_OUTPUT
          echo "database=${{ steps.filter.outputs.database }}" >> $GITHUB_OUTPUT
          echo "shared=${{ steps.filter.outputs.shared }}" >> $GITHUB_OUTPUT
          echo "any-change=${{ steps.filter.outputs.changes }}" >> $GITHUB_OUTPUT
  # Lint all code
  lint-code:
    name: Lint Code
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.any-change == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            ~/.npm
          key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            deps-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --fund=false

      - name: Run linter
        run: |
          # Get changed files
          CHANGED=$(git diff --name-only --diff-filter=ACMR origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || true)
          
          if [ -n "$CHANGED" ]; then
            echo "Linting changed files..."
            echo "$CHANGED" | xargs npx eslint --cache --no-warn-ignored || true
          else
            echo "No files to lint"
          fi

  # Type check all packages
  typecheck-all:
    name: Type Check
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.any-change == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/*/dist
            packages/database/src/generated
            .turbo
          key: typecheck-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/tsconfig.json') }}
          restore-keys: |
            typecheck-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --fund=false

      - name: Generate Prisma Client
        run: npx turbo run generate --filter=@repo/database

      - name: Build dependencies
        run: npx turbo run build --filter=@repo/shared --filter=@repo/database

      - name: Type check all packages
        run: npx turbo run typecheck

  # Build frontend if changed
  build-frontend:
    name: Build Frontend
    needs: [detect-changes, typecheck-all]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.frontend == 'true' || 
      needs.detect-changes.outputs.shared == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            apps/frontend/.next
            .turbo
          key: build-frontend-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            build-frontend-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --fund=false

      - name: Build frontend
        run: |
          NODE_ENV=development npx turbo run build --filter=@repo/frontend
        timeout-minutes: 10

  # Build backend if changed
  build-backend:
    name: Build Backend
    needs: [detect-changes, typecheck-all]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.backend == 'true' || 
      needs.detect-changes.outputs.shared == 'true' ||
      needs.detect-changes.outputs.database == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            apps/backend/dist
            .turbo
          key: build-backend-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            build-backend-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --fund=false

      - name: Build backend
        run: npx turbo run build --filter=@repo/backend
        timeout-minutes: 10

  # Test frontend if changed
  test-frontend:
    name: Test Frontend
    needs: detect-changes
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.frontend == 'true' || 
      needs.detect-changes.outputs.shared == 'true'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: test-frontend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            test-frontend-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --fund=false

      - name: Run frontend tests
        run: |
          cd apps/frontend
          npm run test:unit -- --passWithNoTests || true

  # Test backend if changed
  test-backend:
    name: Test Backend
    needs: detect-changes
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.backend == 'true' || 
      needs.detect-changes.outputs.shared == 'true' ||
      needs.detect-changes.outputs.database == 'true'
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache test dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            packages/database/src/generated
          key: test-backend-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            test-backend-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --fund=false

      - name: Generate Prisma Client
        run: npx turbo run generate --filter=@repo/database

      - name: Run backend tests
        run: |
          cd apps/backend
          npm run test:unit -- --passWithNoTests || true

  # Final status check for branch protection
  pr-status:
    name: PR Status Check
    needs: 
      - detect-changes
      - lint-code
      - typecheck-all
      - build-frontend
      - build-backend
      - test-frontend
      - test-backend
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Evaluate PR Status
        run: |
          echo "================================================"
          echo "         PR Check Summary                      "
          echo "================================================"
          echo ""
          
          # Track overall status
          STATUS="success"
          
          # Check required jobs
          echo "🔍 Required Checks:"
          echo "-------------------"
          
          # Lint check
          LINT_RESULT="${{ needs.lint-code.result }}"
          if [ "$LINT_RESULT" = "failure" ]; then
            echo "❌ Lint: Failed"
            STATUS="failure"
          elif [ "$LINT_RESULT" = "skipped" ]; then
            echo "⏭️  Lint: Skipped (no code changes)"
          else
            echo "✅ Lint: Passed"
          fi
          
          # Type check
          TYPE_RESULT="${{ needs.typecheck-all.result }}"
          if [ "$TYPE_RESULT" = "failure" ]; then
            echo "❌ Type Check: Failed"
            STATUS="failure"
          elif [ "$TYPE_RESULT" = "skipped" ]; then
            echo "⏭️  Type Check: Skipped (no code changes)"
          else
            echo "✅ Type Check: Passed"
          fi
          
          # Frontend build
          FE_BUILD="${{ needs.build-frontend.result }}"
          if [ "$FE_BUILD" = "failure" ]; then
            echo "❌ Frontend Build: Failed"
            STATUS="failure"
          elif [ "$FE_BUILD" = "skipped" ]; then
            echo "⏭️  Frontend Build: Skipped (no frontend changes)"
          else
            echo "✅ Frontend Build: Passed"
          fi
          
          # Backend build
          BE_BUILD="${{ needs.build-backend.result }}"
          if [ "$BE_BUILD" = "failure" ]; then
            echo "❌ Backend Build: Failed"
            STATUS="failure"
          elif [ "$BE_BUILD" = "skipped" ]; then
            echo "⏭️  Backend Build: Skipped (no backend changes)"
          else
            echo "✅ Backend Build: Passed"
          fi
          
          echo ""
          echo "📝 Optional Checks (Non-blocking):"
          echo "-----------------------------------"
          
          # Frontend tests
          FE_TEST="${{ needs.test-frontend.result }}"
          if [ "$FE_TEST" = "failure" ]; then
            echo "⚠️  Frontend Tests: Failed (non-blocking)"
          elif [ "$FE_TEST" = "skipped" ]; then
            echo "⏭️  Frontend Tests: Skipped"
          else
            echo "✅ Frontend Tests: Passed"
          fi
          
          # Backend tests
          BE_TEST="${{ needs.test-backend.result }}"
          if [ "$BE_TEST" = "failure" ]; then
            echo "⚠️  Backend Tests: Failed (non-blocking)"
          elif [ "$BE_TEST" = "skipped" ]; then
            echo "⏭️  Backend Tests: Skipped"
          else
            echo "✅ Backend Tests: Passed"
          fi
          
          echo ""
          echo "================================================"
          
          if [ "$STATUS" = "failure" ]; then
            echo "❌ PR checks failed - please fix issues above"
            exit 1
          else
            echo "✅ All required PR checks passed!"
            echo ""
            echo "📌 Note: Security scanning runs separately"
            echo "📌 Check GitHub Security tab for details"
          fi
