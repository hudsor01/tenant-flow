name: CI Pipeline

on:
  push:
    branches: ["main", "develop", "staging", "refactor/*", "feature/*", "fix/*"]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

env:
  NODE_VERSION: '22.x'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_CACHE: 'remote:rw'
  TURBO_RUN_SUMMARY: true
  # Memory optimization for Node.js builds
  NODE_OPTIONS: '--max-old-space-size=4096'

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Analyze what changed to determine what to build/test
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      shared: ${{ steps.filter.outputs.shared }}
      root: ${{ steps.filter.outputs.root }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'packages/tailwind-config/**'
            backend:
              - 'apps/backend/**'
              - 'Dockerfile'
            shared:
              - 'packages/shared/**'
              - 'packages/typescript-config/**'
            root:
              - 'package.json'
              - 'package-lock.json'
              - 'turbo.json'
              - '.github/workflows/**'

  # Quick validation - runs in parallel
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Validate package-lock
        run: npm ci --dry-run

  # Main build and test job - only runs what changed
  build-and-test:
    name: Build & Test
    needs: [changes, validate]
    if: needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' || needs.changes.outputs.shared == 'true' || needs.changes.outputs.root == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    # No local services needed - using Supabase cloud database
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Single cache for all node_modules
      - name: Cache node_modules
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      
      # Cache Turbo
      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      
      # Cache Prisma client
      - name: Cache Prisma
        if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.shared == 'true'
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            node_modules/@prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('**/prisma/schema.prisma') }}
      
      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --progress=false
      
      - name: Generate Prisma Client
        if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.shared == 'true'
        run: cd apps/backend && npm run generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      # Build shared package first if anything depends on it
      - name: Build Shared Package
        if: needs.changes.outputs.shared == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true'
        run: npx turbo run build --filter=@tenantflow/shared --cache-dir=.turbo
      
      # Build and test only what changed
      - name: Build and Test Changed Packages
        run: |
          FILTER=""
          if [[ "${{ needs.changes.outputs.frontend }}" == "true" ]]; then
            FILTER="--filter=@tenantflow/frontend..."
          fi
          if [[ "${{ needs.changes.outputs.backend }}" == "true" ]]; then
            FILTER="${FILTER} --filter=@tenantflow/backend..."
          fi
          if [[ "${{ needs.changes.outputs.shared }}" == "true" ]]; then
            FILTER="${FILTER} --filter=@tenantflow/shared..."
          fi
          if [[ "${{ needs.changes.outputs.root }}" == "true" ]] || [[ -z "$FILTER" ]]; then
            FILTER=""  # Build everything if root changed or nothing specific
          fi
          
          npx turbo run build lint typecheck test:unit $FILTER \
            --cache-dir=.turbo \
            --concurrency=100% \
            --output-logs=full
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL || 'http://localhost:4600/api/v1' }}
          VITE_BACKEND_URL: ${{ vars.VITE_BACKEND_URL || 'http://localhost:4600' }}
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY }}
      
      # Check frontend bundle size if frontend changed
      - name: Check Frontend Bundle Size
        if: needs.changes.outputs.frontend == 'true'
        run: |
          if [ -d "apps/frontend/dist" ]; then
            DIST_SIZE_KB=$(du -sk apps/frontend/dist | cut -f1)
            echo "📦 Frontend bundle size: $(du -sh apps/frontend/dist | cut -f1)"
            if [ $DIST_SIZE_KB -gt 20480 ]; then
              echo "❌ Bundle size exceeds 20MB limit!"
              exit 1
            fi
          fi
      
      # Critical Docker build validation - matches production exactly
      - name: Test Docker Build (Production Simulation)
        if: needs.changes.outputs.backend == 'true'
        run: |
          echo "🐳 Building Docker image with exact production configuration..."
          
          # Build with same args as Railway deployment
          docker build -t backend-test . \
            --build-arg NODE_ENV=production \
            --build-arg NODE_OPTIONS="--max-old-space-size=4096"
          
          echo "✅ Docker build successful"

  # E2E smoke tests - DISABLED (always fails, needs fixing)
  # e2e-smoke:
  #   name: E2E Smoke Tests
  #   needs: [build-and-test, changes]
  #   if: |
  #     (github.event_name == 'pull_request' || github.ref == 'refs/heads/main') &&
  #     (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true')
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #     
  #     - name: Cache Playwright
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cache/ms-playwright
  #         key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
  #     
  #     - name: Install dependencies
  #       run: npm ci --prefer-offline --no-audit --progress=false
  #     
  #     - name: Install Playwright
  #       run: npx playwright install chromium --with-deps
  #     
  #     - name: Run E2E smoke tests
  #       run: npm run test:e2e -- --grep @smoke
  #       env:
  #         CI: true
  #         PLAYWRIGHT_WORKERS: 2

  # Final status check
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [changes, validate, build-and-test]
    if: always()
    steps:
      - name: Check status
        run: |
          # If no changes detected, that's fine
          if [[ "${{ needs.changes.outputs.frontend }}" != "true" && "${{ needs.changes.outputs.backend }}" != "true" && "${{ needs.changes.outputs.shared }}" != "true" && "${{ needs.changes.outputs.root }}" != "true" ]]; then
            echo "✅ No relevant changes detected - CI passed!"
            exit 0
          fi
          
          # Check if build failed
          if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
            echo "❌ Build or tests failed"
            exit 1
          fi
          
          echo "✅ CI passed!"
          
          # Create summary
          echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Changes Detected:" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ needs.changes.outputs.frontend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ needs.changes.outputs.backend }}" >> $GITHUB_STEP_SUMMARY
          echo "- Shared: ${{ needs.changes.outputs.shared }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- Build & Test: ${{ needs.build-and-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Smoke: DISABLED (needs fixing)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total time: ~2-3 minutes** 🎉" >> $GITHUB_STEP_SUMMARY
