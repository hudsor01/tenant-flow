name: CI/CD Pipeline

on:
    push:
        branches: [main, develop, 'feature/**']
    pull_request:
        branches: [main]
        types: [opened, synchronize, reopened]

# Cancel in-progress runs for the same branch
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

env:
    NODE_VERSION: '22'
    TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
    TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
    # Quick checks that can fail fast
    quick-checks:
        name: Quick Checks
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 2 # Minimal depth for changed files

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.npm
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                  key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      deps-${{ runner.os }}-

            - name: Install dependencies
              run: npm ci --prefer-offline --no-audit --omit=optional || npm install --prefer-offline --no-audit

            - name: Lint check
              run: npm run lint

            - name: Type check
              run: npm run typecheck

    # Build job - only if quick checks pass
    build:
        name: Build
        needs: quick-checks
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'

            - name: Restore dependency cache
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.npm
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                  key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      deps-${{ runner.os }}-

            - name: Install dependencies
              run: npm ci --prefer-offline --no-audit --omit=optional || npm install --prefer-offline --no-audit

            - name: Generate Prisma Client
              run: npm run db:generate

            - name: Build packages
              run: |
                  npm run build:shared
                  npm run build:database

            - name: Build Backend
              run: npm run build:backend
              env:
                  NODE_OPTIONS: '--max-old-space-size=4096'

            - name: Build Frontend
              run: npm run build:frontend
              env:
                  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
                  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder' }}
                  NEXT_PUBLIC_API_BASE_URL: ${{ secrets.NEXT_PUBLIC_API_BASE_URL || 'https://api.placeholder.com' }}
                  NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || 'pk_test_placeholder' }}

            - name: Cache build artifacts
              uses: actions/cache@v4
              with:
                  path: |
                      apps/backend/dist
                      apps/frontend/.next
                      packages/*/dist
                  key: build-${{ runner.os }}-${{ github.sha }}

    # Test job - runs in parallel with build
    test:
        name: Test
        needs: quick-checks
        runs-on: ubuntu-latest
        timeout-minutes: 10
        services:
            postgres:
                image: postgres:16
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: tenantflow_test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - uses: actions/checkout@v4

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: 'npm'

            - name: Restore dependency cache
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.npm
                      node_modules
                      apps/*/node_modules
                      packages/*/node_modules
                  key: deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      deps-${{ runner.os }}-

            - name: Install dependencies
              run: npm ci --prefer-offline --no-audit --omit=optional || npm install --prefer-offline --no-audit

            - name: Generate Prisma Client
              run: npm run db:generate

            - name: Run tests
              run: npm run test:unit
              env:
                  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_test
                  NODE_ENV: test

    # Docker build test - only on main/develop branches
    docker-test:
        name: Docker Build Test
        needs: [build, test]
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        runs-on: ubuntu-latest
        timeout-minutes: 20
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile.fixed
                  push: false
                  tags: tenantflow-backend:test
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      NODE_ENV=production

            - name: Test Docker image
              run: |
                  docker run --rm -d \
                    --name test-backend \
                    -p 3001:3001 \
                    -e PORT=3001 \
                    -e NODE_ENV=production \
                    -e DATABASE_URL="${{ secrets.DATABASE_URL || 'postgresql://test:test@localhost:5432/test' }}" \
                    -e SUPABASE_URL="${{ secrets.SUPABASE_URL || 'https://test.supabase.co' }}" \
                    -e SUPABASE_ANON_KEY="${{ secrets.SUPABASE_ANON_KEY || 'test' }}" \
                    -e SUPABASE_SERVICE_ROLE_KEY="${{ secrets.SUPABASE_SERVICE_ROLE_KEY || 'test' }}" \
                    -e SUPABASE_JWT_SECRET="${{ secrets.SUPABASE_JWT_SECRET || 'test' }}" \
                    tenantflow-backend:test

                  # Wait for container to be healthy
                  sleep 10

                  # Check health endpoint
                  curl -f http://localhost:3001/health || (docker logs test-backend && exit 1)

                  # Clean up
                  docker stop test-backend

    # Deployment readiness check
    deployment-ready:
        name: Deployment Ready
        needs: [build, test]
        if: github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - uses: actions/checkout@v4

            - name: Check deployment conditions
              run: |
                  echo "‚úÖ All checks passed"
                  echo "üì¶ Build successful"
                  echo "‚úÖ Tests passed"
                  echo "üê≥ Docker build successful"
                  echo ""
                  echo "Ready for deployment to:"
                  echo "- Frontend: Vercel (auto-deploy on merge)"
                  echo "- Backend: Railway (auto-deploy on merge)"

    # Optional: notify on failure
    notify-failure:
        name: Notify Failure
        needs: [quick-checks, build, test]
        if: failure() && github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        steps:
            - name: Notify failure
              run: |
                  echo "‚ùå CI/CD Pipeline failed on main branch"
                  echo "Branch: ${{ github.ref }}"
                  echo "Commit: ${{ github.sha }}"
                  echo "Author: ${{ github.actor }}"
