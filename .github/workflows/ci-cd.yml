name: CI/CD Pipeline

# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  NODE_VERSION: '22'

jobs:
  build-and-test:
    # Run on push to main, pull requests, or manual dispatch
    if: >-
      ${{ github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    concurrency:
      group: ci-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Resolve Doppler config from repo variables (fallbacks)
        env:
          SECRET_DOPPLER_CONFIG: ${{ secrets.DOPPLER_CONFIG }}
          SECRET_DOPPLER_ENVIRONMENT: ${{ secrets.DOPPLER_ENVIRONMENT }}
          SECRET_DOPPLER_PERSONAL_TOKEN: ${{ secrets.DOPPLER_PERSONAL_TOKEN }}
          SECRET_DOPPLER_PROJECT: ${{ secrets.DOPPLER_PROJECT }}
          VARS_DOPPLER_CONFIG: ${{ vars.DOPPLER_CONFIG }}
          VARS_DOPPLER_ENVIRONMENT: ${{ vars.DOPPLER_ENVIRONMENT }}
          VARS_DOPPLER_PERSONAL_TOKEN: ${{ vars.DOPPLER_PERSONAL_TOKEN }}
          VARS_DOPPLER_PROJECT: ${{ vars.DOPPLER_PROJECT }}
        run: |
          echo "DOPPLER_PERSONAL_TOKEN=${SECRET_DOPPLER_PERSONAL_TOKEN:-$VARS_DOPPLER_PERSONAL_TOKEN}" >> $GITHUB_ENV
          echo "DOPPLER_PROJECT=${SECRET_DOPPLER_PROJECT:-$VARS_DOPPLER_PROJECT}" >> $GITHUB_ENV
          echo "DOPPLER_CONFIG=${SECRET_DOPPLER_CONFIG:-$VARS_DOPPLER_CONFIG}" >> $GITHUB_ENV
          echo "DOPPLER_ENVIRONMENT=${SECRET_DOPPLER_ENVIRONMENT:-$VARS_DOPPLER_ENVIRONMENT}" >> $GITHUB_ENV

      - name: Authenticate with Doppler (service or personal token)
        run: |
          if [ -n "${DOPPLER_TOKEN}" ]; then
            echo "Using Doppler service token via DOPPLER_TOKEN"
          elif [ -n "${DOPPLER_PERSONAL_TOKEN}" ]; then
            echo "Logging into Doppler with personal token"
            doppler login --token "${DOPPLER_PERSONAL_TOKEN}" --silent
          else
            echo "Doppler Error: you must provide a token" 1>&2
            echo "Set 'DOPPLER_TOKEN' or 'DOPPLER_PERSONAL_TOKEN' in GitHub Actions secrets or variables" 1>&2
            exit 1
          fi

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Build all packages (with proper dependencies and secrets)
        run: npm run build

      - name: Verify build outputs exist
        run: |
          echo "Checking shared package build outputs..."
          ls -la packages/shared/dist/cjs/ || echo "ERROR: Shared package dist not found"
          ls -la apps/backend/dist/ || echo "ERROR: Backend dist not found"
          echo "SUCCESS: Build verification complete"

      - name: Run tests
        continue-on-error: true
        env:
          CI: true
        run: npm run test:unit

      - name: Lint check
        continue-on-error: true
        run: npm run lint

  deploy-backend:
    name: Deploy Backend (Railway)
    needs: build-and-test
    # Deploy on main or when manually dispatched
    if: >-
      ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Ensure RAILWAY_TOKEN is set
        # runtime check: secrets are injected into env here
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          if [ -z "${RAILWAY_TOKEN}" ]; then
            echo "Skipping deploy: RAILWAY_TOKEN secret is not set" 1>&2
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm i -g @railway/cli@3

      - name: Deploy via Railway (Dockerfile + railway.toml)
        run: railway up --yes --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
