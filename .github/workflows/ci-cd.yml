name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, 'feature/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '24'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Validation job - runs first
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate package.json
        run: |
          echo "Checking package.json structure..."
          node -e "
          const pkg = require('./package.json');
          if (!pkg.workspaces) throw new Error('Missing workspaces');
          if (!pkg.scripts.build) throw new Error('Missing build script');
          console.log('✅ package.json valid');
          "
      
      - name: Validate Docker configuration
        run: |
          echo "Checking Dockerfile..."
          if ! grep -q "npm ci\|npm install" Dockerfile; then
            echo "❌ Dockerfile should use 'npm ci' or 'npm install' for builds"
            exit 1
          fi
          echo "✅ Dockerfile valid"
      
      - name: Validate Vercel configuration
        run: |
          echo "Checking vercel.json..."
          if [ -f "vercel.json" ]; then
            node -e "
            const config = require('./vercel.json');
            if (!config.installCommand?.includes('npm install') && !config.installCommand?.includes('npm ci')) {
              throw new Error('vercel.json should use npm install or npm ci');
            }
            console.log('✅ vercel.json valid');
            "
          fi

  # Build and test job
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        node-version: [22, 24]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-
      
      - name: Install dependencies (enforced no optional)
        env:
          NPM_CONFIG_OPTIONAL: "false"
        run: npm ci --prefer-offline --no-audit --omit=optional
      
      - name: Build shared packages
        run: |
          npm run build:database
          npm run build:shared
      
      - name: Run linting
        run: npm run lint
        continue-on-error: true
      
      - name: Run type checking
        run: npm run typecheck
        continue-on-error: true
      
      - name: Build frontend
        run: npm run build:frontend
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder' }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'https://api.placeholder.com' }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL || 'https://placeholder.com' }}
      
      - name: Build backend
        run: npm run build:backend
      
      - name: Run unit tests
        run: npm run test:unit
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: |
            apps/frontend/.next
            apps/backend/dist
            packages/shared/dist
          retention-days: 1

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: tenantflow:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: builder

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true
      
      - name: Check for secrets
        run: |
          # Check for hardcoded secrets
          if grep -r "sk_live\|pk_live\|SUPABASE_SERVICE" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" .; then
            echo "❌ Found potential hardcoded secrets!"
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

  # Deployment readiness check
  deploy-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [build-test, docker-build, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check Vercel readiness
        run: |
          echo "✅ Ready for Vercel deployment"
          echo "Build command: npm run build:shared && npx turbo run build --filter=@repo/frontend"
          echo "Install command: npm ci --prefer-offline --no-audit"
      
      - name: Check Railway readiness
        run: |
          echo "✅ Ready for Railway deployment"
          echo "Dockerfile: Uses npm ci for deterministic builds"
          echo "Health check: /health/ping with 60s timeout"
      
      - name: Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Status" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend build successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend build successful" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker build successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Targets" >> $GITHUB_STEP_SUMMARY
          echo "- **Vercel**: Frontend ready for deployment" >> $GITHUB_STEP_SUMMARY
          echo "- **Railway**: Backend ready for deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Trigger deployment manually or wait for auto-deploy" >> $GITHUB_STEP_SUMMARY