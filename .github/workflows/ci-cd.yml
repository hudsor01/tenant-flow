name: CI/CD
on: [pull_request, push]
env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Configure pnpm store
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Doppler CLI
        run: |
          # Download and install Doppler CLI binary directly
          wget -q https://github.com/DopplerHQ/cli/releases/latest/download/doppler_linux_amd64.tar.gz
          tar -xzf doppler_linux_amd64.tar.gz
          sudo mv doppler /usr/local/bin/doppler
          chmod +x /usr/local/bin/doppler

      - name: Run lint, typecheck, and build in parallel
        env:
          BACKEND_SCHEMAS_DIR: ./supabase/schema-exports
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        run: |
          # Run lint, typecheck, and build in parallel to save time
          pnpm lint &
          LINT_PID=$!
          pnpm typecheck &
          TYPECHECK_PID=$!
          pnpm build:ci &
          BUILD_PID=$!

          # Wait for all jobs and capture exit codes
          LINT_EXIT=0
          TYPECHECK_EXIT=0
          BUILD_EXIT=0

          wait $LINT_PID || LINT_EXIT=$?
          wait $TYPECHECK_PID || TYPECHECK_EXIT=$?
          wait $BUILD_PID || BUILD_EXIT=$?

          # Report any failures
          if [ $LINT_EXIT -ne 0 ]; then
            echo "❌ Lint failed with exit code $LINT_EXIT"
          fi
          if [ $TYPECHECK_EXIT -ne 0 ]; then
            echo "❌ Typecheck failed with exit code $TYPECHECK_EXIT"
          fi
          if [ $BUILD_EXIT -ne 0 ]; then
            echo "❌ Build failed with exit code $BUILD_EXIT"
          fi

          # Exit if any job failed
          if [ $LINT_EXIT -ne 0 ] || [ $TYPECHECK_EXIT -ne 0 ] || [ $BUILD_EXIT -ne 0 ]; then
            exit 1
          fi

      - name: Run unit tests
        run: pnpm test:unit

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: '**/pnpm-lock.yaml'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Railway CLI
        run: npm install -g @railway/cli@3

      - name: Deploy to Railway
        run: |
          if [ -z "$RAILWAY_PROJECT_ID" ]; then
            echo "Error: RAILWAY_PROJECT_ID secret is required"
            exit 1
          fi
          railway up --service tenantflow-backend
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}
