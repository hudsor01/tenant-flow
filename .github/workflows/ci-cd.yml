# TenantFlow CI/CD Pipeline
# Simplified: Focus on code quality and build verification
# Deployments handled by Vercel (frontend) and Railway (backend) auto-deploy

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  # ============================================================
  # SECURITY CHECK
  # ============================================================
  security:
    name: üîí Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: GitGuardian scan
        uses: GitGuardian/ggshield-action@v1
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: scan ci
          
      - name: Check for hardcoded secrets
        run: |
          # Quick check for common secret patterns
          if grep -r --include="*.ts" --include="*.tsx" --include="*.js" \
             -E "(sk_live|pk_live|supabase_service_role)" \
             --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=dist .; then
            echo "‚ùå Found potential hardcoded secrets!"
            exit 1
          fi

  # ============================================================
  # CODE QUALITY
  # ============================================================
  quality:
    name: üé® Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=optional

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: |
          npm run build:shared
          npm run typecheck

  # ============================================================
  # BUILD VERIFICATION
  # ============================================================
  build:
    name: üì¶ Build Check
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=optional

      - name: Build all packages
        run: npm run build
        env:
          # Minimal env vars needed for build
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}

      - name: Verify build outputs
        run: |
          if [ ! -d "apps/frontend/.next" ]; then
            echo "‚ùå Frontend build failed"
            exit 1
          fi
          if [ ! -d "apps/backend/dist" ]; then
            echo "‚ùå Backend build failed"
            exit 1
          fi
          echo "‚úÖ All builds successful"

  # ============================================================
  # TESTS (Optional - run if tests exist)
  # ============================================================
  test:
    name: üß™ Tests
    runs-on: ubuntu-latest
    needs: quality
    continue-on-error: true # Don't block on test failures for now
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --include=optional

      - name: Run tests
        run: npm run test || echo "Tests not configured yet"

  # ============================================================
  # STATUS CHECK
  # ============================================================
  status:
    name: ‚úÖ CI Status
    runs-on: ubuntu-latest
    needs: [security, quality, build]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.security.result }}" == "failure" ] || \
             [ "${{ needs.quality.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ]; then
            echo "‚ùå CI checks failed"
            exit 1
          fi
          echo "‚úÖ All CI checks passed!"