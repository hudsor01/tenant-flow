name: Frontend CI/CD - Deploy to Vercel

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'packages/shared/**'
      - '.github/workflows/frontend-deploy.yml'
      - 'package*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/frontend/**'
      - 'packages/shared/**'

  # Manual deployment trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

# Cancel previous runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  # Build cache optimization
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Pre-deployment validation
  validate:
    name: Validate Build Environment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
      is_production: ${{ steps.checks.outputs.is_production }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # For change detection
          
      - name: Environment validation
        id: checks
        run: |
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "is_production=${{ github.ref == 'refs/heads/main' }}" >> $GITHUB_OUTPUT
          
          # Validate required secrets for production
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            if [[ -z "${{ secrets.VERCEL_TOKEN }}" ]]; then
              echo "‚ùå VERCEL_TOKEN required for production deployment"
              exit 1
            fi
            if [[ -z "${{ secrets.VERCEL_ORG_ID }}" ]]; then
              echo "‚ùå VERCEL_ORG_ID required for production deployment"
              exit 1
            fi
            if [[ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]]; then
              echo "‚ùå VERCEL_PROJECT_ID required for production deployment"
              exit 1
            fi
          fi

  # Build and test pipeline
  build-and-test:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate
    if: needs.validate.outputs.should_deploy == 'true'
    
    strategy:
      matrix:
        node-version: [20]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better caching
          
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/frontend/package-lock.json
            
      - name: Cache dependencies and build outputs
        uses: actions/cache@v4
        id: cache-deps
        with:
          path: |
            ~/.npm
            node_modules
            apps/frontend/node_modules
            apps/frontend/.next/cache
            packages/*/node_modules
            packages/*/dist
            .turbo
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('packages/*/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-deps-
            
      - name: Install dependencies
        run: |
          if [ "${{ steps.cache-deps.outputs.cache-hit }}" != "true" ]; then
            echo "üîß Installing dependencies (cache miss)..."
            npm ci --prefer-offline --no-audit --fund=false
          else
            echo "‚úÖ Using cached dependencies"
            # Still need to ensure scripts run
            npm run postinstall || true
          fi
        timeout-minutes: 5
        
      - name: Build shared packages
        env:
          # Environment variables for build process
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
        run: |
          echo "üîß Building shared packages..."
          # Generate Prisma client first
          npx turbo run generate --filter=@repo/database
          # Build packages in dependency order
          npx turbo run build --filter=@repo/database --filter=@repo/shared
          echo "‚úÖ Shared packages built"
        timeout-minutes: 4
        
      - name: Lint frontend code
        working-directory: apps/frontend
        run: npm run lint
        timeout-minutes: 3
        
      - name: Type checking
        run: npx turbo run typecheck --filter=@repo/frontend
        timeout-minutes: 3
        
      - name: Build frontend application
        working-directory: apps/frontend
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Vercel build environment variables
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          # Fix edge runtime warning by providing app URL
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL || 'https://tenantflow.app' }}
        run: |
          echo "üîß Building frontend application..."
          npm run build
          echo "‚úÖ Frontend build completed"
          # Check build output
          if [ -d ".next" ]; then
            echo "üìä Build size analysis:"
            du -sh .next/static/chunks/* 2>/dev/null | sort -hr | head -5 || echo "No chunk analysis available"
          fi
        timeout-minutes: 10
        
      - name: Bundle analysis
        working-directory: apps/frontend
        run: |
          if [ -f "package.json" ] && grep -q "build:analyze" package.json; then
            npm run build:analyze || echo "Bundle analysis not available"
          fi
        continue-on-error: true
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.node-version }}
          path: |
            apps/frontend/.next/
            apps/frontend/out/
          retention-days: 1
          
  # Performance and security validation
  validate-performance:
    name: Performance & Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate, build-and-test]
    if: needs.validate.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-20
          path: apps/frontend/
        continue-on-error: true
          
      - name: Security audit
        working-directory: apps/frontend
        run: |
          npm audit --audit-level=high --production || echo "Security audit completed with warnings"
        continue-on-error: true
        
      - name: Bundle size check
        working-directory: apps/frontend
        run: |
          if [ -d ".next" ]; then
            echo "üì¶ Build output analysis:"
            du -sh .next/static/chunks/* | sort -hr | head -10 || echo "No chunk analysis available"
            
            # Check for oversized chunks
            find .next/static/chunks -name "*.js" -size +1M -exec echo "‚ö†Ô∏è Large bundle found: {} $(du -h {} | cut -f1)" \;
          fi
        
  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate, build-and-test, validate-performance]
    if: |
      needs.validate.outputs.should_deploy == 'true' && 
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      (github.event.inputs.force_deploy == 'true' || success())
      
    environment:
      name: ${{ needs.validate.outputs.is_production == 'true' && 'production' || 'preview' }}
      url: ${{ steps.deploy.outputs.deployment_url }}
      
    outputs:
      deployment_url: ${{ steps.deploy.outputs.deployment_url }}
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
        
      - name: Pull Vercel environment
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: apps/frontend
        run: |
          echo "üîß Pulling Vercel environment configuration..."
          vercel pull --yes --environment=${{ needs.validate.outputs.is_production == 'true' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "‚úÖ Vercel environment loaded"
          
      - name: Build for Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: apps/frontend
        run: |
          echo "üîß Building project for Vercel deployment..."
          vercel build ${{ needs.validate.outputs.is_production == 'true' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "‚úÖ Vercel build completed"
          
      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: apps/frontend
        run: |
          echo "üöÄ Deploying to Vercel..."
          if [ "${{ needs.validate.outputs.is_production }}" == "true" ]; then
            echo "Deploying to production..."
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          else
            echo "Deploying preview..."
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          fi
          
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "deployment_id=$(echo $DEPLOYMENT_URL | grep -oE '[a-z0-9-]+\.vercel\.app' | head -1)" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to: $DEPLOYMENT_URL"

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate, deploy]
    if: needs.deploy.outputs.deployment_url != ''
    
    steps:
      - name: Health check
        run: |
          DEPLOYMENT_URL="${{ needs.deploy.outputs.deployment_url }}"
          
          echo "üè• Running health checks on $DEPLOYMENT_URL"
          
          # Basic health check
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" --max-time 30)
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ùå Health check failed: HTTP $HTTP_STATUS"
            exit 1
          fi
          
          echo "‚úÖ Basic health check passed"
          
          # Check critical pages
          CRITICAL_PAGES=("/" "/login" "/signup" "/dashboard")
          
          for page in "${CRITICAL_PAGES[@]}"; do
            PAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL$page" --max-time 15)
            if [ "$PAGE_STATUS" == "200" ]; then
              echo "‚úÖ $page - OK"
            else
              echo "‚ö†Ô∏è $page - HTTP $PAGE_STATUS"
            fi
          done
          
      - name: Performance smoke test
        run: |
          echo "‚ö° Running basic performance checks..."
          
          # Response time check
          RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "${{ needs.deploy.outputs.deployment_url }}" --max-time 30)
          
          echo "üìä Response time: ${RESPONSE_TIME}s"
          
          # Check if response time is acceptable (< 3 seconds)
          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "‚ö†Ô∏è Slow response time detected"
          else
            echo "‚úÖ Response time acceptable"
          fi

  # Rollback mechanism (manual trigger only)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: failure() && github.event_name == 'workflow_dispatch' && github.event.inputs.force_deploy != 'true'
    needs: [validate-deployment]
    
    steps:
      - name: Rollback notification
        run: |
          echo "üîÑ Deployment validation failed. Consider manual rollback if needed."
          echo "To rollback: vercel rollback <deployment-url> --token=<token>"

  # Notification and monitoring
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate, deploy, validate-deployment]
    if: always() && needs.deploy.result != 'skipped'
    
    steps:
      - name: Deployment summary
        run: |
          echo "üéØ Deployment Summary"
          echo "===================="
          echo "Environment: ${{ needs.validate.outputs.is_production == 'true' && 'Production' || 'Preview' }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "Status: ‚úÖ Successful"
            echo "URL: ${{ needs.deploy.outputs.deployment_url }}"
          else
            echo "Status: ‚ùå Failed"
          fi
          
          if [ "${{ needs.validate-deployment.result }}" == "success" ]; then
            echo "Validation: ‚úÖ Passed"
          else
            echo "Validation: ‚ö†Ô∏è Issues detected"
          fi
