name: SEO Monitor & Auto-Update

# DISABLED: SEO scripts don't exist in package.json
# TODO: Add seo:generate and seo:verify scripts or remove this workflow entirely
on:
    workflow_dispatch:
        inputs:
            enable_workflow:
                description: 'Enable this workflow (currently disabled)'
                required: false
                default: false
                type: boolean

jobs:
    seo-update:
        runs-on: ubuntu-latest
        name: Update SEO Files
        if: inputs.enable_workflow == 'true'

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.npm
                      node_modules
                      apps/*/node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Install dependencies
              run: npm ci

            - name: Check if routes changed
              id: check_routes
              run: |
                  # Check if this is the first run or if routes/pages changed
                  if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    echo "force_generate=true" >> $GITHUB_OUTPUT
                    echo "üîÑ Scheduled/manual run - forcing generation"
                  elif git diff HEAD~1 --name-only | grep -E "(routes|pages|components/seo)" > /dev/null 2>&1; then
                    echo "routes_changed=true" >> $GITHUB_OUTPUT
                    echo "üÜï Route changes detected - will regenerate"
                  else
                    echo "routes_changed=false" >> $GITHUB_OUTPUT
                    echo "‚ÑπÔ∏è No route changes - may skip generation"
                  fi

            - name: Generate and verify SEO files
              id: generate_seo
              run: |
                  echo "üó∫Ô∏è Generating SEO files..."
                  # SEO generation scripts don't exist in package.json - skipping
                  echo "‚ö†Ô∏è SEO generation scripts not found in package.json"
                  echo "TODO: Add seo:generate and seo:verify scripts or remove this workflow"

                  # Count URLs in sitemap
                  URL_COUNT=$(grep -c '<url>' public/sitemap.xml || echo "0")
                  echo "url_count=$URL_COUNT" >> $GITHUB_OUTPUT

                  # Get file sizes for monitoring
                  SITEMAP_SIZE=$(stat -c%s public/sitemap.xml 2>/dev/null || stat -f%z public/sitemap.xml 2>/dev/null || echo "0")
                  ROBOTS_SIZE=$(stat -c%s public/robots.txt 2>/dev/null || stat -f%z public/robots.txt 2>/dev/null || echo "0")

                  echo "sitemap_size=$SITEMAP_SIZE" >> $GITHUB_OUTPUT
                  echo "robots_size=$ROBOTS_SIZE" >> $GITHUB_OUTPUT

                  echo "üìä SEO File Stats:"
                  echo "   Sitemap: $URL_COUNT URLs, ${SITEMAP_SIZE} bytes"
                  echo "   Robots.txt: ${ROBOTS_SIZE} bytes"

            - name: Validate sitemap URLs
              id: validate_sitemap
              run: |
                  echo "üîç Validating sitemap structure and URLs..."
                  
                  # Check XML structure
                  if xmllint --noout public/sitemap.xml 2>/dev/null; then
                    echo "‚úÖ Sitemap XML is valid"
                  else
                    echo "‚ùå Sitemap XML validation failed"
                    exit 1
                  fi
                  
                  # Extract and validate URLs
                  URLS=$(grep -o '<loc>[^<]*</loc>' public/sitemap.xml | sed 's/<[^>]*>//g')
                  INVALID_COUNT=0
                  
                  echo "üÜóÔ∏è Checking URL patterns..."
                  while IFS= read -r url; do
                    # Check for common issues
                    if [[ ! "$url" =~ ^https?:// ]]; then
                      echo "‚ö†Ô∏è Invalid URL protocol: $url"
                      INVALID_COUNT=$((INVALID_COUNT + 1))
                    fi
                    if [[ "$url" =~ [[:space:]] ]]; then
                      echo "‚ö†Ô∏è URL contains spaces: $url"
                      INVALID_COUNT=$((INVALID_COUNT + 1))
                    fi
                  done <<< "$URLS"
                  
                  echo "validation_errors=$INVALID_COUNT" >> $GITHUB_OUTPUT
                  
                  if [ $INVALID_COUNT -gt 0 ]; then
                    echo "‚ùå Found $INVALID_COUNT invalid URLs"
                    exit 1
                  else
                    echo "‚úÖ All URLs are valid"
                  fi

            - name: Run Lighthouse CI
              id: lighthouse
              if: steps.check_routes.outputs.routes_changed == 'true' || steps.check_routes.outputs.force_generate == 'true'
              continue-on-error: true
              run: |
                  echo "üèÉ Running Lighthouse performance checks..."
                  
                  # Install Lighthouse CI
                  npm install -g @lhci/cli@0.12.x
                  
                  # Run Lighthouse on key pages
                  lhci autorun \
                    --collect.urls=https://tenantflow.app \
                    --collect.urls=https://tenantflow.app/features \
                    --collect.urls=https://tenantflow.app/pricing \
                    --assert.preset=lighthouse:no-pwa \
                    --assert.assertions.categories:performance=off \
                    --assert.assertions.categories:accessibility=error \
                    --assert.assertions.categories:best-practices=warn \
                    --assert.assertions.categories:seo=error \
                    --upload.target=temporary-public-storage || true
                  
                  echo "lighthouse_run=completed" >> $GITHUB_OUTPUT

            - name: Check for changes
              id: check_changes
              run: |
                  if git diff --quiet HEAD -- public/sitemap*.xml public/robots.txt; then
                    echo "changes=false" >> $GITHUB_OUTPUT
                    echo "üìÑ No SEO file changes detected"
                  else
                    echo "changes=true" >> $GITHUB_OUTPUT
                    echo "‚ú® SEO file changes detected:"
                    git diff --name-only HEAD -- public/sitemap*.xml public/robots.txt
                    echo ""
                    echo "üîç Detailed changes:"
                    git diff HEAD -- public/sitemap*.xml public/robots.txt
                  fi

            - name: Commit SEO updates
              if: steps.check_changes.outputs.changes == 'true'
              run: |
                  git config --local user.email "action@github.com" 
                  git config --local user.name "SEO Bot"

                  git add public/sitemap*.xml public/robots.txt

                  COMMIT_MSG="üó∫Ô∏è Auto-update SEO files: ${{ steps.generate_seo.outputs.url_count }} URLs in sitemap"

                  # Add more context to commit message based on trigger
                  if [ "${{ github.event_name }}" = "schedule" ]; then
                    COMMIT_MSG="$COMMIT_MSG (scheduled update)"
                  elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    COMMIT_MSG="$COMMIT_MSG (manual trigger)"
                  else
                    COMMIT_MSG="$COMMIT_MSG (code changes)"
                  fi

                  git commit -m "$COMMIT_MSG [skip ci]"
                  git push

            - name: Notify search engines
              if: steps.check_changes.outputs.changes == 'true' && (github.event_name != 'workflow_dispatch' || inputs.notify_search_engines == 'true')
              run: |
                  SITE_URL="https://tenantflow.app"  # Replace with your actual production URL

                  echo "üîç Notifying search engines about sitemap updates..."
                  echo "   Site URL: $SITE_URL"
                  echo "   Sitemap: $SITE_URL/sitemap.xml"

                  # Ping Google
                  GOOGLE_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null "https://www.google.com/ping?sitemap=${SITE_URL}/sitemap.xml" || echo "000")
                  if [ "$GOOGLE_RESPONSE" = "200" ]; then
                    echo "‚úÖ Google notified successfully"
                  else
                    echo "‚ö†Ô∏è Google notification failed (HTTP $GOOGLE_RESPONSE)"
                  fi

                  # Ping Bing  
                  BING_RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null "https://www.bing.com/ping?sitemap=${SITE_URL}/sitemap.xml" || echo "000")
                  if [ "$BING_RESPONSE" = "200" ]; then
                    echo "‚úÖ Bing notified successfully"
                  else
                    echo "‚ö†Ô∏è Bing notification failed (HTTP $BING_RESPONSE)"
                  fi

            - name: Create summary
              if: always()
              run: |
                  echo "## üó∫Ô∏è SEO Update Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **URLs in sitemap**: ${{ steps.generate_seo.outputs.url_count }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Sitemap size**: ${{ steps.generate_seo.outputs.sitemap_size }} bytes" >> $GITHUB_STEP_SUMMARY
                  echo "- **Robots.txt size**: ${{ steps.generate_seo.outputs.robots_size }} bytes" >> $GITHUB_STEP_SUMMARY
                  echo "- **Changes detected**: ${{ steps.check_changes.outputs.changes }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

                  if [ "${{ steps.check_changes.outputs.changes }}" = "true" ]; then
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "### ‚úÖ Actions Completed" >> $GITHUB_STEP_SUMMARY
                    echo "- SEO files updated and committed" >> $GITHUB_STEP_SUMMARY
                    echo "- Search engines notified" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "### ‚ÑπÔ∏è No Updates Needed" >> $GITHUB_STEP_SUMMARY
                    echo "- SEO files are already up to date" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ steps.validate_sitemap.outputs.validation_errors }}" = "0" ]; then
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "### üîç Validation Results" >> $GITHUB_STEP_SUMMARY
                    echo "- ‚úÖ All sitemap URLs are valid" >> $GITHUB_STEP_SUMMARY
                  fi
                  
                  if [ "${{ steps.lighthouse.outputs.lighthouse_run }}" = "completed" ]; then
                    echo "" >> $GITHUB_STEP_SUMMARY
                    echo "### üèÉ Performance Check" >> $GITHUB_STEP_SUMMARY
                    echo "- Lighthouse CI analysis completed" >> $GITHUB_STEP_SUMMARY
                    echo "- Results available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
                  fi
