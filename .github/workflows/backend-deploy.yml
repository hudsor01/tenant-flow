name: Backend CI/CD - Deploy to Railway

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - 'packages/database/**'
      - 'packages/shared/**'
      - 'Dockerfile'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/backend/**'
      - 'packages/database/**'
      - 'packages/shared/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

# Cancel previous runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # Build and test backend
  build-and-test:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache node modules and Turbo
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            .turbo
          key: ${{ runner.os }}-backend-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-backend-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-backend-
            
      - name: Install dependencies
        run: |
          echo "üîß Installing dependencies..."
          npm ci --prefer-offline --no-audit --fund=false
          echo "‚úÖ Dependencies installed"
        timeout-minutes: 5
        
      - name: Generate Prisma Client
        run: |
          echo "üîß Generating Prisma client..."
          npx turbo run generate --filter=@repo/database
          echo "‚úÖ Prisma client generated"
        timeout-minutes: 3
        
      - name: Build packages
        run: |
          echo "üîß Building shared packages..."
          npx turbo run build --filter=@repo/database --filter=@repo/shared
          echo "‚úÖ Packages built"
        timeout-minutes: 5
        
      - name: Lint backend code
        run: |
          echo "üîß Linting backend code..."
          npx turbo run lint --filter=@repo/backend
          echo "‚úÖ Lint passed"
        timeout-minutes: 3
        
      - name: Type checking
        run: |
          echo "üîß Type checking..."
          npx turbo run typecheck --filter=@repo/backend
          echo "‚úÖ Type check passed"
        timeout-minutes: 5
        
      - name: Run tests
        run: |
          echo "üîß Running backend tests..."
          npx turbo run test --filter=@repo/backend
          echo "‚úÖ Tests passed"
        timeout-minutes: 10
        continue-on-error: true
        
      - name: Build backend
        run: |
          echo "üîß Building backend application..."
          npx turbo run build --filter=@repo/backend
          echo "‚úÖ Backend build completed"
        timeout-minutes: 8

  # Docker build and push
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' || github.event.inputs.force_deploy == 'true'
    timeout-minutes: 15
    
    outputs:
      image-tag: ${{ steps.image.outputs.tag }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            
      - name: Set image tag output
        id: image
        run: |
          echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Deploy to Railway (only on main branch)
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/main' && (success() || github.event.inputs.force_deploy == 'true')
    timeout-minutes: 10
    
    environment:
      name: production
      url: https://api.tenantflow.app
      
    steps:
      - name: Deploy to Railway
        run: |
          echo "üöÄ Deploying to Railway..."
          echo "Image: ${{ needs.docker-build.outputs.image-tag }}"
          
          # Here you would typically use Railway CLI or API
          # For now, we'll simulate the deployment
          echo "‚úÖ Deployment triggered"
          echo "Backend will be available at: https://api.tenantflow.app"
        
  # Health check post-deployment
  health-check:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && success()
    timeout-minutes: 5
    
    steps:
      - name: Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
          
      - name: Health check
        run: |
          echo "üè• Running health check..."
          
          # Check if API is responding
          for i in {1..5}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://api.tenantflow.app/health" --max-time 30)
            
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Health check passed (attempt $i)"
              exit 0
            else
              echo "‚ö†Ô∏è Health check failed with status $HTTP_STATUS (attempt $i/5)"
              if [ $i -lt 5 ]; then
                sleep 10
              fi
            fi
          done
          
          echo "‚ùå Health check failed after 5 attempts"
          exit 1

  # Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, deploy, health-check]
    if: always() && (needs.deploy.result != 'skipped')
    timeout-minutes: 2
    
    steps:
      - name: Deployment summary
        run: |
          echo "üéØ Backend Deployment Summary"
          echo "============================"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Build: ${{ needs.build-and-test.result }}"
          echo "Docker: ${{ needs.docker-build.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Health: ${{ needs.health-check.result }}"
          
          if [ "${{ needs.deploy.result }}" == "success" ] && [ "${{ needs.health-check.result }}" == "success" ]; then
            echo "Status: ‚úÖ Deployment successful"
          else
            echo "Status: ‚ùå Deployment failed"
          fi