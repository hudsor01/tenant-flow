name: Test Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '22'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:unit

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        directory: coverage/
        flags: unit-tests

  integration-tests:
    name: Integration Tests  
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        cd apps/backend
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test npx prisma migrate deploy
        npx prisma generate
        cd ../..

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_test

  e2e-smoke-tests:
    name: E2E Smoke Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install chromium

    - name: Setup environment
      run: |
        cp .env.test.example .env.test
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> apps/backend/.env.test

    - name: Build and setup
      run: |
        npm run build
        cd apps/backend && npx prisma migrate deploy && cd ../..
        npm run test:seed

    - name: Run smoke tests
      run: npx playwright test --project=chromium --grep="@smoke"

    - name: Cleanup
      if: always()
      run: npm run test:cleanup

  cross-browser-tests:
    name: Cross-Browser Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install ${{ matrix.browser }}

    - name: Setup environment
      run: |
        cp .env.test.example .env.test
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> .env.test

    - name: Build and setup
      run: |
        npm run build
        cd apps/backend && DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test npx prisma migrate deploy && cd ../..
        npm run test:seed

    - name: Run E2E tests
      run: npx playwright test --project=${{ matrix.browser }}

    - name: Upload results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: test-results/

  mobile-tests:
    name: Mobile Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install

    - name: Setup environment
      run: |
        cp .env.test.example .env.test
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> .env.test

    - name: Build and setup
      run: |
        npm run build
        cd apps/backend && DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test npx prisma migrate deploy && cd ../..
        npm run test:seed

    - name: Run mobile tests
      run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install chromium

    - name: Setup environment
      run: |
        cp .env.test.example .env.test
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> .env.test

    - name: Build and setup
      run: |
        npm run build
        cd apps/backend && DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test npx prisma migrate deploy && cd ../..
        npm run test:seed

    - name: Run accessibility tests
      run: npx playwright test --grep="@accessibility"

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install chromium

    - name: Setup environment
      run: |
        cp .env.test.example .env.test
        echo "TEST_DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test" >> .env.test

    - name: Build and setup
      run: |
        npm run build
        cd apps/backend && DATABASE_URL=postgresql://postgres:postgres@localhost:5432/tenantflow_test npx prisma migrate deploy && cd ../..
        npm run test:seed

    - name: Run performance tests
      run: npx playwright test --grep="@performance"

    - name: Generate Lighthouse reports
      run: |
        npm install -g @lhci/cli
        lhci autorun

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-smoke-tests]
    if: always()
    
    steps:
    - name: Test Summary
      uses: actions/github-script@v7
      with:
        script: |
          const { context, github } = require('@actions/github');
          
          const results = {
            'Unit Tests': '${{ needs.unit-tests.result }}',
            'Integration Tests': '${{ needs.integration-tests.result }}', 
            'E2E Smoke Tests': '${{ needs.e2e-smoke-tests.result }}'
          };
          
          let summary = '## üß™ Test Results Summary\n\n';
          
          for (const [name, result] of Object.entries(results)) {
            const emoji = result === 'success' ? '‚úÖ' : result === 'failure' ? '‚ùå' : '‚è≠Ô∏è';
            summary += `${emoji} **${name}**: ${result}\n`;
          }
          
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
          
          console.log(summary);