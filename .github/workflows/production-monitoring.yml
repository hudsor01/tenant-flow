name: Production Monitoring

on:
  # Run every 15 minutes
  schedule:
    - cron: '*/15 * * * *'

  # Allow manual trigger
  workflow_dispatch:

  # Run on push to monitor changes
  push:
    branches:
      - main
    paths:
      - 'apps/e2e-tests/tests/production/**'
      - '.github/workflows/production-monitoring.yml'

jobs:
  production-health:
    name: Production Health Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        working-directory: apps/e2e-tests

      - name: Run production monitoring tests
        run: pnpm test:prod
        working-directory: apps/e2e-tests
        env:
          NEXT_PUBLIC_APP_URL: https://tenantflow.app
          NEXT_PUBLIC_API_BASE_URL: https://api.tenantflow.app

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-monitoring-results
          path: |
            apps/e2e-tests/test-results/
            apps/e2e-tests/playwright-report/
          retention-days: 7

  # Create GitHub Issue on failure
  create-issue-on-failure:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    needs: production-health
    if: failure()

    steps:
      - name: Create GitHub Issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'ðŸš¨ Production Monitoring Alert';
            const body = `Production health checks failed at ${new Date().toISOString()}.

            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Details:**
            - Check the [test results artifact](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details
            - Review the production monitoring tests in \`apps/e2e-tests/tests/production/\`

            **Next Steps:**
            1. Investigate the failure cause
            2. Check production logs (Vercel + Railway)
            3. Verify third-party services (Supabase, Stripe)
            4. Fix the issue and deploy

            This issue was automatically created by the production monitoring workflow.`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['production', 'monitoring', 'automated']
            });
