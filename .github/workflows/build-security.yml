name: Build Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

jobs:
  frontend-build-security:
    name: Frontend Build Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build --filter=@tenantflow/frontend
        env:
          NODE_ENV: production
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'https://dummy.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'dummy-anon-key' }}
          VITE_API_URL: ${{ secrets.VITE_API_URL || 'https://api.dummy.com' }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.VITE_STRIPE_PUBLISHABLE_KEY || 'pk_test_dummy' }}

      - name: Check for source maps
        run: |
          echo "Checking for source maps in production build..."
          
          if find apps/frontend/dist -name "*.map" 2>/dev/null | grep -q .; then
            echo "❌ Source maps found in production build!"
            echo "Source maps expose your source code and should not be deployed to production."
            find apps/frontend/dist -name "*.map" -ls
            exit 1
          fi
          
          echo "✅ No source maps in production build"

      - name: Check bundle sizes
        run: |
          echo "Checking bundle sizes..."
          
          # Find all JS files and check sizes
          large_files=$(find apps/frontend/dist -name "*.js" -size +500k 2>/dev/null || true)
          
          if [ -n "$large_files" ]; then
            echo "⚠️  Large JavaScript files detected (>500KB):"
            echo "$large_files" | while read file; do
              size=$(du -h "$file" | cut -f1)
              echo "  - $file: $size"
            done
            echo "Consider code splitting or lazy loading."
          fi
          
          # Check total bundle size
          total_size=$(du -sh apps/frontend/dist | cut -f1)
          echo "Total build size: $total_size"
          
          echo "✅ Bundle size check complete"

      - name: Check for exposed environment variables
        run: |
          echo "Checking for exposed environment variables..."
          
          # List of sensitive patterns that should never appear in frontend
          sensitive_patterns=(
            "SUPABASE_SERVICE_ROLE"
            "DATABASE_URL"
            "JWT_SECRET"
            "STRIPE_SECRET"
            "RAILWAY_TOKEN"
            "VERCEL_TOKEN"
            "_SECRET"
            "_PRIVATE"
            "password"
            "sk_live"
            "sk_test"
          )
          
          found=0
          for pattern in "${sensitive_patterns[@]}"; do
            if grep -r -i "$pattern" apps/frontend/dist 2>/dev/null | grep -q .; then
              echo "❌ Found sensitive pattern in build: $pattern"
              found=1
            fi
          done
          
          if [ $found -eq 1 ]; then
            echo "❌ Sensitive information found in frontend build!"
            exit 1
          fi
          
          echo "✅ No sensitive environment variables exposed"

      - name: Check for debug code
        run: |
          echo "Checking for debug code in build..."
          
          # Check for console statements
          if find apps/frontend/dist -name "*.js" -not -name "*.min.js" -exec grep -l "console\." {} \; 2>/dev/null | grep -q .; then
            echo "⚠️  Console statements found in production build"
          fi
          
          # Check for debugger statements
          if find apps/frontend/dist -name "*.js" -exec grep -l "debugger" {} \; 2>/dev/null | grep -q .; then
            echo "❌ Debugger statements found in production build!"
            exit 1
          fi
          
          echo "✅ Debug code check complete"

  backend-build-security:
    name: Backend Build Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: cd apps/backend && npx prisma generate
        env:
          DATABASE_URL: postgresql://dummy:dummy@localhost:5432/dummy
          DIRECT_URL: postgresql://dummy:dummy@localhost:5432/dummy

      - name: Build backend
        run: npm run build --filter=@tenantflow/backend
        env:
          NODE_ENV: production

      - name: Check for source maps
        run: |
          echo "Checking for source maps in backend build..."
          
          if find apps/backend/dist -name "*.map" 2>/dev/null | grep -q .; then
            echo "⚠️  Source maps found in backend build"
            echo "Consider disabling source maps for production"
          fi
          
          echo "✅ Source map check complete"

      - name: Check error messages
        run: |
          echo "Checking error messages in build..."
          
          # Check for stack traces in error responses
          if find apps/backend/dist -name "*.js" -not -name "*test*" -not -name "*spec*" -exec grep -l "\.stack" {} \; 2>/dev/null | grep -q .; then
            echo "⚠️  Stack trace references found - ensure they're not exposed to clients"
          fi
          
          # Check for detailed error messages
          if find apps/backend/dist -name "*.js" -exec grep -l "Error:.*at.*\.js:" {} \; 2>/dev/null | grep -q .; then
            echo "⚠️  Detailed error messages found - ensure proper error filtering"
          fi
          
          echo "✅ Error message check complete"

      - name: Check production dependencies
        run: |
          echo "Checking production dependencies..."
          
          cd apps/backend
          
          # Get production dependencies
          prod_deps=$(npm ls --prod --depth=0 2>/dev/null | grep -E "^\+|^\`" | wc -l)
          all_deps=$(npm ls --depth=0 2>/dev/null | grep -E "^\+|^\`" | wc -l)
          
          echo "Production dependencies: $prod_deps"
          echo "Total dependencies: $all_deps"
          
          # Check for common dev dependencies in production
          dev_packages=(
            "nodemon"
            "ts-node"
            "typescript"
            "@types/"
            "eslint"
            "prettier"
            "jest"
            "vitest"
          )
          
          for pkg in "${dev_packages[@]}"; do
            if npm ls --prod 2>&1 | grep -q "$pkg"; then
              echo "⚠️  Dev package $pkg found in production dependencies"
            fi
          done
          
          cd ../..
          echo "✅ Production dependency check complete"

  docker-security:
    name: Docker Security (if applicable)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Dockerfile
        run: |
          if [ -f "Dockerfile" ] || find . -name "Dockerfile" -not -path "./node_modules/*" 2>/dev/null | grep -q .; then
            echo "Dockerfile found - running security checks..."
            
            # Check for root user
            if grep -q "USER root" Dockerfile* 2>/dev/null; then
              echo "⚠️  Running as root user in Docker"
            fi
            
            # Check for exposed secrets
            if grep -q "ENV.*SECRET\|ARG.*SECRET" Dockerfile* 2>/dev/null; then
              echo "❌ Secrets found in Dockerfile!"
              exit 1
            fi
            
            # Check for latest tags
            if grep -q "FROM.*:latest" Dockerfile* 2>/dev/null; then
              echo "⚠️  Using :latest tag - consider pinning versions"
            fi
          else
            echo "No Dockerfile found - skipping Docker security checks"
          fi
          
          echo "✅ Docker security check complete"

  secrets-in-artifacts:
    name: Scan Build Artifacts for Secrets
    runs-on: ubuntu-latest
    needs: [frontend-build-security, backend-build-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all
        run: |
          # Build with dummy values
          export NODE_ENV=production
          export DATABASE_URL=postgresql://dummy:dummy@localhost:5432/dummy
          export DIRECT_URL=postgresql://dummy:dummy@localhost:5432/dummy
          export VITE_SUPABASE_URL=https://dummy.supabase.co
          export VITE_SUPABASE_ANON_KEY=dummy-anon-key
          export VITE_API_URL=https://api.dummy.com
          export VITE_STRIPE_PUBLISHABLE_KEY=pk_test_dummy
          
          npm run build

      - name: Scan artifacts with Gitleaks
        run: |
          echo "Scanning build artifacts for secrets..."
          
          # Download gitleaks
          wget -q https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          
          # Scan dist directories
          ./gitleaks detect --source apps/frontend/dist --no-git --verbose --exit-code 1 || frontend_scan=$?
          ./gitleaks detect --source apps/backend/dist --no-git --verbose --exit-code 1 || backend_scan=$?
          
          if [ "${frontend_scan:-0}" -ne 0 ] || [ "${backend_scan:-0}" -ne 0 ]; then
            echo "❌ Secrets found in build artifacts!"
            exit 1
          fi
          
          echo "✅ No secrets found in build artifacts"

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          echo "Checking license compliance..."
          
          # Install license checker
          npm install -g license-checker
          
          # Check for problematic licenses
          problematic_licenses=(
            "GPL"
            "AGPL"
            "LGPL"
            "EUPL"
            "CC-BY-SA"
            "CC-BY-NC"
          )
          
          cd apps/frontend
          echo "Checking frontend licenses..."
          license_output=$(npx license-checker --production --summary 2>/dev/null)
          
          for license in "${problematic_licenses[@]}"; do
            if echo "$license_output" | grep -i "$license"; then
              echo "⚠️  Found potentially problematic license: $license in frontend"
            fi
          done
          
          cd ../backend
          echo "Checking backend licenses..."
          license_output=$(npx license-checker --production --summary 2>/dev/null)
          
          for license in "${problematic_licenses[@]}"; do
            if echo "$license_output" | grep -i "$license"; then
              echo "⚠️  Found potentially problematic license: $license in backend"
            fi
          done
          
          cd ../..
          echo "✅ License compliance check complete"

  build-integrity:
    name: Build Integrity Verification
    runs-on: ubuntu-latest
    needs: [frontend-build-security, backend-build-security, secrets-in-artifacts]
    steps:
      - name: Build security summary
        run: |
          echo "🔒 Build Security Validation Complete!"
          echo ""
          echo "✅ No source maps in frontend production build"
          echo "✅ No sensitive environment variables exposed"
          echo "✅ No debug code in production"
          echo "✅ No secrets in build artifacts"
          echo "✅ License compliance checked"
          echo ""
          echo "The builds are secure and ready for deployment!"