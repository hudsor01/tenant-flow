name: Deploy

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ runner.os }}-
      
      - name: Install dependencies
        run: |
          echo "üîß Installing dependencies..."
          # Install with platform-specific binaries for Linux
          npm ci --prefer-offline --no-audit --fund=false --include=optional
          echo "‚úÖ Dependencies installed"
      
      - name: Install Vercel CLI
        run: |
          echo "üîß Installing Vercel CLI..."
          npm install --global vercel@latest
          echo "‚úÖ Vercel CLI installed"
      
      - name: Pull Vercel Environment
        run: |
          echo "üîß Pulling Vercel configuration..."
          vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "‚úÖ Vercel configuration loaded"
      
      - name: Generate Prisma Client
        run: |
          echo "üîß Generating Prisma client..."
          npx turbo run generate --filter=@repo/database
          echo "‚úÖ Prisma client generated"
      
      - name: Build Dependencies
        run: |
          echo "üîß Building database package..."
          npx turbo run build --filter=@repo/database
          echo "üîß Building shared package..."
          npx turbo run build --filter=@repo/shared
          echo "‚úÖ Dependencies built"
      
      - name: Build Project
        run: |
          echo "üîß Building project with Vercel..."
          vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}
          echo "‚úÖ Project built"
      
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "üîß Deploying to production..."
            vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
            echo "‚úÖ Production deployment completed"
          else
            echo "üîß Deploying preview..."
            vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
            echo "‚úÖ Preview deployment completed"
          fi
      
      - name: Warm Production Cache
        if: github.ref == 'refs/heads/main' && success()
        run: |
          echo "üîß Warming edge cache..."
          sleep 30  # Wait for deployment to propagate
          curl -X POST "https://tenantflow.app/api/edge-cache/warm" \
            -H "Content-Type: application/json" \
            -H "Referer: https://tenantflow.app" \
            || echo "‚ö†Ô∏è Cache warming failed but deployment succeeded"
          echo "‚úÖ Cache warming completed"