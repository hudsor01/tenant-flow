name: Fast Deploy Check

on:
    push:
        branches: [main]
    workflow_dispatch:

concurrency:
    group: deploy-${{ github.ref }}
    cancel-in-progress: true

jobs:
    validate:
        name: Quick Validate
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            - uses: actions/setup-node@v4
              with:
                  node-version: '22'

            # Skip npm install completely for quick validation
            # Just check syntax and types with existing node_modules
            - name: Quick syntax check
              run: |
                  # Check if critical files exist
                  test -f package.json || exit 1
                  test -f apps/backend/package.json || exit 1
                  test -f packages/database/prisma/schema.prisma || exit 1

                  # Validate JSON syntax
                  node -e "JSON.parse(require('fs').readFileSync('package.json'))"
                  node -e "JSON.parse(require('fs').readFileSync('tsconfig.json'))"

                  echo "✅ File structure valid"

    docker-build:
        name: Docker Build Check
        needs: validate
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - uses: actions/checkout@v4

            - name: Dockerfile lint
              run: |
                  # Quick Dockerfile validation without building
                  if ! grep -q "FROM node:22-slim" Dockerfile; then
                    echo "❌ Dockerfile missing correct base image"
                    exit 1
                  fi

                  if ! grep -q "CMD.*dist/main.js" Dockerfile; then
                    echo "❌ Dockerfile missing correct CMD"
                    exit 1
                  fi

                  echo "✅ Dockerfile structure valid"

            - name: Test build (first stage only)
              run: |
                  # Build only the first stage to validate syntax
                  docker build --target builder -t test-builder . || {
                    echo "❌ Docker build failed"
                    exit 1
                  }
                  echo "✅ Docker build stage 1 successful"

    deploy-ready:
        name: Deploy Ready
        needs: [validate, docker-build]
        runs-on: ubuntu-latest
        steps:
            - run: |
                  echo "✅ All quick checks passed"
                  echo "Ready for deployment!"
