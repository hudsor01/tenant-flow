name: Optimized Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '22.x'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  TURBO_CACHE: 'remote:rw'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel production deploys

jobs:
  # Detect what changed
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'packages/shared/**'
              - 'packages/tailwind-config/**'
              - 'vercel.json'
            backend:
              - 'apps/backend/**'
              - 'packages/shared/**'
              - 'Dockerfile'
              - 'railway.toml'
            docker:
              - 'Dockerfile'
              - '.dockerignore'

  # Deploy frontend to Vercel
  deploy-frontend:
    name: Deploy Frontend to Vercel
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest  # Change to ubuntu-latest-4-cores if you have access to larger runners
    timeout-minutes: 5
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      # Cache Vercel CLI
      - name: Cache Vercel CLI
        id: cache-vercel
        uses: actions/cache@v4
        with:
          path: ~/.npm/vercel
          key: ${{ runner.os }}-vercel-cli
      
      # Install Vercel CLI
      - name: Install Vercel CLI
        if: steps.cache-vercel.outputs.cache-hit != 'true'
        run: npm i -g vercel@latest
      
      # Install all dependencies
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      # Build shared packages first (uses Turbo cache)
      - name: Build shared packages
        run: npm run build --filter=@tenantflow/shared
      
      # Pull and build in parallel
      - name: Build and Deploy to Vercel
        run: |
          # Start deployment timer
          echo "DEPLOY_START=$(date +%s)" >> $GITHUB_ENV
          
          # Pull Vercel environment in background
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} &
          PULL_PID=$!
          
          # Wait for pull to complete
          wait $PULL_PID
          
          # Build with Turbo cache
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          
          # Deploy prebuilt
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
      
      - name: Get deployment URL
        id: deployment
        run: |
          DEPLOYMENT_URL=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep production | head -1 | awk '{print $2}')
          echo "url=https://$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
      
      - name: Report deployment time
        if: always()
        run: |
          DEPLOY_END=$(date +%s)
          DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
          echo "⏱️ Frontend deployment time: ${DEPLOY_TIME}s"
          echo "📦 Deployed to: ${{ steps.deployment.outputs.url }}"
      
      - name: Comment deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 Frontend deployed to: ${{ steps.deployment.outputs.url }}`
            });

  # Deploy backend to Railway
  deploy-backend:
    name: Deploy Backend to Railway
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.docker == 'true'
    runs-on: ubuntu-latest  # Change to ubuntu-latest-4-cores if you have access to larger runners
    timeout-minutes: 10
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      # Start deployment timer
      - name: Start timer
        run: echo "DEPLOY_START=$(date +%s)" >> $GITHUB_ENV
      
      # Set up Docker Buildx with GitHub Actions cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Log in to GitHub Container Registry for cache storage
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }} # Use a PAT with write:packages scope
      
      # Build and push Docker image with registry caching for Railway
      - name: Build Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/tenant-flow:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/tenant-flow:latest
            ghcr.io/${{ github.repository_owner }}/tenant-flow:cache
          load: true
          push: true
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DIRECT_URL=${{ secrets.DIRECT_URL }}
      
      # Install Railway CLI with cache
      - name: Cache Railway CLI
        id: cache-railway
        uses: actions/cache@v4
        with:
          path: ~/.npm/@railway
          key: ${{ runner.os }}-railway-cli
      
      - name: Install Railway CLI
        if: steps.cache-railway.outputs.cache-hit != 'true'
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: railway up --detach
      
      - name: Get deployment status
        id: railway-status
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          # Wait for initial deployment
          sleep 10
          
          # Get deployment URL
          DEPLOYMENT_INFO=$(railway status --json || echo "{}")
          SERVICE_URL=$(echo "$DEPLOYMENT_INFO" | jq -r '.url // empty')
          
          if [ -n "$SERVICE_URL" ]; then
            echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
            echo "✅ Backend deployed to: $SERVICE_URL"
          else
            echo "⚠️ Could not get deployment URL"
          fi
      
      # Optimized health check with shorter intervals
      - name: Health check
        if: steps.railway-status.outputs.url
        run: |
          max_attempts=20
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt..."
            
            if curl -f "${{ steps.railway-status.outputs.url }}/health" > /dev/null 2>&1; then
              echo "✅ Health check passed!"
              break
            fi
            
            sleep 3  # Reduced from 10s to 3s
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            exit 1
          fi
      
      - name: Report deployment time
        if: always()
        run: |
          DEPLOY_END=$(date +%s)
          DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
          echo "⏱️ Backend deployment time: ${DEPLOY_TIME}s"

  # Update deployment status
  deployment-status:
    name: Deployment Status
    needs: [deploy-frontend, deploy-backend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Frontend status
          if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "✅ **Frontend**: Deployed to Vercel" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-frontend.result }}" == "skipped" ]]; then
            echo "⏭️ **Frontend**: No changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Backend status
          if [[ "${{ needs.deploy-backend.result }}" == "success" ]]; then
            echo "✅ **Backend**: Deployed to Railway" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-backend.result }}" == "skipped" ]]; then
            echo "⏭️ **Backend**: No changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY