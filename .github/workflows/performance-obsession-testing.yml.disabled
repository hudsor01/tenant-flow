name: Performance Obsession Testing - Apple Standards

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '22'

jobs:
  performance-regression-prevention:
    name: Performance Regression Prevention
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30 # Wait for servers to start
      env:
        NODE_ENV: test

    - name: Run critical performance gate tests
      run: npx playwright test tests/performance/regression/performance-regression-prevention.spec.ts --reporter=json
      continue-on-error: true
      id: critical-gates

    - name: Check critical performance gates
      if: steps.critical-gates.outcome == 'failure'
      run: |
        echo "❌ CRITICAL PERFORMANCE GATES FAILED"
        echo "This build violates Apple's sub-200ms interaction standard"
        exit 1

  sub-200ms-interaction-testing:
    name: Sub-200ms Interaction Testing
    runs-on: ubuntu-latest
    needs: performance-regression-prevention

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test

    - name: Run sub-200ms interaction tests
      run: npx playwright test tests/performance/interactions/sub-200ms-interactions.spec.ts --reporter=json

    - name: Upload performance metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: sub-200ms-interaction-results
        path: test-results/

  micro-interaction-satisfaction:
    name: Micro-Interaction Satisfaction Testing
    runs-on: ubuntu-latest
    needs: performance-regression-prevention

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test

    - name: Run button press satisfaction tests
      run: npx playwright test tests/performance/micro-interactions/button-press-satisfaction.spec.ts --reporter=json

    - name: Run Apple motion token tests
      run: npx playwright test tests/performance/micro-interactions/apple-motion-tokens.spec.ts --reporter=json

    - name: Upload satisfaction metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: micro-interaction-results
        path: test-results/

  bored-browsing-engagement:
    name: Bored Browsing Engagement Testing
    runs-on: ubuntu-latest
    needs: performance-regression-prevention

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test

    - name: Run bored browsing tests
      run: npx playwright test tests/performance/interactions/bored-browsing-engagement.spec.ts --reporter=json

    - name: Upload engagement metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bored-browsing-results
        path: test-results/

  scroll-performance-testing:
    name: Buttery Smooth Scroll Testing
    runs-on: ubuntu-latest
    needs: performance-regression-prevention

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test

    - name: Run scroll performance tests
      run: npx playwright test tests/performance/scroll-performance/buttery-smooth-scroll.spec.ts --reporter=json

    - name: Upload scroll metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: scroll-performance-results
        path: test-results/

  loading-states-testing:
    name: Loading States & Contextual Messaging
    runs-on: ubuntu-latest
    needs: performance-regression-prevention

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test

    - name: Run loading states tests
      run: npx playwright test tests/performance/loading-states/contextual-loading.spec.ts --reporter=json

    - name: Upload loading state metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: loading-states-results
        path: test-results/

  lighthouse-performance-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: performance-regression-prevention

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright and Lighthouse dependencies
      run: |
        npx playwright install --with-deps chromium
        npm install -D playwright-lighthouse lighthouse

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test

    - name: Run Lighthouse performance audit
      run: npx playwright test tests/performance/lighthouse-integration.spec.ts --reporter=json
      continue-on-error: true

    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: |
          test-results/
          lighthouse-*.html

  real-user-monitoring-validation:
    name: Real User Monitoring Validation
    runs-on: ubuntu-latest
    needs: performance-regression-prevention

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Build projects
      run: npm run build

    - name: Start test servers
      run: |
        npm run dev &
        sleep 30
      env:
        NODE_ENV: test

    - name: Run real user monitoring tests
      run: npx playwright test tests/performance/user-monitoring/real-user-monitoring.spec.ts --reporter=json

    - name: Upload RUM metrics
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rum-results
        path: test-results/

  performance-summary-report:
    name: Performance Summary Report
    runs-on: ubuntu-latest
    needs: [
      sub-200ms-interaction-testing,
      micro-interaction-satisfaction,
      bored-browsing-engagement,
      scroll-performance-testing,
      loading-states-testing,
      lighthouse-performance-audit,
      real-user-monitoring-validation
    ]
    if: always()

    steps:
    - name: Download all performance artifacts
      uses: actions/download-artifact@v4
      with:
        path: performance-results/

    - name: Generate Performance Summary Report
      run: |
        echo "# 🚀 Performance Obsession Testing Report" > performance-summary.md
        echo "" >> performance-summary.md
        echo "## Apple's Performance-as-Feature Standard Results" >> performance-summary.md
        echo "" >> performance-summary.md

        # Extract and summarize key metrics from all test results
        find performance-results/ -name "*.json" -exec echo "Processing: {}" \; || true

        echo "## Test Suite Results" >> performance-summary.md
        echo "- ✅ Sub-200ms Interactions: ${{ needs.sub-200ms-interaction-testing.result }}" >> performance-summary.md
        echo "- ✅ Micro-Interaction Satisfaction: ${{ needs.micro-interaction-satisfaction.result }}" >> performance-summary.md
        echo "- ✅ Bored Browsing Engagement: ${{ needs.bored-browsing-engagement.result }}" >> performance-summary.md
        echo "- ✅ Buttery Smooth Scroll: ${{ needs.scroll-performance-testing.result }}" >> performance-summary.md
        echo "- ✅ Loading States & Contextual Messaging: ${{ needs.loading-states-testing.result }}" >> performance-summary.md
        echo "- ✅ Lighthouse Performance Audit: ${{ needs.lighthouse-performance-audit.result }}" >> performance-summary.md
        echo "- ✅ Real User Monitoring: ${{ needs.real-user-monitoring-validation.result }}" >> performance-summary.md
        echo "" >> performance-summary.md

        echo "## Critical Performance Gates" >> performance-summary.md
        echo "All interactions must meet Apple's sub-200ms standard for production deployment." >> performance-summary.md
        echo "" >> performance-summary.md

        # Check if all critical tests passed
        if [[ "${{ needs.sub-200ms-interaction-testing.result }}" == "success" && \
              "${{ needs.micro-interaction-satisfaction.result }}" == "success" && \
              "${{ needs.scroll-performance-testing.result }}" == "success" ]]; then
          echo "🟢 **PERFORMANCE GATES: PASSED**" >> performance-summary.md
          echo "This build meets Apple's obsession-critical performance standards." >> performance-summary.md
        else
          echo "🔴 **PERFORMANCE GATES: FAILED**" >> performance-summary.md
          echo "This build does not meet Apple's performance standards and should not be deployed." >> performance-summary.md
        fi

    - name: Upload Performance Summary
      uses: actions/upload-artifact@v4
      with:
        name: performance-summary-report
        path: performance-summary.md

    - name: Comment PR with performance results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('performance-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  performance-monitoring-alerts:
    name: Performance Monitoring Alerts
    runs-on: ubuntu-latest
    needs: [performance-summary-report]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Send performance degradation alert
      run: |
        echo "🚨 PERFORMANCE ALERT: Critical performance standards violated on ${{ github.ref }}"
        echo "Apple's sub-200ms interaction standard has been compromised."
        echo "Immediate attention required to maintain user experience quality."
        # Add webhook/notification integration here for Slack, Discord, etc.

    - name: Create performance issue
      if: github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 CRITICAL: Performance Standards Violated',
            body: `
            # Critical Performance Issue Detected

            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            **Workflow:** ${context.workflow}

            ## Issue
            The latest changes have caused performance regressions that violate Apple's sub-200ms interaction standard.

            ## Impact
            - User satisfaction may be compromised
            - Interaction responsiveness below acceptable standards
            - Potential negative impact on user engagement

            ## Action Required
            1. Review recent performance-related changes
            2. Run local performance tests to identify bottlenecks
            3. Optimize interactions to meet sub-200ms standard
            4. Verify all performance gates pass before merge

            ## Performance Testing
            Run full performance test suite: \`npm run test:performance\`
            `,
            labels: ['critical', 'performance', 'bug']
          });