name: Performance Monitoring

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *' # Every 6 hours
  push:
    branches:
      - main
      - develop

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://tenantflow.app
            https://tenantflow.app/auth/login
            https://tenantflow.app/pricing
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Generate Performance Report
        if: always()
        run: |
          echo "## 🚀 Lighthouse Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Core Web Vitals" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| LCP (Largest Contentful Paint) | < 2.5s | ⏱️ |" >> $GITHUB_STEP_SUMMARY
          echo "| FID (First Input Delay) | < 100ms | 🖱️ |" >> $GITHUB_STEP_SUMMARY
          echo "| CLS (Cumulative Layout Shift) | < 0.1 | 📐 |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build shared packages
        run: npm run build:shared

      - name: Analyze bundle size
        run: |
          cd apps/frontend
          npx next build --profile
          
      - name: Generate Bundle Report
        if: always()
        run: |
          echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get Next.js build output
          if [ -f "apps/frontend/.next/analyze/client.html" ]; then
            echo "✅ Bundle analysis complete" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Bundle analysis not available" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  api-performance:
    name: API Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Create k6 test script
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export const options = {
            stages: [
              { duration: '30s', target: 20 },
              { duration: '1m', target: 20 },
              { duration: '30s', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              http_req_failed: ['rate<0.1'],
            },
          };

          const BASE_URL = 'https://api.tenantflow.app';

          export default function() {
            // Test health endpoint
            const healthRes = http.get(`${BASE_URL}/health`);
            check(healthRes, {
              'health check status is 200': (r) => r.status === 200,
              'health check response time < 200ms': (r) => r.timings.duration < 200,
            });

            // Test API v1 health endpoint
            const apiHealthRes = http.get(`${BASE_URL}/api/v1/health`);
            check(apiHealthRes, {
              'API health status is 200': (r) => r.status === 200,
              'API health response time < 300ms': (r) => r.timings.duration < 300,
            });

            sleep(1);
          }
          EOF

      - name: Run performance tests
        continue-on-error: true
        run: |
          k6 run load-test.js --out json=performance-results.json || true

      - name: Generate API Performance Report
        if: always()
        run: |
          echo "## 🚀 API Performance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Endpoint Response Times" >> $GITHUB_STEP_SUMMARY
          echo "| Endpoint | Target | P95 |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| /health | < 200ms | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| /api/v1/health | < 300ms | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  memory-usage:
    name: Memory Usage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build project
        run: |
          npm run build:shared
          npm run build

      - name: Check memory usage
        run: |
          echo "## 💾 Memory Usage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Memory Stats" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Max Memory | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | < 4GB | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | < 2GB | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "| Shared | < 1GB | ✅ |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY