name: Test Automation Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'fix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'
  POSTGRES_VERSION: '15'

jobs:
  # Job 1: Setup and preparation
  setup:
    name: Setup and Build
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      should-run-e2e: ${{ steps.changes.outputs.should-run-e2e }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Detect changes
        id: changes
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-run-e2e=true" >> $GITHUB_OUTPUT
          else
            # Check if there are significant changes that warrant E2E testing
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            if echo "$CHANGED_FILES" | grep -E "(apps/|packages/|tests/e2e)" > /dev/null; then
              echo "should-run-e2e=true" >> $GITHUB_OUTPUT
            else
              echo "should-run-e2e=false" >> $GITHUB_OUTPUT
            fi
          fi

  # Job 2: Linting and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            deps-

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run Prettier check
        run: npm run format:check

      - name: Security audit
        run: npm audit --audit-level=moderate

  # Job 3: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        workspace: ['backend', 'frontend', 'shared']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run unit tests
        run: npm run test:unit --filter=@tenantflow/${{ matrix.workspace }}
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Setup test database
        run: |
          cd apps/backend
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_test
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_TEST }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET_TEST }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_TEST }}

      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/integration/

  # Job 5: E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: needs.setup.outputs.should-run-e2e == 'true'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tenantflow_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Setup E2E test environment
        run: |
          cd apps/backend
          npx prisma migrate deploy
          npm run test:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_e2e
          NODE_ENV: test

      - name: Start application servers
        run: |
          # Start backend in background
          cd apps/backend
          npm run dev &
          BACKEND_PID=$!
          echo "BACKEND_PID=$BACKEND_PID" >> $GITHUB_ENV
          
          # Start frontend in background
          cd apps/frontend
          npm run dev &
          FRONTEND_PID=$!
          echo "FRONTEND_PID=$FRONTEND_PID" >> $GITHUB_ENV
          
          # Wait for servers to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_e2e
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_TEST }}
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY_TEST }}

      - name: Run E2E tests
        run: npx playwright test --project=chromium
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_e2e
          E2E_API_TOKEN: ${{ secrets.E2E_API_TOKEN }}

      - name: Stop application servers
        if: always()
        run: |
          if [ ! -z "$BACKEND_PID" ]; then kill $BACKEND_PID || true; fi
          if [ ! -z "$FRONTEND_PID" ]; then kill $FRONTEND_PID || true; fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: test-results/
          retention-days: 7

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tenantflow_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.pnpm-store
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Setup performance test environment
        run: |
          cd apps/backend
          npx prisma migrate deploy
          npm run test:seed:performance
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_perf
          NODE_ENV: test

      - name: Run performance tests
        run: npm run test:performance
        env:
          PERFORMANCE_TEST: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_perf
          NODE_ENV: test

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: test-results/performance/

  # Job 7: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

  # Job 8: Test Results Aggregation
  test-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add lint results
          if [ -f lint-results.json ]; then
            echo "## Code Quality ✅" >> $GITHUB_STEP_SUMMARY
          else
            echo "## Code Quality ❌" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add unit test results
          echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
          find . -name "results.json" -path "*/unit/*" | while read file; do
            echo "- $(basename $(dirname $file)): $(jq -r '.stats.passes' $file) passed, $(jq -r '.stats.failures' $file) failed" >> $GITHUB_STEP_SUMMARY
          done
          
          # Add integration test results
          echo "## Integration Tests" >> $GITHUB_STEP_SUMMARY
          find . -name "results.json" -path "*/integration/*" | while read file; do
            echo "- $(jq -r '.stats.passes' $file) passed, $(jq -r '.stats.failures' $file) failed" >> $GITHUB_STEP_SUMMARY
          done
          
          # Add E2E test results
          echo "## E2E Tests" >> $GITHUB_STEP_SUMMARY
          find . -name "results.json" -path "*/e2e/*" | while read file; do
            echo "- Chromium: $(jq -r '.suites[0].specs | length' $file) specs" >> $GITHUB_STEP_SUMMARY
          done

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 9: Deployment to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment script here
          
      - name: Run smoke tests on staging
        run: |
          npm run test:smoke:staging
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
          STAGING_API_TOKEN: ${{ secrets.STAGING_API_TOKEN }}

# Workflow for cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test-results]
    if: always()
    
    steps:
      - name: Clean up test artifacts
        run: |
          echo "Cleaning up test data and artifacts..."
          # Add cleanup scripts here

# Notifications
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-results]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Log test results
        run: |
          echo "Test automation pipeline completed"
          echo "Check the workflow summary for detailed results"