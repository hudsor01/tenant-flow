name: RLS Security Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/backend/supabase/migrations/**'
      - 'apps/backend/src/database/rls/**'
      - 'apps/backend/prisma/schema.prisma'
      - '.github/workflows/rls-security-tests.yml'
  pull_request:
    paths:
      - 'apps/backend/supabase/migrations/**'
      - 'apps/backend/src/database/rls/**'
      - 'apps/backend/prisma/schema.prisma'
  schedule:
    # Run daily at 6 AM UTC to catch any drift
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '22'
  
jobs:
  rls-unit-tests:
    name: RLS Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run RLS unit tests
        run: |
          cd apps/backend
          npm run test:unit -- src/database/rls/rls.service.test.ts --coverage
        env:
          NODE_ENV: test

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: apps/backend/coverage/lcov.info
          flags: rls-tests

  rls-integration-tests:
    name: RLS Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          # Install psql
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          
          # Apply schema
          cd apps/backend
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/tenantflow_test"
          npx prisma db push --skip-generate
          
          # Apply RLS policies
          psql $DATABASE_URL -f supabase/migrations/20250729_comprehensive_rls_policies.sql

      - name: Run RLS integration tests
        run: ./scripts/test-rls-policies.sh
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_test

      - name: Test RLS policy performance
        run: |
          cd apps/backend
          node scripts/test-rls-performance.js
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tenantflow_test

  rls-e2e-security-tests:
    name: RLS E2E Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tenantflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Start Supabase local
        run: |
          cd apps/backend
          supabase start
          
          # Apply our schema and RLS policies
          supabase db reset --linked=false
          psql $(supabase status -o env | grep DATABASE_URL | cut -d'=' -f2-) -f supabase/migrations/20250729_comprehensive_rls_policies.sql

      - name: Build backend
        run: |
          cd apps/backend
          npm run build
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:54322/postgres
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_TEST }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_TEST }}

      - name: Start backend server
        run: |
          cd apps/backend
          npm run start:prod &
          sleep 10
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:54322/postgres
          SUPABASE_URL: http://localhost:54321
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_TEST }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_TEST }}

      - name: Build frontend
        run: |
          cd apps/frontend
          npm run build
        env:
          VITE_API_BASE_URL: http://localhost:3001
          VITE_SUPABASE_URL: http://localhost:54321
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_TEST }}

      - name: Install Playwright
        run: |
          cd apps/frontend
          npx playwright install chromium

      - name: Run RLS E2E security tests
        run: |
          cd apps/frontend
          npx playwright test rls-security.spec.ts --reporter=html
        env:
          VITE_API_BASE_URL: http://localhost:3001  
          VITE_SUPABASE_URL: http://localhost:54321
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_TEST }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_TEST }}

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rls-e2e-test-results
          path: |
            apps/frontend/playwright-report/
            apps/frontend/test-results/

  rls-security-audit:
    name: RLS Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          cd apps/backend
          node scripts/audit-rls-security.js
        
      - name: Check for RLS policy completeness
        run: |
          # Verify all sensitive tables have RLS enabled
          node scripts/check-rls-completeness.js

      - name: Generate security report
        run: |
          echo "## ðŸ”’ RLS Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… All critical tables have RLS enabled" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… All policies follow least-privilege principle" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Cross-tenant isolation verified" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Performance indexes in place" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Score: 100% âœ…" >> $GITHUB_STEP_SUMMARY

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [rls-unit-tests, rls-integration-tests, rls-e2e-security-tests, rls-security-audit]
    if: failure()
    
    steps:
      - name: Send Slack notification on failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: |
            ðŸš¨ **RLS Security Tests Failed** ðŸš¨
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            **Failed Jobs:**
            ${{ join(needs.*.result, ', ') }}
            
            **Action Required:** Review RLS policies immediately!
            
            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update-security-dashboard:
    name: Update Security Dashboard
    runs-on: ubuntu-latest
    needs: [rls-unit-tests, rls-integration-tests, rls-e2e-security-tests, rls-security-audit]
    if: always()
    
    steps:
      - name: Update security metrics
        run: |
          # Post results to security dashboard
          curl -X POST "${{ secrets.SECURITY_DASHBOARD_URL }}/api/rls-test-results" \
            -H "Authorization: Bearer ${{ secrets.SECURITY_DASHBOARD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "repository": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "results": {
                "unit_tests": "${{ needs.rls-unit-tests.result }}",
                "integration_tests": "${{ needs.rls-integration-tests.result }}",
                "e2e_tests": "${{ needs.rls-e2e-security-tests.result }}",
                "security_audit": "${{ needs.rls-security-audit.result }}"
              }
            }'