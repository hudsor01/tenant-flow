name: Dependency Audit

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * 1' # Every Monday at 9 AM UTC
  push:
    branches:
      - main
      - develop
    paths:
      - 'package*.json'
      - '**/package*.json'

jobs:
  security-audit:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        id: npm_audit
        continue-on-error: true
        run: |
          echo "## 🔒 NPM Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Run audit and capture output
          npm audit --json > audit-results.json 2>&1 || true
          
          # Parse results
          if [ -f audit-results.json ]; then
            VULNS=$(jq '.metadata.vulnerabilities' audit-results.json 2>/dev/null || echo '{}')
            if [ "$VULNS" != "{}" ] && [ "$VULNS" != "null" ]; then
              echo "### Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
              echo '```json' >> $GITHUB_STEP_SUMMARY
              echo "$VULNS" | jq '.' >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              
              CRITICAL=$(echo "$VULNS" | jq '.critical // 0')
              HIGH=$(echo "$VULNS" | jq '.high // 0')
              
              if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
                echo "❌ **Critical/High vulnerabilities found!**" >> $GITHUB_STEP_SUMMARY
                echo "::error::Found $CRITICAL critical and $HIGH high vulnerabilities"
                exit 1
              fi
            else
              echo "✅ **No vulnerabilities found**" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Run audit fix (dry run)
        if: failure() && steps.npm_audit.outcome == 'failure'
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Suggested Fixes" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          npm audit fix --dry-run >> $GITHUB_STEP_SUMMARY 2>&1 || true
          echo '```' >> $GITHUB_STEP_SUMMARY

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Check licenses
        run: |
          npx license-checker --summary --excludePrivatePackages > license-summary.txt || true
          
          echo "## 📜 License Compliance Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### License Summary" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat license-summary.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Check for problematic licenses
          PROBLEMATIC=$(npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;CC-BY-3.0;CC-BY-4.0;Unlicense;Python-2.0' 2>&1 | grep -c "error" || true)
          
          if [ "$PROBLEMATIC" -gt 0 ]; then
            echo "⚠️ **Potentially problematic licenses detected**" >> $GITHUB_STEP_SUMMARY
            echo "Please review the licenses above" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **All licenses appear compatible**" >> $GITHUB_STEP_SUMMARY
          fi

  outdated-check:
    name: Outdated Dependencies Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Check for outdated packages
        run: |
          echo "## 📦 Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check outdated packages
          npm outdated --json > outdated.json 2>&1 || true
          
          if [ -s outdated.json ]; then
            # Count outdated packages
            OUTDATED_COUNT=$(jq 'length' outdated.json)
            
            if [ "$OUTDATED_COUNT" -gt 0 ]; then
              echo "### Found $OUTDATED_COUNT outdated packages" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              
              # Show major version updates
              echo "#### Major Version Updates Available:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              jq -r 'to_entries[] | select(.value.current != .value.wanted) | "\(.key): \(.value.current) → \(.value.latest)"' outdated.json | head -10 >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ **All dependencies are up to date**" >> $GITHUB_STEP_SUMMARY
          fi

  bundle-size-check:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build and analyze
        run: |
          npm run build:shared
          cd apps/frontend
          
          # Build and get size
          npm run build > build-output.txt 2>&1 || true
          
          echo "## 📊 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract build size info if available
          if grep -q "First Load JS" build-output.txt; then
            echo "### Build Output Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -A 10 "First Load JS" build-output.txt >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check if build size is reasonable
          if [ -d ".next" ]; then
            TOTAL_SIZE=$(du -sh .next | cut -f1)
            echo "### Total Build Size: $TOTAL_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

  dependency-report:
    name: Generate Dependency Report
    runs-on: ubuntu-latest
    needs: [security-audit, license-check, outdated-check]
    if: always()
    steps:
      - name: Summary Report
        run: |
          echo "## 📋 Dependency Audit Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '⚠️ Review Required' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Outdated Check | ${{ needs.outdated-check.result == 'success' && '✅ Checked' || '⚠️ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          
          # Fail if security audit failed
          if [ "${{ needs.security-audit.result }}" != "success" ]; then
            echo "::error::Security vulnerabilities detected - manual review required"
            exit 1
          fi