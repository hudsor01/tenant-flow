name: Fast Feedback - Development

on:
  push:
    branches: [ 'feature/**', 'fix/**', 'feat/**' ]
  pull_request:
    types: [ opened, synchronize, reopened ]

concurrency:
  group: fast-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '24'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  pre-check:
    name: Pre-Check
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      should-run-tests: ${{ steps.analyze.outputs.should-run-tests }}
      affected-apps: ${{ steps.analyze.outputs.affected-apps }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: true

      - name: Analyze changes
        id: analyze
        run: |
          # Check what changed
          CHANGED_FILES=$(git diff --name-only HEAD~1 || true)
          echo "Changed files: $CHANGED_FILES"

          # Check if we need to run tests
          if echo "$CHANGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' > /dev/null; then
            echo "should-run-tests=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-tests=false" >> $GITHUB_OUTPUT
          fi

          # Determine affected apps
          AFFECTED_APPS=""
          if echo "$CHANGED_FILES" | grep '^apps/frontend/' > /dev/null; then
            AFFECTED_APPS="$AFFECTED_APPS frontend"
          fi
          if echo "$CHANGED_FILES" | grep '^apps/backend/' > /dev/null; then
            AFFECTED_APPS="$AFFECTED_APPS backend"
          fi
          if echo "$CHANGED_FILES" | grep '^packages/' > /dev/null; then
            AFFECTED_APPS="$AFFECTED_APPS frontend backend"
          fi

          echo "affected-apps=${AFFECTED_APPS:-none}" >> $GITHUB_OUTPUT

      - name: Quick syntax validation
        run: |
          # Ultra-fast syntax check without npm install
          if [[ -f package.json ]]; then
            node -e "JSON.parse(require('fs').readFileSync('package.json'))" || {
              echo "❌ Invalid package.json"
              exit 1
            }
          fi
          echo "✅ Syntax check passed"

  quick-quality:
    name: Quick Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: pre-check
    if: needs.pre-check.outputs.should-run-tests == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Turbo Cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies and tools
        run: |
          npm ci --prefer-offline --no-audit --no-fund

      - name: Clean test artifacts
        run: |
          # Remove any temporary test files that might cause linting issues
          find . -name "test.js" -not -path "*/node_modules/*" -type f -delete 2>/dev/null || true
          find . -name "test.ts" -not -path "*/node_modules/*" -not -path "*/src/*" -type f -delete 2>/dev/null || true

      - name: Quick lint (changed files only)
        run: |
          # Get changed TypeScript/JavaScript files
          CHANGED_FILES=$(git diff --name-only HEAD~1 | grep -E '\.(ts|tsx|js|jsx)$' | head -20 || true)

          if [[ -n "$CHANGED_FILES" ]]; then
            LINT_FILES=""
            for FILE in $CHANGED_FILES; do
              # Only lint files that actually exist and aren't test artifacts
              if [ -f "$FILE" ] && [[ "$FILE" != *"/test.js" ]] && [[ "$FILE" != *"/test.ts" ]]; then
                LINT_FILES="$LINT_FILES $FILE"
              fi
            done

            if [[ -n "$LINT_FILES" ]]; then
              echo "Linting changed files: $LINT_FILES"
              npx eslint $LINT_FILES --max-warnings 5 --no-warn-ignored || {
                echo "⚠️ Linting found issues - please fix before merging"
                exit 1
              }
            else
              echo "No existing files to lint."
            fi
          else
            echo "No TypeScript/JavaScript files changed"
          fi

      - name: Build and Typecheck (Turbo Best Practices)
        run: |
          AFFECTED="${{ needs.pre-check.outputs.affected-apps }}"
          
          if [[ "$AFFECTED" == "none" ]]; then
            echo "ℹ️ No affected packages - skipping build and typecheck"
            exit 0
          fi
          
          echo "=== Building and typechecking affected packages: $AFFECTED ==="
          
          # Use Turbo's dependency-aware task execution
          # This ensures proper build order without manual dependency management
          if [[ "$AFFECTED" == *"frontend"* ]]; then
            echo "🔨 Building and typechecking frontend dependencies..."
            npx turbo run build typecheck --filter=@repo/frontend...
          fi
          
          if [[ "$AFFECTED" == *"backend"* ]]; then
            echo "🔨 Building and typechecking backend dependencies..."
            npx turbo run build typecheck --filter=@repo/backend...
          fi
          
          echo "✅ All affected packages built and typechecked successfully"

  essential-tests:
    name: Essential Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: [pre-check, quick-quality]
    if: needs.pre-check.outputs.should-run-tests == 'true'
    strategy:
      fail-fast: false
      matrix:
        app:
          - ${{ contains(needs.pre-check.outputs.affected-apps, 'frontend') && 'frontend' || '' }}
          - ${{ contains(needs.pre-check.outputs.affected-apps, 'backend') && 'backend' || '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies and tools
        run: |
          npm ci --prefer-offline --no-audit --no-fund

      - name: Run core tests for ${{ matrix.app }}
        run: |
          cd apps/${{ matrix.app }}

          # Run only fast unit tests, skip slow integration tests
          if [[ "${{ matrix.app }}" == "frontend" ]]; then
            # Frontend: Run unit tests
            npm run test:unit --maxWorkers=2 || {
              echo "⚠️ Some tests failed - review before merging"
              exit 0  # Don't fail fast feedback for test issues
            }
          elif [[ "${{ matrix.app }}" == "backend" ]]; then
            # Backend: Run unit tests
            npm run test --maxWorkers=2 || {
              echo "⚠️ Some tests failed - review before merging"
              exit 0
            }
          fi
        env:
          NODE_ENV: test
          CI: true

  build-smoke-test:
    name: Build Smoke Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [pre-check, quick-quality]
    if: needs.pre-check.outputs.should-run-tests == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          submodules: true

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Turbo Cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Install dependencies and tools
        run: |
          npm ci --prefer-offline --no-audit --no-fund

      - name: Production Build Test (Turbo Best Practices)
        run: |
          AFFECTED="${{ needs.pre-check.outputs.affected-apps }}"
          
          if [[ "$AFFECTED" == "none" ]]; then
            echo "ℹ️ No affected packages - skipping production build test"
            exit 0
          fi
          
          echo "=== Testing production builds for affected packages: $AFFECTED ==="
          
          # Use Turbo to build all dependencies and affected apps
          # The ... syntax includes all dependencies automatically
          if [[ "$AFFECTED" == *"frontend"* ]]; then
            echo "🔨 Production build test: Frontend + dependencies..."
            NODE_ENV=production npx turbo run build --filter=@repo/frontend...
          fi
          
          if [[ "$AFFECTED" == *"backend"* ]]; then
            echo "🔨 Production build test: Backend + dependencies..."
            NODE_OPTIONS='--max-old-space-size=4096' NODE_ENV=production npx turbo run build --filter=@repo/backend...
          fi
          
          echo "✅ Production build test completed successfully"
        env:
          NODE_ENV: production

  feedback-summary:
    name: Fast Feedback Summary
    runs-on: ubuntu-latest
    needs: [pre-check, quick-quality, essential-tests, build-smoke-test]
    if: always()
    steps:
      - name: Generate feedback report
        run: |
          echo "## 🚀 Fast Feedback Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.pre-check.outputs.should-run-tests }}" == "false" ]]; then
            echo "ℹ️ **No code changes detected** - skipped most checks" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: ✅ Ready to merge" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          echo "**Changed components**: ${{ needs.pre-check.outputs.affected-apps }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Check | ${{ needs.quick-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} | ~3min |" >> $GITHUB_STEP_SUMMARY
          echo "| Essential Tests | ${{ needs.essential-tests.result == 'success' && '✅ Passed' || needs.essential-tests.result == 'skipped' && '⏭️ Skipped' || '⚠️ Issues' }} | ~5min |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Check | ${{ needs.build-smoke-test.result == 'success' && '✅ Passed' || '❌ Failed' }} | ~7min |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.quick-quality.result }}" == "success" && "${{ needs.build-smoke-test.result }}" == "success" ]]; then
            echo "**Overall Status**: ✅ **Ready for review**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 *This was a fast feedback check. Full CI will run on merge to develop/main.*" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Overall Status**: ❌ **Needs attention**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please fix the issues above before requesting review." >> $GITHUB_STEP_SUMMARY
          fi
