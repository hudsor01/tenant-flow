name: PR Check (Optimized)

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]
  
# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  FORCE_COLOR: 3

jobs:
  # Job 1: Detect changes (very fast, ~5s)
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.set-outputs.outputs.frontend }}
      backend: ${{ steps.set-outputs.outputs.backend }}
      database: ${{ steps.set-outputs.outputs.database }}
      shared: ${{ steps.set-outputs.outputs.shared }}
      emails: ${{ steps.set-outputs.outputs.emails }}
      deps: ${{ steps.set-outputs.outputs.deps }}
      ci: ${{ steps.set-outputs.outputs.ci }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
              - 'packages/shared/**'
              - 'packages/tailwind-config/**'
            backend:
              - 'apps/backend/**'
              - 'packages/shared/**'
              - 'packages/database/**'
            database:
              - 'packages/database/**'
              - '**/prisma/**'
            shared:
              - 'packages/shared/**'
            emails:
              - 'packages/emails/**'
            deps:
              - 'package.json'
              - 'package-lock.json'
              - '**/package.json'
            ci:
              - '.github/workflows/**'
              - 'turbo.json'

      - name: Set outputs
        id: set-outputs
        run: |
          echo "frontend=${{ steps.filter.outputs.frontend }}" >> $GITHUB_OUTPUT
          echo "backend=${{ steps.filter.outputs.backend }}" >> $GITHUB_OUTPUT
          echo "database=${{ steps.filter.outputs.database }}" >> $GITHUB_OUTPUT
          echo "shared=${{ steps.filter.outputs.shared }}" >> $GITHUB_OUTPUT
          echo "emails=${{ steps.filter.outputs.emails }}" >> $GITHUB_OUTPUT
          echo "deps=${{ steps.filter.outputs.deps }}" >> $GITHUB_OUTPUT
          echo "ci=${{ steps.filter.outputs.ci }}" >> $GITHUB_OUTPUT

  # Job 2: Lint only changed files (parallel)
  lint:
    name: Lint
    needs: changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Restore node_modules cache
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
            
      - name: Install dependencies (if cache miss)
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit --fund=false
        
      - name: Lint changed files only
        run: |
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || echo "")
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES" | xargs npx eslint --cache --cache-location .eslintcache --no-warn-ignored
          else
            echo "No files to lint"
          fi

  # Job 3: Type check (parallel)
  typecheck:
    name: Type Check
    needs: changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        package: [frontend, backend, shared, database, emails]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Restore dependencies and build cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            .turbo
            packages/*/dist
            packages/database/src/generated
          key: typecheck-${{ matrix.package }}-${{ runner.os }}-${{ hashFiles('package-lock.json', 'turbo.json') }}
          restore-keys: |
            typecheck-${{ matrix.package }}-${{ runner.os }}-
            
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --fund=false
        
      - name: Generate Prisma (if needed)
        if: matrix.package == 'backend' || matrix.package == 'database'
        run: npx turbo run generate --filter=@repo/database
        
      - name: Build dependencies
        if: matrix.package == 'frontend' || matrix.package == 'backend'
        run: npx turbo run build --filter=@repo/shared --filter=@repo/database
        
      - name: Type check ${{ matrix.package }}
        run: npx turbo run typecheck --filter=@repo/${{ matrix.package }}

  # Job 4: Build tests (parallel by package)
  build:
    name: Build
    needs: [changes, typecheck]
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        include:
          - package: frontend
            condition: frontend
          - package: backend
            condition: backend
    steps:
      - uses: actions/checkout@v4
        if: needs.changes.outputs[matrix.condition] == 'true'
        
      - name: Setup Node.js
        if: needs.changes.outputs[matrix.condition] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Restore Turbo cache
        if: needs.changes.outputs[matrix.condition] == 'true'
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-build-${{ matrix.package }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-build-${{ matrix.package }}-${{ runner.os }}-
            
      - name: Restore build outputs
        if: needs.changes.outputs[matrix.condition] == 'true'
        uses: actions/cache@v4
        with:
          path: |
            apps/${{ matrix.package }}/.next
            apps/${{ matrix.package }}/dist
            packages/*/dist
          key: build-output-${{ matrix.package }}-${{ runner.os }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            build-output-${{ matrix.package }}-${{ runner.os }}-
            
      - name: Install dependencies
        if: needs.changes.outputs[matrix.condition] == 'true'
        run: npm ci --prefer-offline --no-audit --fund=false
        
      - name: Build ${{ matrix.package }}
        if: needs.changes.outputs[matrix.condition] == 'true'
        run: |
          if [ "${{ matrix.package }}" == "frontend" ]; then
            # Quick dev build for CI (faster)
            NODE_ENV=development npx turbo run build --filter=@repo/frontend
          else
            npx turbo run build --filter=@repo/${{ matrix.package }}
          fi
        timeout-minutes: 5

  # Job 5: Tests (if any test files changed)
  test:
    name: Tests
    needs: changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    strategy:
      matrix:
        package: [frontend, backend]
    steps:
      - uses: actions/checkout@v4
        if: needs.changes.outputs[${{ matrix.package }}] == 'true'
        
      - name: Setup Node.js
        if: needs.changes.outputs[${{ matrix.package }}] == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Restore test cache
        if: needs.changes.outputs[${{ matrix.package }}] == 'true'
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            .vitest
            coverage
          key: test-${{ matrix.package }}-${{ runner.os }}-${{ hashFiles('package-lock.json', '**/*.test.ts', '**/*.test.tsx') }}
          restore-keys: |
            test-${{ matrix.package }}-${{ runner.os }}-
            
      - name: Install dependencies
        if: needs.changes.outputs[${{ matrix.package }}] == 'true'
        run: npm ci --prefer-offline --no-audit --fund=false
        
      - name: Run tests for ${{ matrix.package }}
        if: needs.changes.outputs[${{ matrix.package }}] == 'true'
        run: |
          cd apps/${{ matrix.package }}
          npm run test:unit 2>/dev/null || echo "No tests found"
        continue-on-error: true

  # Final status check (required for branch protection)
  status-check:
    name: Status Check
    needs: [lint, typecheck, build, test]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.typecheck.result }}" == "failure" ] || \
             [ "${{ needs.build.result }}" == "failure" ]; then
            echo "❌ One or more checks failed"
            exit 1
          else
            echo "✅ All checks passed"
          fi
          
      - name: Security Integration Status
        run: |
          echo "🔒 Security scanning is handled by separate security-scan.yml workflow"
          echo "📋 Security results are available in the GitHub Security tab"
          echo "⚠️  Review security findings regularly and address high/critical issues"
