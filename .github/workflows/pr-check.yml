name: PR Quality Check

on:
  pull_request:
    branches: [main]

jobs:
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-pr-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            turbo-pr-${{ runner.os }}-
            turbo-${{ runner.os }}-
      
      - name: Install dependencies
        run: |
          echo "üîß Installing dependencies..."
          npm ci --prefer-offline --no-audit --fund=false
          echo "‚úÖ Dependencies installed"
      
      - name: Check Changed Packages
        id: changes
        run: |
          echo "üîç Detecting changed packages..."
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Detect which packages changed
          DATABASE_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^packages/database" && echo "true" || echo "false")
          SHARED_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^packages/shared" && echo "true" || echo "false")
          FRONTEND_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^apps/frontend" && echo "true" || echo "false")
          BACKEND_CHANGED=$(echo "$CHANGED_FILES" | grep -q "^apps/backend" && echo "true" || echo "false")
          
          echo "database_changed=$DATABASE_CHANGED" >> $GITHUB_OUTPUT
          echo "shared_changed=$SHARED_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend_changed=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "backend_changed=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          
          echo "üìä Changed packages: DB=$DATABASE_CHANGED, Shared=$SHARED_CHANGED, Frontend=$FRONTEND_CHANGED, Backend=$BACKEND_CHANGED"

      - name: Generate Prisma (if needed)
        if: steps.changes.outputs.database_changed == 'true' || steps.changes.outputs.backend_changed == 'true'
        run: |
          echo "üîß Generating Prisma client..."
          npx turbo run generate --filter=@repo/database

      - name: Build Dependencies (parallel)
        run: |
          echo "üîß Building dependencies in parallel..."
          npx turbo run build --filter=@repo/database --filter=@repo/shared --parallel
          echo "‚úÖ Dependencies ready"

      - name: Type Check (parallel)
        run: |
          echo "üîß Type checking in parallel..."
          npx turbo run typecheck --parallel
          echo "‚úÖ Type check passed"

      - name: Lint Changed Files Only
        run: |
          echo "üîß Linting changed TypeScript files..."
          CHANGED_TS_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(ts|tsx)$' | head -50 || echo "")
          if [ -n "$CHANGED_TS_FILES" ]; then
            echo "Linting $(echo "$CHANGED_TS_FILES" | wc -l) files..."
            echo "$CHANGED_TS_FILES" | xargs npx eslint --max-warnings 0 --cache
            echo "‚úÖ Lint passed"
          else
            echo "‚ÑπÔ∏è No TypeScript files to lint"
          fi

      - name: Quick Build Test (changed packages only)
        run: |
          echo "üîß Testing build for changed packages..."
          FILTERS=""
          
          if [[ "${{ steps.changes.outputs.frontend_changed }}" == "true" ]]; then
            FILTERS="$FILTERS --filter=@repo/frontend"
          fi
          
          if [[ "${{ steps.changes.outputs.backend_changed }}" == "true" ]]; then
            FILTERS="$FILTERS --filter=@repo/backend"
          fi
          
          if [ -n "$FILTERS" ]; then
            npx turbo run build $FILTERS --parallel
            echo "‚úÖ Build test passed"
          else
            echo "‚ÑπÔ∏è No app packages changed, skipping build test"
          fi