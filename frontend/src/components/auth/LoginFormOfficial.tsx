import { useState } from 'react'\nimport { useNavigate, Link } from 'react-router-dom'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { Eye, EyeOff, Mail, Lock } from 'lucide-react'\nimport { PremiumButton } from '@/components/ui/button'\nimport { GoogleContinueButton } from '@/components/ui/google-oauth-button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useAuthStore } from '@/store/authStoreOfficial'\nimport AuthLayout from './AuthLayout'\n\nconst loginSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters')\n})\n\ntype LoginFormData = z.infer<typeof loginSchema>\n\n/**\n * Login form following official Supabase Auth patterns\n * @see https://supabase.com/docs/guides/auth/quickstarts/react\n * @see https://supabase.com/docs/guides/auth/social-login/auth-google\n */\nexport default function LoginFormOfficial() {\n  const navigate = useNavigate()\n  const [showPassword, setShowPassword] = useState(false)\n  const { signIn, signInWithGoogle, isLoading, error } = useAuthStore()\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors }\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema)\n  })\n\n  const onSubmit = async (data: LoginFormData) => {\n    await signIn(data.email, data.password)\n    // Navigation is handled by the auth state listener\n  }\n\n  const handleGoogleSignIn = async () => {\n    await signInWithGoogle()\n    // OAuth redirect will handle the rest\n  }\n\n  return (\n    <AuthLayout \n      title=\"Sign in to your account\" \n      subtitle=\"Welcome back! Please enter your details.\"\n    >\n      <div className=\"space-y-6\">\n        {/* Error Message */}\n        {error && (\n          <div className=\"rounded-md bg-red-50 p-4\">\n            <div className=\"text-sm text-red-700\">{error}</div>\n          </div>\n        )}\n\n        {/* Google Sign In */}\n        <GoogleContinueButton\n          onClick={handleGoogleSignIn}\n          disabled={isLoading}\n        >\n          Continue with Google\n        </GoogleContinueButton>\n\n        {/* Divider */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <div className=\"w-full border-t border-gray-300\" />\n          </div>\n          <div className=\"relative flex justify-center text-sm\">\n            <span className=\"bg-white px-2 text-gray-500\">Or continue with</span>\n          </div>\n        </div>\n\n        {/* Email/Password Form */}\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          {/* Email Field */}\n          <div>\n            <Label htmlFor=\"email\">Email address</Label>\n            <div className=\"relative mt-1\">\n              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                {...register('email')}\n                id=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                disabled={isLoading}\n                className=\"pl-10\"\n                placeholder=\"Enter your email\"\n              />\n            </div>\n            {errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n            )}\n          </div>\n\n          {/* Password Field */}\n          <div>\n            <Label htmlFor=\"password\">Password</Label>\n            <div className=\"relative mt-1\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                {...register('password')}\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                autoComplete=\"current-password\"\n                disabled={isLoading}\n                className=\"pl-10 pr-10\"\n                placeholder=\"Enter your password\"\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4\" />\n                ) : (\n                  <Eye className=\"h-4 w-4\" />\n                )}\n              </button>\n            </div>\n            {errors.password && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.password.message}</p>\n            )}\n          </div>\n\n          {/* Forgot Password Link */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm\">\n              <Link\n                to=\"/auth/forgot-password\"\n                className=\"font-medium text-blue-600 hover:text-blue-500\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n          </div>\n\n          {/* Submit Button */}\n          <PremiumButton\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full\"\n          >\n            {isLoading ? 'Signing in...' : 'Sign in'}\n          </PremiumButton>\n        </form>\n\n        {/* Sign Up Link */}\n        <p className=\"text-center text-sm text-gray-600\">\n          Don't have an account?{' '}\n          <Link\n            to=\"/auth/signup\"\n            className=\"font-medium text-blue-600 hover:text-blue-500\"\n          >\n            Sign up\n          </Link>\n        </p>\n      </div>\n    </AuthLayout>\n  )\n}